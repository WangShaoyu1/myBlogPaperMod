<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PaperMod</title>
    <link>http://localhost:1313/posts/papermod/</link>
    <description>Recent content on PaperMod</description>
    <image>
      <title>PaperMod</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.134.1</generator>
    <language>zh</language>
    <copyright>PaperMod Contributors</copyright>
    <lastBuildDate>Tue, 16 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/papermod/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install / Update PaperMod</title>
      <link>http://localhost:1313/posts/papermod/papermod-installation/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/papermod/papermod-installation/</guid>
      <description>Read aboout Install and Update instructions and sampled configuration templates</description>
    </item>
    <item>
      <title>Features / Mods</title>
      <link>http://localhost:1313/posts/papermod/papermod-features/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/papermod/papermod-features/</guid>
      <description>Learn About All Features in PaperMod</description>
    </item>
    <item>
      <title>面试官：为什么忘记密码要重置而不是告诉你原密码？</title>
      <link>http://localhost:1313/posts/papermod/%E9%9D%A2%E8%AF%95%E5%AE%98%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E8%A6%81%E9%87%8D%E7%BD%AE%E8%80%8C%E4%B8%8D%E6%98%AF%E5%91%8A%E8%AF%89%E4%BD%A0%E5%8E%9F%E5%AF%86%E7%A0%81/</link>
      <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/papermod/%E9%9D%A2%E8%AF%95%E5%AE%98%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E8%A6%81%E9%87%8D%E7%BD%AE%E8%80%8C%E4%B8%8D%E6%98%AF%E5%91%8A%E8%AF%89%E4%BD%A0%E5%8E%9F%E5%AF%86%E7%A0%81/</guid>
      <description>&lt;pre&gt;&lt;code&gt;这是一个挺有意思的面试题，挺简单的，不知道大家平时在重置密码的时候有没有想过这个问题。回答这个问题其实就一句话：因为服务端也不知道你的原密码是什么。如果知道的话，那就是严重的安全风险问题了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f57840a6196042a09dbbeacf2188eafc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=639&amp;amp;amp;h=398&amp;amp;amp;s=30310&amp;amp;amp;e=png&amp;amp;amp;b=fefefe&#34; alt=&#34;重置帐号密码&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我们这里来简单分析一下。&lt;/p&gt;
&lt;p&gt;做过开发的应该都知道，服务端在保存密码到数据库的时候，绝对不能直接明文存储。如果明文存储的话，风险太大，且不说数据库的数据有被盗的风险，如果被服务端的相关人员特别是有数据库权限的恶意利用，那将是不可预估的风险。&lt;/p&gt;
&lt;p&gt;一般情况下，我们都是通过哈希算法来加密密码并保存。&lt;/p&gt;
&lt;p&gt;哈希算法也叫散列函数或摘要算法，它的作用是对任意长度的数据生成一个固定长度的唯一标识，也叫哈希值、散列值或消息摘要（后文统称为哈希值）。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c44c2c2024d3412a969576535b102302~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=711&amp;amp;amp;h=321&amp;amp;amp;s=18502&amp;amp;amp;e=png&amp;amp;amp;b=f6fff8&#34; alt=&#34;哈希算法效果演示&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;哈希算法可以简单分为两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;加密哈希算法&lt;/strong&gt;：安全性较高的哈希算法，它可以提供一定的数据完整性保护和数据防篡改能力，能够抵御一定的攻击手段，安全性相对较高，但性能较差，适用于对安全性要求较高的场景。例如 SHA2、SHA3、SM3、RIPEMD-160、BLAKE2、SipHash 等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非加密哈希算法&lt;/strong&gt;：安全性相对较低的哈希算法，易受到暴力破解、冲突攻击等攻击手段的影响，但性能较高，适用于对安全性没有要求的业务场景。例如 CRC32、MurMurHash3、SipHash 等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了这两种之外，还有一些特殊的哈希算法，例如安全性更高的&lt;strong&gt;慢哈希算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;关于哈希算法的详细介绍，可以看我写的这篇文章：&lt;a href=&#34;https://link.juejin.cn?target=https%3A%2F%2Fjavaguide.cn%2Fsystem-design%2Fsecurity%2Fencryption-algorithms.html&#34;&gt;哈希算法和加密算法总结&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;目前，比较常用的是通过 &lt;strong&gt;MD5 + Salt&lt;/strong&gt; 的方式来加密密码。盐（Salt）在密码学中，是指通过在密码任意固定位置插入特定的字符串，让哈希后的结果和使用原始密码的哈希结果不相符，这种过程称之为“加盐”。&lt;/p&gt;
&lt;p&gt;不过，这种方式已经不被推荐，因为 MD5 算法的安全性较低，抗碰撞性差。详细介绍可以阅读我写的这篇文章：&lt;a href=&#34;https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FTcGnktKbZK9hrvNvvO7kgQ&#34;&gt;简历别再写 MD5 加密密码了！&lt;/a&gt; 。你可以使用&lt;strong&gt;安全性较高的加密哈希算法+ Salt（盐）&lt;/strong&gt;（例如 SHA2、SHA3、SM3，更高的安全性更强的抗碰撞性）或者直接使用&lt;strong&gt;慢哈希&lt;/strong&gt;（例如 Bcrypt，更推荐这种方式）。&lt;/p&gt;
&lt;p&gt;假如我们这里使用 &lt;strong&gt;SHA-256 + Salt&lt;/strong&gt; 这种方式。&lt;/p&gt;
&lt;p&gt;这里写了一个简单的示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String password = &amp;quot;123456&amp;quot;;
String salt = &amp;quot;1abd1c&amp;quot;;
// 创建SHA-256摘要对象
MessageDigest messageDigest = MessageDigest.getInstance(&amp;quot;SHA-256&amp;quot;);
messageDigest.update((password + salt).getBytes());
// 计算哈希值
byte[] result = messageDigest.digest();
// 将哈希值转换为十六进制字符串
String hexString = new HexBinaryAdapter().marshal(result);
System.out.println(&amp;quot;Original String: &amp;quot; + password);
System.out.println(&amp;quot;SHA-256 Hash: &amp;quot; + hexString.toLowerCase());
&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
