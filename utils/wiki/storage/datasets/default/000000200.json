{
	"title": "docker命令",
	"author": "王宇",
	"publishTime": "六月14,2024",
	"readTime": "12s",
	"tags": "[\"陆元伟\"]",
	"description": "陆元伟",
	"article": "  \n\n**进入docker容器**\n==============\n\nsudo docker exec -it 6b4204c03ffa bash\n\n这条命令的作用是进入标识为`6b4204c03ffa`的Docker容器内的bash shell，以便用户可以在容器内执行命令、查看容器内部情况等操作。\n\n  \n\n  \n\n**查看当前正在运行的Docker容器的状态**。  \nsudo docker ps\n==========================================\n\n  \n\n  \n\n**iotdege list查看镜像运行情况**\n========================\n\nNAME STATUS DESCRIPTION Config  \nAvatarModule running Up 2 seconds, 294 ms, 635 µs and 113 ns [acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8](http://acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8)  \nedgeAgent running Up 4 hours [mcr.microsoft.com/azureiotedge-agent:1.4](http://mcr.microsoft.com/azureiotedge-agent:1.4)  \nedgeHub running Up 4 hours [mcr.microsoft.com/azureiotedge-hub:1.4](http://mcr.microsoft.com/azureiotedge-hub:1.4)\n\n  \n\nNAME:模块运行名称，\n\nSTATUS:运行状态\n\nDESCRIPTION：运行时间\n\nConfig：运行镜像\n\n  \n\n**docker build 构建 Docker 镜像**\n=============================\n\n  \n\n### 基本语法\n\n  \n\nbash复制代码\n\n  \n\n  \n\ndocker build \\[OPTIONS\\] PATH | URL | -\n\n  \n\n*   `OPTIONS`：用于指定构建镜像时的各种选项。\n*   `PATH` | `URL` | `-`：指定构建上下文的路径、Git 仓库的 URL 或 `-` 表示从标准输入中读取 Dockerfile。\n\n  \n\n### 常用选项（OPTIONS）\n\n1.  **\\-t, --tag**：为构建的镜像指定名称和标签，格式为 `name:tag` 或 `name`。\n    \n    *   示例：`docker build -t myapp:v1.0 .`\n2.  **\\-f, --file**：指定 Dockerfile 的路径或名称。默认为 `PATH/Dockerfile`。\n    \n    *   示例：`docker build -f /path/to/my/Dockerfile .`\n3.  **\\--build-arg**：设置构建时的变量，这些变量可以在 Dockerfile 中使用。\n    \n    *   示例：`docker build --build-arg user=john --build-arg password=secret .`\n4.  **\\--no-cache**：构建时不使用缓存。默认情况下，Docker 会使用缓存来加速构建过程。\n    \n    *   示例：`docker build --no-cache .`\n5.  **\\--pull**：总是尝试从远程仓库拉取最新的基础镜像。\n    \n    *   示例：`docker build --pull .`\n6.  **\\--compress**：使用 gzip 压缩构建上下文。\n    \n    *   示例：`docker build --compress .`\n7.  **\\--label**：为生成的镜像设置元数据。\n    \n    *   示例：`docker build --label \"com.example.version=1.0\" .`\n8.  **\\--squash**：将 Dockerfile 中的所有操作压缩为一层。注意，这可能导致镜像在多个环境之间无法共享层。\n    \n    *   示例：`docker build --squash .`\n9.  **\\--memory** 或 **\\-m**：设置 Docker build 命令的内存限制。\n    \n    *   示例：`docker build --memory 2g .`\n10.  **\\--network**：设置 RUN 指令在构建期间的网络模式。\n    \n    *   示例：`docker build --network host .`\n11.  **\\--quiet, -q**：在构建成功后只输出镜像 ID，不输出其他日志。\n    \n    *   示例：`docker build -q .`\n12.  **\\--force-rm**：构建完成后总是删除中间容器。\n    \n    *   示例：`docker build --force-rm .`\n13.  **\\--rm**：默认设置。构建成功后删除中间容器\n    \n\n  \n\n实例：\n\ndocker build --rm -f \"/data/project/ftt-em-edge/modules/AvatarModule/Dockerfile.arm64v8\" -t [acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8](http://acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8) \"/data/project/ftt-em-edge/modules/AvatarModule\"\n\n  \n\n1.  **docker build**：这是 Docker 的一个基本命令，用于从 Dockerfile 构建 Docker 镜像。\n2.  **\\--rm**：这个选项告诉 Docker 在构建完成后删除中间容器。中间容器是 Docker 在构建过程中创建的，用于执行 Dockerfile 中的每一行指令。在构建完成后，这些容器通常不再需要，所以使用 `--rm` 选项可以节省磁盘空间。\n3.  **\\-f \"/data/project/ftt-em-edge/modules/AvatarModule/Dockerfile.arm64v8\"**：这个选项指定了 Dockerfile 的路径。默认情况下，Docker 会在当前目录或指定的构建上下文目录中查找名为 `Dockerfile` 的文件。但在这里，你指定了一个不同的文件名和路径，即 `/data/project/ftt-em-edge/modules/AvatarModule/Dockerfile.arm64v8`，这表示 Docker 会从这个路径中读取 Dockerfile 来构建镜像。\n4.  **\\-t [acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8](http://acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8)**：这个选项用于为构建的镜像指定一个名称和标签。在这个例子中，镜像的名称是 `[acrembeddedfttdeveastus2001.azurecr.io/avatarmodule](http://acrembeddedfttdeveastus2001.azurecr.io/avatarmodule)`，标签是 `0.0.47-arm64v8`。这个名称看起来像是 Azure Container Registry (ACR) 的一个镜像仓库路径，意味着这个镜像最终会被推送到 Azure Container Registry 的 `acrembeddedfttdeveastus2001` 仓库中，并且命名为 `avatarmodule`。\n5.  **\"/data/project/ftt-em-edge/modules/AvatarModule\"**：这是构建上下文的路径。构建上下文是 Docker 在构建过程中可以访问的一组文件和目录。在这个例子中，Docker 会将 `/data/project/ftt-em-edge/modules/AvatarModule` 目录（以及其中的所有文件和子目录）发送到 Docker 守护进程，然后 Docker 会根据 Dockerfile 中的指令来构建镜像。\n\n综上所述，这条命令的意思是：从 `/data/project/ftt-em-edge/modules/AvatarModule/Dockerfile.arm64v8` 文件中读取指令，使用 `/data/project/ftt-em-edge/modules/AvatarModule` 目录作为构建上下文，构建一个 Docker 镜像，并将这个镜像命名为 `[acrembeddedfttdeveastus2001.azurecr.io/avatarmodule](http://acrembeddedfttdeveastus2001.azurecr.io/avatarmodule)`，标签为 `0.0.47-arm64v8`。在构建完成后，删除中间容器以节省磁盘空间。\n\n**docker push 推送**\n==================\n\n`docker push` 命令是用于将本地 Docker 镜像推送到远程 Docker 镜像仓库的主要命令之一\n\ndocker push \\[OPTIONS\\] NAME\\[:TAG\\]\n\n*   `OPTIONS`：可选参数，用于指定推送镜像时的各种选项。\n*   `NAME`：要推送的镜像的名称。\n*   `TAG`：镜像的标签，用于标识镜像的版本或标识符，是可选的。\n\n### 常用选项（OPTIONS）\n\n1.  **\\-a, --all-tags**：推送镜像的所有标签。如果不指定此选项，则只推送具有指定标签的镜像。\n\n  \n\n示例\n\ndocker push [acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8](http://acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.47-arm64v8)\n\n  \n\n### 使用步骤\n\n1.  **登录到远程仓库**：  \n    在推送镜像之前，您需要先使用 `docker login` 命令登录到目标远程仓库。这通常是 Docker Hub 或其他自托管的 Docker 镜像仓库。\n    \n      \n    \n    bash复制代码\n    \n      \n    \n      \n    \n    docker login -u 用户名 -p 密码 仓库地址\n    \n      \n    \n    例如，登录到 Docker Hub：\n    \n      \n    \n    bash复制代码\n    \n      \n    \n      \n    \n    docker login -u your\\_username -p your\\_password\n    \n      \n    \n\n  \n\n        **2. 推送镜像**：  \n一旦登录成功，您就可以使用 `docker push` 命令将本地镜像推送到远程仓库。\n\n  \n\nbash复制代码\n\n  \n\n  \n\ndocker push NAME\\[:TAG\\]\n\n  \n\n例如，推送一个名为 `myimage` 的镜像到 Docker Hub（如果不指定标签，则默认为 `latest`）：\n\n  \n\n获取docker中的文件\n============\n\ndocker cp [container\\_id\\_or\\_name:/app/AIUI/msc/aiui.log](http://container_id_or_name/app/AIUI/msc/aiui.log) /local/path/aiui.log\n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}