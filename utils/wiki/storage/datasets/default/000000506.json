{
	"title": "虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析",
	"author": "王宇",
	"publishTime": "十月13,2023",
	"readTime": "12s",
	"tags": "[\"十七、前端管理\"]",
	"description": "十七、前端管理",
	"article": "*   1[1\\.    概述](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-概述)\n*   2[2\\. 整体分析项目](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-整体分析项目)\n    *   2.1[2.1. 从构建出发](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-从构建出发)\n    *   2.2[2.2. 从入口文件出发](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-从入口文件出发)\n        *   2.2.1[2.2.1. 分析Activity](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-分析Activity)\n        *   2.2.2[2.2.2. 程序入口点与程序入口点活动](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-程序入口点与程序入口点活动)\n    *   2.3[2.3. 设计稿适配页面](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-设计稿适配页面)\n    *   2.4[2.4. 实现视图绑定](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-实现视图绑定)\n        *   2.4.1[2.4.1. viewBinding](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-viewBinding)\n        *   2.4.2[2.4.2. Butter Knife](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-ButterKnife)\n    *   2.5[2.5. 实现数据绑定](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-实现数据绑定)\n    *   2.6[2.6. 实现路由跳转](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-实现路由跳转)\n    *   2.7[2.7. 实现数据请求](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-实现数据请求)\n    *   2.8[2.8. Fragment生命周期](#id-虚拟人SDK接入到万得触2.0屏端APP架构与代码细节分析-Fragment生命周期)\n\n1\\.    概述\n=========\n\n        最近几天在查看git项目：[http://gitlab.yingzi.com/yingzi/yxhealth-team/yingzi-android-wonder-kitchen-app.git](http://gitlab.yingzi.com/yingzi/yxhealth-team/yingzi-android-wonder-kitchen-app.git) 上分支：release-avatar上的代码，分析其中的总体架构、技术结构、代码细节等等，目前是从技术的角度看重新掌握一门技术达到用于简单实战程度到底有哪些工作是要做的。之前积累的技术架构思维，怎么应用到不同的技术体系、不同的编程语言上。同时也需要锻炼一种思维：以快速学习掌握一门新知识为目标，怎么锻炼好结构化思维。从一个技术项目落地的基本思路出发，将整个过程分解为几个步骤。\n\n2\\. 整体分析项目\n==========\n\n**工作指导思路参考：**\n\n*   Android项目符合前端项目的一般性结构\n*   JAVA语言与其他语言具有一般性共同点\n*   编程思维具有一般性（模块化、低耦合等等）\n\n2.1. 从构建出发\n----------\n\n将项目代码切换到Andorid项目视图（默认是project视图），从Gradle Scripts开始查看，Android Studio使用Gradle来自动执行和管理构建流程，其配置文件分为几类：\n\nsetting.gradle\n\ngradle全局设置文件，位于根目录，项目级仓库设置，以及告知Gradle在构建时将哪些模块包含在内。\n\n该文件分析：\n\n*   定义根项目名称为：“microwave”\n*   定义在进行Gradle构建时候，包含如下20+模块\n\n**setting.gradle**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n`rootProject.name =` `\"microwave\"`\n\n`if` `(``1` `== yz_run_module.toInteger()) {`\n\n    `//研发版，大众版`\n\n    `include` `':app'`\n\n    `include` `':consumedev'`\n\n`}`\n\n`if` `(``2` `== yz_run_module.toInteger()) {`\n\n    `//消费版`\n\n    `include` `':consume'`\n\n`}`\n\n`include` `':libwdcservice'`\n\n`include` `':libbase'`\n\n`include` `':libhardwaresdk'`\n\n`// core:`\n\n`include` `':libpython'`\n\n`include` `':libastroboy'`\n\n`include` `':libmamay'`\n\n`include` `':libhardwaresdk'`\n\n`include` `':libicaserviceclient'`\n\n`// common:`\n\n`include` `':libwdcservice'`\n\n`include` `':libbase'`\n\n`include` `':libbehavior'`\n\n`include` `':libwui'`\n\n`include` `':libarchitecture'`\n\n`include` `':libutils'`\n\n`include` `':libthird'`\n\n`include` `':libconfig'`\n\n`include` `':libnet'`\n\n`include` `':libanalyze'`\n\n`include` `':libdata'`\n\n`// dev app`\n\n`include` `':dev:astroboydebug'`\n\n`include` `':dev:mamaydebug'`\n\n`include` `':dev:hardwaresdkdebug'`\n\n`include` `':dev:wdcservicedebug'`\n\n`include` `':libnetbusiness'`\n\n`include` `':avatar'`\n\n`include` `':yzhci'`\n\n顶层build.gradle\n\n位于根目录，定义所有模块都适用的模块依赖项目、仓库地址等，还包括会定义构建脚本需要的仓库地址（在构建过程中才会生效）\n\n该文件分析：\n\n*   定义构建脚本自身需要的依赖项与路径，见buildscript部分。\n*   定义所有模块的共享配置，见allprojects部分\n*   定义各种任务task（允许自定义构建逻辑，并根据需要执行各种操作）\n\n**build.gradle--global project**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n`// Top-level build file where you can add configuration options common to all sub-projects/modules.`\n\n`buildscript {`\n\n    `repositories {`\n\n        `// bonree`\n\n        `maven { url uri(``'./repo'``) }`\n\n        `maven { url` `'[https://gitlab.bonree.com/BonreeSDK_TAPM/Android/raw/master'](https://gitlab.bonree.com/BonreeSDK_TAPM/Android/raw/master')` `}`\n\n        `//版阿里云仓库`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/jcenter'](https://maven.aliyun.com/repository/jcenter')` `}`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/google'](https://maven.aliyun.com/repository/google')` `}`\n\n        `maven { url` `\"[https://jitpack.io](https://jitpack.io)\"` `}`\n\n        `maven { url` `\"[https://chaquo.com/maven](https://chaquo.com/maven)\"` `}`\n\n        `maven { url` `\"[https://s01.oss.sonatype.org/content/groups/public](https://s01.oss.sonatype.org/content/groups/public)\"` `}`\n\n        `google()`\n\n        `mavenCentral()`\n\n        `jcenter()`\n\n    `}`\n\n    `dependencies {`\n\n        `classpath` `'com.google.dagger:hilt-android-gradle-plugin:2.28-alpha'`\n\n        `classpath` `'com.android.tools.build:gradle:3.6.4'`\n\n        `classpath` `\"com.chaquo.python:gradle:10.0.1\"`\n\n        `classpath` `\"com.bonree.agent.android:bonree:$brsdk_version\"`\n\n        `// 添加神策分析 android-gradle-plugin2 依赖`\n\n        `classpath` `'com.sensorsdata.analytics.android:android-gradle-plugin2:3.5.3'`\n\n    `}`\n\n`}`\n\n`allprojects {`\n\n    `repositories {`\n\n        `maven { url uri(``'./repo'``) }`\n\n        `maven { url` `'[https://gitlab.bonree.com/BonreeSDK_TAPM/Android/raw/master'](https://gitlab.bonree.com/BonreeSDK_TAPM/Android/raw/master')` `}`\n\n        `//新阿里云仓库`\n\n        `maven { url` `'[https://maven.aliyun.com/nexus/content/groups/public'](https://maven.aliyun.com/nexus/content/groups/public')` `}`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/jcenter'](https://maven.aliyun.com/repository/jcenter')` `}`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/public'](https://maven.aliyun.com/repository/public')` `}`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/google'](https://maven.aliyun.com/repository/google')` `}`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/gradle-plugin'](https://maven.aliyun.com/repository/gradle-plugin')` `}`\n\n        `maven { url` `'[https://maven.aliyun.com/repository/google'](https://maven.aliyun.com/repository/google')` `}`\n\n        `maven {`\n\n            `allowInsecureProtocol = true`\n\n            `url` `\"[http://maven.yingzi.com:9091/nexus/repository/snapshots/](http://maven.yingzi.com:9091/nexus/repository/snapshots/)\"`\n\n        `}`\n\n        `maven {`\n\n            `allowInsecureProtocol = true`\n\n            `url` `\"[http://maven.yingzi.com:9091/nexus/content/groups/public/](http://maven.yingzi.com:9091/nexus/content/groups/public/)\"`\n\n        `}`\n\n        `maven {`\n\n            `allowInsecureProtocol = true`\n\n            `url` `\"[http://maven.yingzi.com:9091/nexus/repository/thirdparty/](http://maven.yingzi.com:9091/nexus/repository/thirdparty/)\"`\n\n        `}`\n\n        `mavenLocal()`\n\n        `maven {`\n\n            `allowInsecureProtocol = true`\n\n            `url` `'[http://maven.aliyun.com/nexus/content/groups/public/'](http://maven.aliyun.com/nexus/content/groups/public/')`\n\n        `}`\n\n        `maven {`\n\n            `allowInsecureProtocol = true`\n\n            `url` `\"[http://maven.aliyun.com/nexus/content/repositories/releases](http://maven.aliyun.com/nexus/content/repositories/releases)\"`\n\n        `}`\n\n        `gradlePluginPortal()`\n\n        `maven { url` `'[https://jitpack.io](https://jitpack.io)'` `}`\n\n        `google()`\n\n        `mavenCentral()`\n\n        `jcenter()`\n\n    `}`\n\n`}`\n\n`task clean(type: Delete) {`\n\n    `delete rootProject.buildDir`\n\n`}`\n\n`tasks.withType(JavaCompile) {`\n\n    `options.encoding =` `\"UTF-8\"`\n\n`}`\n\n`//注意：用下面两个task,需要自己创建软链接。`\n\n`//操作实例：sudo ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_331.jdk/Contents/Home/bin/java /Library/Java/JavaVirtualMachines/java_1.8`\n\n`task _wdcInstallApp {`\n\n    `doFirst {`\n\n        `String cmdDirPath = rootProject.projectDir.getAbsolutePath() +` `'/yingzi'`\n\n        `println``(``'开始编译'``)`\n\n        `CommandExcutor buildExecutor =` `new` `CommandExcutor(rootProject.projectDir.getAbsolutePath(),` `\"sh gradlew assembleDebug\"``)`\n\n        `buildExecutor.exec()`\n\n        `println``(``'删除apk'``)`\n\n        `CommandExcutor rmExecutor =` `new` `CommandExcutor(cmdDirPath,` `\"rm oven_release.apk\"``)`\n\n        `rmExecutor.exec()`\n\n        `println``(``'开始签名'``)`\n\n        `CommandExcutor signExecutor =` `new` `CommandExcutor(cmdDirPath,` `\"/Library/Java/JavaVirtualMachines/java_1.8 -jar signapk.jar platform.x509.pem platform.pk8 app_nosign.apk oven_release.apk\"``)`\n\n        `signExecutor.exec()`\n\n        `println``(``'开始安装'``)`\n\n        `CommandExcutor installExe =` `new` `CommandExcutor(cmdDirPath,` `\"adb install oven_release.apk\"``)`\n\n        `installExe.exec()`\n\n    `}`\n\n`}`\n\n`//直接安装apk文件，无需再编译签名`\n\n`task _wdcInstallAppDirect {`\n\n    `doFirst {`\n\n        `String cmdDirPath = rootProject.projectDir.getAbsolutePath() +` `'/yingzi'`\n\n        `CommandExcutor installExe =` `new` `CommandExcutor(cmdDirPath,` `\"adb install -r -d oven_release.apk\"``)`\n\n        `installExe.exec()`\n\n    `}`\n\n`}`\n\n`task _wdcBuildApp {`\n\n    `doFirst {`\n\n        `String cmdDirPath = rootProject.projectDir.getAbsolutePath() +` `'/yingzi'`\n\n        `println``(``'开始签名'``)`\n\n        `CommandExcutor signExecutor =` `new` `CommandExcutor(cmdDirPath,` `\"/Library/Java/JavaVirtualMachines/java_1.8 -jar signapk.jar platform.x509.pem platform.pk8 app_nosign.apk oven_release.apk\"``)`\n\n        `signExecutor.exec()`\n\n        `println``(``'开始签名'``)`\n\n    `}`\n\n`}`\n\n`task _wdcWindowsBuildApp {`\n\n    `doFirst {`\n\n        `String cmdDirPath = rootProject.projectDir.getAbsolutePath() +` `'/yingzi'`\n\n        `println``(``'开始签名'``)`\n\n        `CommandExcutor signExecutor =` `new` `CommandExcutor(cmdDirPath,` `\"D:/Program Files/AdoptOpenJDK/jdk-8.0.282.8-openj9/bin/java.exe -jar signapk.jar platform.x509.pem platform.pk8 app_nosign.apk oven_release.apk\"``)`\n\n        `signExecutor.exec()`\n\n        `println``(``'开始签名'``)`\n\n    `}`\n\n`}`\n\n`task _wdcWindowsInstallApp {`\n\n    `doFirst {`\n\n        `String cmdDirPath = rootProject.projectDir.getAbsolutePath() +` `'/yingzi'`\n\n        `println``(``'开始签名'``)`\n\n        `CommandExcutor signExecutor =` `new` `CommandExcutor(cmdDirPath,` `\"D:/Program Files/AdoptOpenJDK/jdk-8.0.282.8-openj9/bin/java.exe -jar signapk.jar platform.x509.pem platform.pk8 app_nosign.apk oven_release.apk\"``)`\n\n        `signExecutor.exec()`\n\n        `println``(``'开始安装'``)`\n\n        `CommandExcutor installExe =` `new` `CommandExcutor(cmdDirPath,` `\"adb install oven_release.apk\"``)`\n\n        `installExe.exec()`\n\n    `}`\n\n`}`\n\n`task _wdcWinBuildApp {`\n\n    `doFirst {`\n\n        `String cmdDirPath = rootProject.projectDir.getAbsolutePath() +` `'/yingzi'`\n\n        `println``(``'开始签名'``)`\n\n        `CommandExcutor signExecutor =` `new` `CommandExcutor(cmdDirPath,` `\"C:/Program Files/Java/jdk1.8.0_144/bin/java.exe -jar signapk.jar platform.x509.pem platform.pk8 app_nosign.apk oven_release.apk\"``)`\n\n        `signExecutor.exec()`\n\n        `println``(``'结束安装'``)`\n\n    `}`\n\n`}`\n\n`class` `CommandExcutor {`\n\n    `String command`\n\n    `String cmdDir`\n\n    `CommandExcutor(String cmdDirPath, String commandLine) {`\n\n        `cmdDir = cmdDirPath;`\n\n        `command = commandLine;`\n\n    `}`\n\n    `def` `exec() {`\n\n        `Process process = Runtime.getRuntime().exec(command,` `null``,` `new` `File(cmdDir))`\n\n        `InputStream is = process.getInputStream()`\n\n        `InputStreamReader isReader =` `new` `InputStreamReader(is,` `\"utf-8\"``)`\n\n        `BufferedReader bufferedReader =` `new` `BufferedReader(isReader)`\n\n        `String line =` `null`\n\n        `while` `((line = bufferedReader.``readLine``()) !=` `null``) {`\n\n            `println``(line)`\n\n        `}`\n\n        `InputStream errorStream = process.getErrorStream()`\n\n        `String result =` `null`\n\n        `ByteArrayOutputStream baos =` `new` `ByteArrayOutputStream()`\n\n        `int` `ch = -``1``;`\n\n        `byte``[] buffer =` `new` `byte``[``1024` `*` `4``]`\n\n        `try` `{`\n\n            `ch = errorStream.read(buffer)`\n\n            `while` `(ch != -``1``) {`\n\n                `baos.``write``(buffer,` `0``, ch)`\n\n                `ch = errorStream.read(buffer)`\n\n            `}`\n\n            `baos.flush()`\n\n            `result = baos.toString(``\"utf-8\"``)`\n\n        `}` `catch` `(UnsupportedEncodingException e) {`\n\n            `e.printStackTrace();`\n\n        `}` `catch` `(IOException e) {`\n\n            `throw` `e`\n\n        `}` `finally` `{`\n\n            `baos.close()`\n\n        `}`\n\n        `isReader.close()`\n\n        `is.close()`\n\n        `bufferedReader.close()`\n\n        `int` `state = process.waitFor()`\n\n        `if` `(state ==` `0``) {`\n\n            `println``(``\"${command} exec sucess\"``)`\n\n        `}` `else` `{`\n\n            `println``(``\"${command} exec failed\"``)`\n\n        `}`\n\n        `if` `(result !=` `null` `&& !``\"\"``.equalsIgnoreCase(result)) {`\n\n            `println``(``'Error Content: '` `+ result)`\n\n        `}`\n\n    `}`\n\n`}`\n\n模块build.gradle\n\n位于目录project/module目录下，定义每个模块的Gradle设置。定义插件plugins、依赖项等等\n\n该文件分析：\n\n*   应用插件plugin，见apply plugin语法，或者直接用plugins 字段\n*   定义和android相关，见android字段\n*   定义依赖的库、包，见dependencies字段\n\n**build.gradle--module**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n`apply plugin:` `'com.sensorsdata.analytics.android'`\n\n`if` `(``2` `== yz_run_module.toInteger()) {`\n\n    `apply plugin:` `'com.android.application'`\n\n    `apply plugin:` `'dagger.hilt.android.plugin'`\n\n    `apply plugin:` `'bonree'`\n\n    `apply plugin:` `'com.sensorsdata.analytics.android'`\n\n`}` `else` `{`\n\n    `apply plugin:` `'com.android.library'`\n\n    `apply plugin:` `'dagger.hilt.android.plugin'`\n\n    `apply plugin:` `'bonree'`\n\n    `apply plugin:` `'com.sensorsdata.analytics.android'`\n\n`}`\n\n`android {`\n\n    `compileSdkVersion compile_sdk_version.toInteger()`\n\n    `defaultConfig {`\n\n        `if` `(``2` `== yz_run_module.toInteger()) {`\n\n            `applicationId` `\"com.yingzi.microwoven\"`\n\n        `}`\n\n        `minSdkVersion min_sdk_version.toInteger()`\n\n        `targetSdkVersion target_sdt_version.toInteger()`\n\n        `versionCode` `53`\n\n        `versionName` `\"2.2.6\"`\n\n        `testInstrumentationRunner` `\"androidx.test.runner.AndroidJUnitRunner\"`\n\n        `consumerProguardFiles` `\"consumer-rules.pro\"`\n\n        `javaCompileOptions {`\n\n            `annotationProcessorOptions {`\n\n                `arguments += [moduleName: project.getName()]`\n\n            `}`\n\n        `}`\n\n        `ndk {`\n\n            `abiFilters` `\"arm64-v8a\"` `//, \"arm64-v8a\",\"x86\"`\n\n        `}`\n\n    `}`\n\n    `sourceSets {`\n\n        `main {`\n\n            `if` `(``2` `== yz_run_module.toInteger()) {`\n\n                `manifest.srcFile` `'src/main/AndroidManifest.xml'`\n\n            `}` `else` `{`\n\n                `manifest.srcFile` `'src/main/manifestlib/AndroidManifest.xml'`\n\n            `}`\n\n        `}`\n\n    `}`\n\n    `buildTypes {`\n\n        `/*debug {`\n\n            `minifyEnabled false`\n\n            `proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'`\n\n        `}*/`\n\n        `release {`\n\n            `minifyEnabled false`\n\n            `proguardFiles getDefaultProguardFile(``'proguard-android-optimize.txt'``),` `'proguard-rules.pro'`\n\n        `}`\n\n    `}`\n\n    `compileOptions {`\n\n        `sourceCompatibility JavaVersion.VERSION_1_8`\n\n        `targetCompatibility JavaVersion.VERSION_1_8`\n\n    `}`\n\n    `viewBinding {`\n\n        `enabled = true`\n\n    `}`\n\n    `tasks.whenTaskAdded { task ->`\n\n        `if` `(task.name.startsWith(``\"assemble\"``)) {`\n\n            `task.doLast {`\n\n`//                android.applicationVariants.all { variant ->`\n\n                `copy() {`\n\n                    `CopySpec copySpec ->`\n\n                        `println``(``\">>>>>>>>>> 开始拷贝apk >>>>>>>>>>\"``)`\n\n                        `println``(task.name)`\n\n                        `if` `(isReleaseBuildType()) {`\n\n                            `println``(``\">>>>>>>>>> from release >>>>>>>>>>\"``)`\n\n                            `from file(``\"build/outputs/apk/release/consume-release-unsigned.apk\"``)`\n\n                        `}` `else` `{`\n\n                            `println``(``\">>>>>>>>>> from debug >>>>>>>>>>\"``)`\n\n                            `from file(``\"build/outputs/apk/debug/consume-debug.apk\"``)`\n\n                        `}`\n\n                        `into` `\"${rootDir}/yingzi\"`\n\n                        `rename {`\n\n                            `String srcFileName ->` `\"app_nosign.apk\"`\n\n                        `}`\n\n                        `println``(``\">>>>>>>>>> app_nosign.apk已经放到yingzi下 >>>>>>>>>>\"``)`\n\n`//                    }`\n\n                `}`\n\n            `}`\n\n        `}`\n\n    `}`\n\n`}`\n\n`boolean` `isReleaseBuildType() {`\n\n    `for (String s : gradle.startParameter.taskNames) {`\n\n        `if` `(s.``contains``(``\"Release\"``) | s.``contains``(``\"release\"``)) {`\n\n            `return` `true`\n\n        `}`\n\n    `}`\n\n    `return` `false`\n\n`}`\n\n`dependencies {`\n\n    `api fileTree(dir:` `'libs'``, include: [``'*.jar'``])`\n\n    `implementation project(``':libwdcservice'``)`\n\n    `implementation project(``':libbase'``)`\n\n    `implementation project(``':libnet'``)`\n\n`//    implementation project(':bizhci')`\n\n    `implementation project(``':libwui'``)`\n\n    `implementation project(``':libanalyze'``)`\n\n    `implementation project(``':libbehavior'``)`\n\n`//    implementation project(':libhardwarediy')`\n\n    `api` `'com.google.code.gson:gson:2.9.0'`\n\n    `implementation` `'androidx.appcompat:appcompat:1.6.1'`\n\n    `implementation` `'com.google.android.material:material:1.4.0'`\n\n    `implementation` `'androidx.constraintlayout:constraintlayout:2.1.4'`\n\n    `configurations {`\n\n        `all*.exclude group:` `'com.google.code.gson'`\n\n    `}`\n\n    `implementation project(``':avatar'``)`\n\n    `implementation project(``':yzhci'``)`\n\n    `def` `camerax_version =` `\"1.1.0-beta02\"`\n\n    `implementation` `\"androidx.camera:camera-core:${camerax_version}\"`\n\n    `implementation` `\"androidx.camera:camera-camera2:${camerax_version}\"`\n\n    `implementation` `\"androidx.camera:camera-lifecycle:${camerax_version}\"`\n\n    `implementation` `\"androidx.camera:camera-view:${camerax_version}\"`\n\n    `//dagger 开始`\n\n    `implementation` `\"com.google.dagger:hilt-android:2.28-alpha\"`\n\n    `annotationProcessor` `\"com.google.dagger:hilt-android-compiler:2.28-alpha\"`\n\n    `implementation` `'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'`\n\n    `annotationProcessor` `'androidx.hilt:hilt-compiler:1.0.0-alpha02'`\n\n    `// 用于 instrumentation 测试`\n\n    `androidTestImplementation` `'com.google.dagger:hilt-android-testing:2.28-alpha'`\n\n    `androidTestAnnotationProcessor` `'com.google.dagger:hilt-android-compiler:2.28-alpha'`\n\n    `// 用于本地的单元测试`\n\n    `testImplementation` `'com.google.dagger:hilt-android-testing:2.28-alpha'`\n\n    `testAnnotationProcessor` `'com.google.dagger:hilt-android-compiler:2.28-alpha'`\n\n    `//dagger 结束`\n\n    `implementation` `'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.7'`\n\n    `annotationProcessor` `\"com.alibaba:arouter-compiler:${arouter_compiler_version}\"`\n\n    `implementation(``\"io.github.thanosfisherman.wifiutils:wifiutils:1.6.6\"``)`\n\n    `// bonree`\n\n    `implementation files(``'libs/com.bonree.sdk.jar'``)`\n\n    `implementation` `'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-java:v8.3.4-release-jitpack'`\n\n    `//是否需要ExoPlayer模式`\n\n    `implementation` `'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-exo2:v8.3.4-release-jitpack'`\n\n    `//是否需要AliPlayer模式`\n\n    `implementation` `'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-aliplay:8.3.4-release-jitpack'`\n\n    `//更多ijk的编码支持`\n\n    `implementation` `'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-ex_so:v8.3.4-release-jitpack'`\n\n    `implementation` `'me.gujun.android.taggroup:library:1.4@aar'`\n\n    `implementation` `'com.github.KuangGang:RoundCorners:2.0.0'`\n\n    `implementation` `'com.lzy.net:okgo:3.0.4'`\n\n    `implementation` `'me.relex:circleindicator:2.1.6'`\n\n    `implementation` `'com.kyleduo.switchbutton:library:2.1.0'`\n\n    `// 添加 Sensors Analytics SDK 依赖`\n\n    `implementation` `'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:6.6.7'`\n\n`}`\n\n`gradle.properties`\n\ngradle全局属性文件，位于根目录，定义一些全局变量、全局属性，打包的时候使用。类似于Web前端项目中使用的cross-env【一款Node.js的跨平台环境变量配置工具】\n\n2.2. 从入口文件出发\n------------\n\n        在Android Studio控制面板上，配置“Edit Configuration”，来创建和管理多个配置，以满足不同的运行和调试需求，打包一个生产的APK包目前配置的是“microwave.consume.main”，顺着这个配置往下走，模块根目录下有一个文件“AndroidManifest.xml”【约定俗称，该清单文件会向 Android 构建工具、Android 操作系统和 Google Play 描述应用的基本信息】，其声明了所有组件、用户所需权限、软硬件功能等。具体分析如下：\n\n**AndroidManifest.xml**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n`<?``xml` `version``=``\"1.0\"` `encoding``=``\"utf-8\"``?>`\n\n`<``manifest` `xmlns:android``=``\"[http://schemas.android.com/apk/res/android](http://schemas.android.com/apk/res/android)\"`\n\n    `xmlns:tools``=``\"[http://schemas.android.com/tools](http://schemas.android.com/tools)\"`\n\n    `package``=``\"com.yingzi.consume\"`\n\n    `android:sharedUserId``=``\"android.uid.system\"`\n\n    `tools:ignore``=``\"ProtectedPermissions\"``>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.DEVICE_POWER\"``/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.SET_TIME\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.SET_TIME_ZONE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.WRITE_EXTERNAL_STORAGE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.READ_EXTERNAL_STORAGE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.INJECT_EVENTS\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.KILL_BACKGROUND_PROCESSES\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.CHANGE_NETWORK_STATE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.WRITE_SETTINGS\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.CHANGE_CONFIGURATION\"` `/>`\n\n    `<``uses-feature` `android:name``=``\"android.hardware.camera.any\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.ACCESS_COARSE_LOCATION\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.ACCESS_FINE_LOCATION\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.ACCESS_BACKGROUND_LOCATION\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.BLUETOOTH_CONNECT\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.INTERNET\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.ACCESS_WIFI_STATE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.READ_PHONE_STATE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.ACCESS_NETWORK_STATE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.REBOOT\"` `/>`\n\n    `<``uses-permission`\n\n        `android:name``=``\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"`\n\n        `tools:ignore``=``\"ProtectedPermissions\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.CAMERA\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.BLUETOOTH\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.BLUETOOTH_ADMIN\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.CHANGE_WIFI_STATE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.SYSTEM_ALERT_WINDOW\"` `/>` `<!-- 无障碍服务相关 -->`\n\n    `<``uses-permission` `android:name``=``\"android.permission.SYSTEM_OVERLAY_WINDOW\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.BIND_ACCESSIBILITY_SERVICE\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.WRITE_SETTINGS\"` `/>`\n\n    `<``uses-permission` `android:name``=``\"android.permission.WRITE_SECURE_SETTINGS\"` `/>`\n\n    `<``application`\n\n        `android:name``=``\".ConsumeAppStart\"`\n\n        `android:allowBackup``=``\"true\"`\n\n        `android:extractNativeLibs``=``\"true\"`\n\n        `android:hardwareAccelerated``=``\"true\"`\n\n        `android:icon``=``\"@mipmap/ic_launcher\"`\n\n        `android:label``=``\"@string/app_name\"`\n\n        `android:largeHeap``=``\"true\"`\n\n        `android:networkSecurityConfig``=``\"@xml/network_security_config\"`\n\n        `android:requestLegacyExternalStorage``=``\"true\"`\n\n        `android:roundIcon``=``\"@mipmap/ic_launcher_round\"`\n\n        `android:supportsRtl``=``\"true\"`\n\n        `android:theme``=``\"@style/Theme.MicroOven\"``>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.ConsumeMainActivity\"`\n\n            `android:configChanges``=``\"keyboard|keyboardHidden|orientation|screenSize\"`\n\n            `android:exported``=``\"true\"`\n\n            `android:screenOrientation``=``\"portrait\"`\n\n            `android:theme``=``\"@style/LaunchTheme\"`\n\n            `tools:ignore``=``\"LockedOrientationActivity\"``>`\n\n            `<``intent-filter``>`\n\n                `<``action` `android:name``=``\"android.intent.action.MAIN\"` `/>`\n\n                `<``category` `android:name``=``\"android.intent.category.LAUNCHER\"` `/>`\n\n                `<``category` `android:name``=``\"android.intent.category.HOME\"` `/>`\n\n                `<``category` `android:name``=``\"android.intent.category.DEFAULT\"` `/>`\n\n            `</``intent-filter``>`\n\n        `</``activity``>`\n\n        `<``activity` `android:name``=``\".ui.activity.nfc.ConsumeNFCKnowActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.books.BookSearchActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.diy.ConsumeAddDiyActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.setttings.ConsumeVoiceActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.setttings.ConsumeBrightnessActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.setttings.WifiInformationActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.nfc.ConsumeNFCInfoActivity\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.ConsumeCookInfoActivity\"`\n\n            `android:theme``=``\"@style/ConsumeAppTheme\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.setttings.TimeZoneActivity\"`\n\n            `android:theme``=``\"@style/ConsumeAppTheme\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.GuideActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.collect.ConsumeCollectActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.help.HelpActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.help.LinkHelpActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.setttings.LanguageActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.scan.ConsumeReceiveMoneyQrcodeActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.help.BindHelpActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.setttings.ConsumeSettingsActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.setttings.ConsumeWifiActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.setttings.ConsumeReportActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.test.ConsumeTestingActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.setttings.ConsumeUsageActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.books.CookBookActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.books.ConsumeCookBookCategoryActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.setttings.ConsumeDeviceInfoActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.onekeycook.CookWayActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.onekeycook.IntelligentCookingActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.books.CollectCookBookActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.books.CookRecordListActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.books.CareCookBookListActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.scan.ConsumeScaninfoActivity\"`\n\n            `android:launchMode``=``\"singleTask\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.setttings.update.ConsumeCheckUpdateActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.setttings.update.ConsumeUpdateActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.setttings.update.ConsumeVersionUpdateInfoActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.skills.SkillsActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.skills.SkillDetailActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.ConsumeCookingV2Activity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.ConsumeCookingV3Activity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.ConsumeCookingV4Activity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.mine.ConsumeMineActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\"com.yingzi.consume.ui.activity.mine.ConsumeMyCookSchemeActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.selfmodel.ConsumeSelfDefineModelActivity\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.setttings.WifiSettingActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.care.CareCookingActivity\"` `/>`\n\n        `<``activity` `android:name``=``\".ui.activity.care.CareScanInfoActivity\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.cookmenu.CookMenuDetailActivity\"`\n\n            `android:windowSoftInputMode``=``\"stateHidden|stateUnchanged\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.books.cookingrecord.CookRecordV2Activity\"`\n\n            `android:windowSoftInputMode``=``\"stateHidden|stateUnchanged\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.mine.MyCookScheme2Activity\"`\n\n            `android:windowSoftInputMode``=``\"stateHidden|stateUnchanged\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.avatar.search.shop.SearchActivity\"`\n\n            `android:windowSoftInputMode``=``\"stateHidden|stateUnchanged\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.avatar.search.recipe.SearchRecipeActivity\"`\n\n            `android:windowSoftInputMode``=``\"stateHidden|stateUnchanged\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``activity`\n\n            `android:name``=``\".ui.activity.avatar.search.recomment.SearchRecommentActivity\"`\n\n            `android:windowSoftInputMode``=``\"stateHidden|stateUnchanged\"`\n\n            `android:screenOrientation``=``\"portrait\"` `/>`\n\n        `<``service` `android:name``=``\"com.yingzi.wdcservice.timer.SyncDataTimer\"` `/>`\n\n        `<``service` `android:name``=``\"com.yingzi.wdcservice.timer.CookingRecordCheckTimer\"` `/>`\n\n        `<``service` `android:name``=``\"com.yingzi.wdcservice.timer.CookingInfoCleanTimer\"` `/>`\n\n        `<``service` `android:name``=``\"com.yingzi.wdcservice.timer.SyncDataCleanTimer\"` `/>`\n\n        `<``service` `android:name``=``\"com.yingzi.wdcservice.timer.CookingRecordTimeOutCheckTimer\"` `/>`\n\n        `<``meta-data`\n\n            `android:name``=``\"design_width_in_dp\"`\n\n            `android:value``=``\"600\"` `/>`\n\n        `<``meta-data`\n\n            `android:name``=``\"design_height_in_dp\"`\n\n            `android:value``=``\"1024\"` `/>` `<!-- 定位需要的服务 适配Android Q需要加上android:foregroundServiceType=\"location\" -->`\n\n        `<``service`\n\n            `android:name``=``\"com.amap.api.location.APSService\"`\n\n            `android:foregroundServiceType``=``\"location\"` `/>`\n\n        `<``provider`\n\n            `android:name``=``\"com.yingzi.avatar.provider.AvatarProvider\"`\n\n            `android:authorities``=``\"${applicationId}.avatar\"`\n\n            `android:exported``=``\"false\"`\n\n            `/>`\n\n        `<!-- 配置Bugly调试模式（true或者false）-->`\n\n        `<``meta-data`\n\n            `android:name``=``\"BUGLY_ENABLE_DEBUG\"`\n\n            `android:value``=``\"true\"` `/>`\n\n    `</``application``>`\n\n`</``manifest``>`\n\n在这份清单文件中，可以获取到如下信息：\n\n*   该模块名称为\"com.yingzi.consume\"\n*   应用请求了29个权限【备注：在Android6.0之后，用户可以在运行时同意或者拒绝某些应用权限】\n*   应用程序的入口点为 类ConsumeAppStart【应用进程启动后，此类会在应用的所有组件之前进行实例化，可选，没有的话Android 会使用 `Application` 基类的实例】\n*   共有51个Activity应用可视化组件\n*   共有6个Service组件\n*   共有3个meta-data【目前没看到其使用场景】\n*   共有1个content provider 组件\n\n其中每一个组件、入口点，背后都是一长串的结构，相互之间相互独立又相互联系，通过各种约定俗成的接口、格式、固有机制来实现业务需求，可以说各种开发方式方法都是相通的，最主要的不同点在于要实现的业务逻辑不一样，以及可能应用到的库、包以及用法不一样，不管怎么样，其都包含在Android开发体系中，这是最基本的技术框架。\n\n### 2.2.1. 分析Activity\n\n        应用程序的入口点活动Activity（一般情况，一个应用程序只有一个主要入口点活动—启动应用程序首先打开的活动），从上述的AndroidManifest.xml文件中看到：\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n`<``activity`\n\n    `android:name``=``\".ui.activity.ConsumeMainActivity\"`\n\n    `android:configChanges``=``\"keyboard|keyboardHidden|orientation|screenSize\"`\n\n    `android:exported``=``\"true\"`\n\n    `android:screenOrientation``=``\"portrait\"`\n\n    `android:theme``=``\"@style/LaunchTheme\"`\n\n    `tools:ignore``=``\"LockedOrientationActivity\"``>`\n\n    `<``intent-filter``>`\n\n        `<``action` `android:name``=``\"android.intent.action.MAIN\"` `/>`\n\n        `<``category` `android:name``=``\"android.intent.category.LAUNCHER\"` `/>`\n\n        `<``category` `android:name``=``\"android.intent.category.HOME\"` `/>`\n\n        `<``category` `android:name``=``\"android.intent.category.DEFAULT\"` `/>`\n\n    `</``intent-filter``>`\n\n`</``activity``>`\n\n该可视化界面组件是主程序入口，用户点击应用图标启动应用程序时候，就会打开该活动。通过如下标记体现：\n\n[?](#)\n\n1\n\n2\n\n3\n\n`<``action` `android:name``=``\"android.intent.action.MAIN\"` `/>`\n\n`<``category` `android:name``=``\"android.intent.category.LAUNCHER\"` `/>`\n\n`<``category` `android:name``=``\"android.intent.category.HOME\"` `/>`\n\n### 2.2.2. 程序入口点与程序入口点活动\n\n        两者之间的区别，可以理解为一个是后台程序入口（程序的），一个是界面入口（U层面），前者更早执行。\n\n**ConsumeAppStart.java**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n`package` `com.yingzi.consume;`\n\n`import` `android.app.Application;`\n\n`import` `com.example.yzbase.base.BaseApp;`\n\n`import` `com.example.yzbase.utils.WakeLockUtil;`\n\n`import` `com.example.yzbase.utils.YZLocationUtil;`\n\n`import` `com.lzy.okgo.OkGo;`\n\n`import` `com.yingzi.consume.analyze.emas.EmasHelper;`\n\n`import` `com.yingzi.consume.analyze.sensorsdata.SensorHelper;`\n\n`import` `com.yingzi.consume.ui.bean.GlobalInfo;`\n\n`import` `com.yingzi.consume.analyze.bonree.BonreeHelper;`\n\n`import` `com.yingzi.microwave.analyze.bugly.BuglyHelper;`\n\n`import` `com.yingzi.wdcservice.MicrowaveContextInitializer;`\n\n`import` `com.yingzi.wdcservice.common.utils.WdcDeviceUtil;`\n\n`import` `com.yingzi.yzhci.aiui.YZAiui;`\n\n`import` `javax.inject.Inject;`\n\n`import` `dagger.hilt.android.HiltAndroidApp;`\n\n`/**`\n\n `* @Author: xxx`\n\n `* @Date: 2022.4.15`\n\n `* @Last Modified by: xxx`\n\n `* @Last Modified time: 2022.4.15`\n\n `* 消费端应用 入口application`\n\n `*/`\n\n`@HiltAndroidApp`\n\n`public` `class` `ConsumeAppStart` `extends` `BaseApp {`\n\n    `@Inject`\n\n    `MicrowaveContextInitializer mHardWareSdk;`\n\n    `private` `static` `GlobalInfo globalInfo;`\n\n    `@Override`\n\n    `public` `void` `initModuleApp(Application application) {`\n\n        `//1.进入万得厨初始化对应配置信息`\n\n        `WdcDeviceUtil.initConsumeDeviceConfig(``this``);`\n\n        `//2.因为需要依赖注入，放在此处初始化`\n\n        `mHardWareSdk.initHardwareSdk();`\n\n        `//3.aiui初始化`\n\n        `YZAiui.init(``this``);`\n\n        `//4.高德定位初始化`\n\n        `YZLocationUtil.getInstance().initLocation(``this``);`\n\n        `OkGo.getInstance().init(application);`\n\n        `BuglyHelper.instance.init(``this``,``false``);`\n\n        `BonreeHelper.instance.init(``this``);`\n\n        `SensorHelper.instance.init(``this``);`\n\n        `EmasHelper.instance.init(``this``);`\n\n        `WakeLockUtil.getInstance().init();`\n\n    `}`\n\n    `public` `static` `GlobalInfo getGloablInfo() {`\n\n        `if` `(globalInfo ==` `null``) {`\n\n            `globalInfo =` `new` `GlobalInfo();`\n\n        `}`\n\n        `return` `globalInfo;`\n\n    `}`\n\n`}`\n\nConsumeAppStart表达的意思是：\n\n这段代码是一个应用程序的入口类，它初始化了各种模块和库，并提供了一个静态方法用于获取全局信息对象。\n\n这段代码是一个名为 ConsumeAppStart 的 Java 类，位于 com.yingzi.consume 包中。它继承了 BaseApp 类，并使用 @HiltAndroidApp 注解，表示它是应用程序的入口点。\n\n**具体分析如下：**\n\n*   ConsumeAppStart 类在其 initModuleApp 方法中初始化了各种模块和库，该方法在应用程序初始化时被调用。\n*   它使用 @Inject 注解注入了一个 MicrowaveContextInitializer 实例。\n*   WdcDeviceUtil.initConsumeDeviceConfig(this) 方法初始化了应用程序的相应配置信息。\n*   mHardWareSdk.initHardwareSdk() 方法初始化了硬件 SDK。\n*   YZAiui.init(this) 方法初始化了 AIUI。\n*   YZLocationUtil.getInstance().initLocation(this) 方法初始化了高德定位。\n*   OkGo.getInstance().init(application) 方法初始化了 OkGo 网络库。\n*   BuglyHelper.instance.init(this,false) 方法初始化了 Bugly 异常上报。\n*   BonreeHelper.instance.init(this) 方法初始化了 Bonree 监控。\n*   SensorHelper.instance.init(this) 方法初始化了 SensorsData 数据分析。\n*   EmasHelper.instance.init(this) 方法初始化了 EMAS 性能监控。\n*   WakeLockUtil.getInstance().init() 方法初始化了 WakeLockUtil。\n*   getGloablInfo 方法返回一个 GlobalInfo 对象，如果该对象为空，则创建一个新的 GlobalInfo 对象并返回。\n\n**ConsumeMainActivity**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n\n556\n\n557\n\n558\n\n559\n\n560\n\n561\n\n562\n\n563\n\n564\n\n565\n\n566\n\n567\n\n568\n\n569\n\n570\n\n571\n\n572\n\n573\n\n574\n\n575\n\n576\n\n577\n\n578\n\n579\n\n580\n\n581\n\n582\n\n583\n\n584\n\n585\n\n586\n\n587\n\n588\n\n589\n\n590\n\n591\n\n592\n\n593\n\n594\n\n595\n\n596\n\n597\n\n598\n\n599\n\n600\n\n601\n\n602\n\n603\n\n604\n\n605\n\n606\n\n607\n\n608\n\n609\n\n610\n\n611\n\n612\n\n613\n\n614\n\n615\n\n616\n\n617\n\n618\n\n619\n\n620\n\n621\n\n622\n\n623\n\n624\n\n625\n\n626\n\n627\n\n628\n\n629\n\n630\n\n631\n\n632\n\n633\n\n634\n\n635\n\n636\n\n637\n\n638\n\n639\n\n640\n\n641\n\n642\n\n643\n\n644\n\n645\n\n646\n\n647\n\n648\n\n649\n\n650\n\n651\n\n652\n\n653\n\n654\n\n655\n\n656\n\n657\n\n658\n\n659\n\n660\n\n661\n\n662\n\n663\n\n664\n\n665\n\n666\n\n667\n\n668\n\n669\n\n670\n\n671\n\n672\n\n673\n\n674\n\n675\n\n676\n\n677\n\n678\n\n679\n\n680\n\n681\n\n682\n\n683\n\n684\n\n685\n\n686\n\n687\n\n688\n\n689\n\n690\n\n691\n\n692\n\n693\n\n694\n\n695\n\n696\n\n697\n\n698\n\n699\n\n700\n\n701\n\n702\n\n703\n\n704\n\n705\n\n706\n\n707\n\n708\n\n709\n\n710\n\n711\n\n712\n\n713\n\n714\n\n715\n\n716\n\n717\n\n718\n\n719\n\n720\n\n721\n\n722\n\n723\n\n724\n\n725\n\n726\n\n727\n\n728\n\n729\n\n730\n\n731\n\n732\n\n733\n\n734\n\n735\n\n736\n\n737\n\n738\n\n739\n\n740\n\n741\n\n742\n\n743\n\n744\n\n745\n\n746\n\n747\n\n748\n\n749\n\n750\n\n751\n\n752\n\n753\n\n754\n\n755\n\n756\n\n757\n\n758\n\n759\n\n760\n\n761\n\n762\n\n763\n\n764\n\n765\n\n766\n\n767\n\n768\n\n769\n\n770\n\n771\n\n772\n\n773\n\n774\n\n775\n\n776\n\n777\n\n778\n\n779\n\n780\n\n781\n\n782\n\n783\n\n784\n\n785\n\n786\n\n787\n\n788\n\n789\n\n790\n\n791\n\n792\n\n793\n\n794\n\n795\n\n796\n\n797\n\n798\n\n799\n\n800\n\n801\n\n802\n\n803\n\n804\n\n805\n\n806\n\n807\n\n808\n\n809\n\n810\n\n811\n\n812\n\n813\n\n814\n\n815\n\n816\n\n817\n\n818\n\n819\n\n820\n\n821\n\n822\n\n823\n\n824\n\n825\n\n826\n\n827\n\n828\n\n829\n\n830\n\n831\n\n832\n\n833\n\n834\n\n835\n\n836\n\n837\n\n838\n\n839\n\n840\n\n841\n\n842\n\n843\n\n844\n\n845\n\n846\n\n847\n\n848\n\n849\n\n850\n\n851\n\n852\n\n853\n\n854\n\n855\n\n856\n\n857\n\n858\n\n859\n\n860\n\n861\n\n862\n\n863\n\n864\n\n865\n\n866\n\n867\n\n868\n\n869\n\n870\n\n871\n\n872\n\n873\n\n874\n\n875\n\n876\n\n877\n\n878\n\n879\n\n880\n\n881\n\n882\n\n883\n\n884\n\n885\n\n886\n\n887\n\n888\n\n889\n\n890\n\n891\n\n892\n\n893\n\n894\n\n895\n\n896\n\n897\n\n898\n\n899\n\n900\n\n901\n\n902\n\n903\n\n904\n\n905\n\n906\n\n907\n\n908\n\n909\n\n910\n\n911\n\n912\n\n913\n\n914\n\n915\n\n916\n\n917\n\n918\n\n919\n\n920\n\n921\n\n922\n\n923\n\n`package` `com.yingzi.consume.ui.activity;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.CARE_MODE_CHANGE_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.COOKING_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.COOKING_STOP_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.DEVICE_REGISTER_SUCCESS_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.DOOR_CLOSED;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.DOOR_OPEN;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.ERROR_REPORT_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.FIRMWARE_UPGRADE_CONFIRM_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.HARD_SDK_INIT_SUCC;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.INVALID_ORDER;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.MICROWAVE_ADMIN_BIND_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.MQTT_CONNECT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.MQTT_LOCKED;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.SCAN_CHECK_LOCKED;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.SMART_HEAT_FINISH_RESULT_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.SMART_HEAT_START_RESULT_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.SMART_HEAT_STOP_RESULT_EVENT;`\n\n`import` `static` `com.yingzi.wdcservice.common.constants.CommEvent.TOAST_EVENT;`\n\n`import` `android.annotation.SuppressLint;`\n\n`import` `android.app.Activity;`\n\n`import` `android.content.Context;`\n\n`import` `android.content.Intent;`\n\n`import` `android.media.MediaRouter;`\n\n`import` `android.os.Bundle;`\n\n`import` `android.os.Handler;`\n\n`import` `android.os.Looper;`\n\n`import` `android.provider.Settings;`\n\n`import` `android.text.TextUtils;`\n\n`import` `android.util.Log;`\n\n`import` `android.view.Display;`\n\n`import` `android.view.MotionEvent;`\n\n`import` `android.view.View;`\n\n`import` `android.widget.Toast;`\n\n`import` `androidx.activity.result.ActivityResult;`\n\n`import` `androidx.activity.result.ActivityResultCallback;`\n\n`import` `androidx.activity.result.ActivityResultLauncher;`\n\n`import` `androidx.activity.result.contract.ActivityResultContracts;`\n\n`import` `androidx.annotation.NonNull;`\n\n`import` `androidx.annotation.Nullable;`\n\n`import` `androidx.fragment.app.FragmentManager;`\n\n`import` `androidx.fragment.app.FragmentTransaction;`\n\n`import` `androidx.lifecycle.Observer;`\n\n`import` `com.blankj.utilcode.util.ActivityUtils;`\n\n`import` `com.blankj.utilcode.util.LogUtils;`\n\n`import` `com.blankj.utilcode.util.NetworkUtils;`\n\n`import` `com.blankj.utilcode.util.SPUtils;`\n\n`import` `com.blankj.utilcode.util.StringUtils;`\n\n`import` `com.blankj.utilcode.util.ThreadUtils;`\n\n`import` `com.blankj.utilcode.util.Utils;`\n\n`import` `com.bumptech.glide.Glide;`\n\n`import` `com.example.yzbase.constant.SpConstant;`\n\n`import` `com.example.yzbase.event.ErrorReportEvent;`\n\n`import` `com.example.yzbase.event.MqttEvent;`\n\n`import` `com.example.yzbase.event.SDKInitEvent;`\n\n`import` `com.example.yzbase.event.ToastEvent;`\n\n`import` `com.example.yzbase.network.res.ParameterResDto;`\n\n`import` `com.example.yzbase.ui.dialog.DialogHelper;`\n\n`import` `com.example.yzbase.utils.FileHelper;`\n\n`import` `com.yingzi.avatar.listener.IPlayChatListener;`\n\n`import` `com.yingzi.avatar.utils.AvatarPlayer;`\n\n`import` `com.yingzi.avatar.voice.ChangeAvatarUtils;`\n\n`import` `com.yingzi.consume.reciver.NetConnected;`\n\n`import` `com.yingzi.consume.utils.CookHandler;`\n\n`import` `com.yingzi.consume.utils.GsonUtils;`\n\n`import` `com.example.yzbase.utils.WakeLockUtil;`\n\n`import` `com.example.yzbase.utils.YZDeviceUtil;`\n\n`import` `com.jeremyliao.liveeventbus.LiveEventBus;`\n\n`import` `com.lxj.xpopup.core.BasePopupView;`\n\n`import` `com.yingzi.avatar.constant.VoiceTagConstant;`\n\n`import` `com.yingzi.avatar.event.AvatarEvent;`\n\n`import` `com.yingzi.avatar.event.CommonEvent;`\n\n`import` `com.yingzi.avatar.manager.AvatarManager;`\n\n`import` `com.yingzi.avatar.status.AvatarStatusManager;`\n\n`import` `com.yingzi.avatar.view.AvatarViewUtils;`\n\n`import` `com.yingzi.consume.R;`\n\n`import` `com.yingzi.consume.aiui.AiuiBizHelper;`\n\n`import` `com.yingzi.consume.aiui.AvatarInstructUtils;`\n\n`import` `com.yingzi.consume.base.ConsumeBaseActivity;`\n\n`import` `com.yingzi.consume.common.ScreenChooseObserver;`\n\n`import` `com.yingzi.consume.constant.IntentConstants;`\n\n`import` `com.yingzi.consume.databinding.ConsumeActivityMainV2Binding;`\n\n`import` `com.yingzi.consume.dialog.SecondScreenDialog;`\n\n`import` `com.yingzi.consume.reciver.NetworkStateListenHandle;`\n\n`import` `com.yingzi.consume.ui.activity.collect.ConsumeCollectActivity;`\n\n`import` `com.yingzi.consume.ui.dialog.ConsumeCommonDialog;`\n\n`import` `com.yingzi.consume.ui.fragment.home.CareMainFragment;`\n\n`import` `com.yingzi.consume.ui.fragment.home.MainFragment;`\n\n`import` `com.yingzi.consume.ui.viewmodel.ConsumeMainViewV2Model;`\n\n`import` `com.yingzi.consume.ui.viewmodel.GuideViewModel;`\n\n`import` `com.yingzi.consume.ui.widgets.operation.OperationBean;`\n\n`import` `com.yingzi.consume.utils.ConsumeUpdateUtil;`\n\n`import` `com.yingzi.consume.utils.YZBizModeUtil;`\n\n`import` `com.yingzi.consume.utils.YZValueUtil;`\n\n`import` `com.yingzi.consume.utils.YzDialogUtil;`\n\n`import` `com.yingzi.consume.utils.YzToastUtil;`\n\n`import` `com.yingzi.wdcservice.BuildConfig;`\n\n`import` `com.yingzi.wdcservice.common.constants.CommEvent;`\n\n`import` `com.yingzi.wdcservice.common.enums.HeatState;`\n\n`import` `com.yingzi.wdcservice.common.enums.SmartHeatingFinishEventTypeEnum;`\n\n`import` `com.yingzi.wdcservice.common.enums.SmartHeatingStartEventTypeEnum;`\n\n`import` `com.yingzi.wdcservice.common.enums.SmartHeatingStopEventTypeEnum;`\n\n`import` `com.yingzi.wdcservice.common.utils.WdcDeviceUtil;`\n\n`import` `com.yingzi.wdcservice.context.SmartHeatingContext;`\n\n`import` `com.yingzi.wdcservice.noticeview.callback.OnDataCallBack;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.CareModeChangeEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.CheckLockedEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.CookEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.CookingStopEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.DeviceRegisterSuccessEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.DoorCloseEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.DoorOpenEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.FirmwareUpgradeConfirmEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.MicrowaveAdminBindEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.MqttLockedEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.PayQrInvalidEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.SmartHeatingFinishResultEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.SmartHeatingStartResultEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.SmartHeatingStopResultEvent;`\n\n`import` `com.yingzi.wdcservice.noticeview.event.SwitchModelEvent;`\n\n`import` `com.yingzi.wdcservice.service.dto.MicrowaveHeatDataDto;`\n\n`import` `com.yingzi.wdcservice.service.listener.MicrowaveTwoInOneModuleReportEventListener;`\n\n`import` `com.yingzi.wdcservice.statemachine.enums.MicrowaveState;`\n\n`import` `com.yingzi.wdcservice.update.APKUpdateHelper;`\n\n`import` `com.yingzi.yzhci.aiui.YZAiui;`\n\n`import` `com.yingzi.yzhci.aiui.listener.IPermissionCallBack;`\n\n`import` `com.yingzi.yzhci.aiui.util.YZAIUIPermission;`\n\n`import` `java.util.concurrent.TimeUnit;`\n\n`import` `javax.inject.Inject;`\n\n`import` `dagger.hilt.android.AndroidEntryPoint;`\n\n`/**`\n\n `* @Author: xxx`\n\n `* @CreateDate: 2022/10/01 9:53 AM`\n\n `* @Description: 首页`\n\n `*/`\n\n`@AndroidEntryPoint`\n\n`public` `class` `ConsumeMainActivity` `extends` `ConsumeBaseActivity<ConsumeActivityMainV2Binding, ConsumeMainViewV2Model> {`\n\n    `private` `static` `final` `String TAG =` `\"zxx_main\"``;`\n\n    `/**`\n\n     `* SDK是否初始化`\n\n     `*/`\n\n    `private` `static` `boolean` `mSDKInit =` `false``;`\n\n    `/**`\n\n     `* 网络状态注册监听`\n\n     `*/`\n\n    `@Inject`\n\n    `NetworkStateListenHandle mNetworkStateListenHandle;`\n\n    `/**`\n\n     `* 统亮屏时间观察者`\n\n     `*/`\n\n    `@Inject`\n\n    `ScreenChooseObserver mSettingsContentObserver;`\n\n    `/**`\n\n     `* 是否收到烹饪完成的消息，做检查Lock锁定弹框用`\n\n     `*/`\n\n    `private` `boolean` `mFinishReceived =` `false``;`\n\n    `/**`\n\n     `* 硬件异常对话框处于非显示状态`\n\n     `*/`\n\n    `private` `boolean` `mHasDisMissErrorDialog =` `true``;`\n\n    `//显示副屏`\n\n    `private` `SecondScreenDialog mSecondScreenDialog;`\n\n    `/**`\n\n     `* AIUI 对应权限申请`\n\n     `*/`\n\n    `private` `YZAIUIPermission mYZAIUIPermission;`\n\n    `public` `static` `View view;`\n\n    `private` `MainFragment mMainFragment;`\n\n    `private` `CareMainFragment mCareMainFragment;`\n\n    `ActivityResultLauncher<Intent> guideIntent = registerForActivityResult(``new` `ActivityResultContracts.StartActivityForResult(),` `new` `ActivityResultCallback<ActivityResult>() {`\n\n        `@Override`\n\n        `public` `void` `onActivityResult(ActivityResult result) {`\n\n            `mViewModel.setDeviceGuideShowing(``false``);`\n\n            `int` `resultCode = result.getResultCode();`\n\n            `if` `(resultCode == IntentConstants.GUIDE_RESULT_CODE) {`\n\n                `// 初始化AIUI`\n\n                `mYZAIUIPermission.requestAiuiAllPermission();`\n\n                `ThreadUtils.runOnUiThreadDelayed(``new` `Runnable() {`\n\n                    `@Override`\n\n                    `public` `void` `run() {`\n\n                        `mViewModel.checkNetwork(``new` `ConsumeMainViewV2Model.ICheckNetworkCallBack() {`\n\n                            `@Override`\n\n                            `public` `void` `ok() {`\n\n                            `}`\n\n                            `@Override`\n\n                            `public` `void` `no() {`\n\n                                `mViewModel.showNetDisableDialog();`\n\n                            `}`\n\n                        `});`\n\n                    `}`\n\n                `},` `1000``);`\n\n            `}`\n\n            `if` `(mViewModel.isShowUserGuideWhenDeviceGuideShowing()) {`\n\n                `mMainFragment.showUserGuideV2();`\n\n            `}`\n\n        `}`\n\n    `});`\n\n    `@Override`\n\n    `protected` `void` `onCreate(``@Nullable` `Bundle savedInstanceState) {`\n\n        `super``.onCreate(savedInstanceState);`\n\n        `mViewModel.setHeadUrl(``null``);`\n\n    `}`\n\n    `@Override`\n\n    `protected` `void` `onStart() {`\n\n        `super``.onStart();`\n\n        `//判断锁定对话框 是否检查 显示`\n\n        `judgeLockDialog();`\n\n    `}`\n\n    `@Override`\n\n    `protected` `void` `onResume() {`\n\n        `super``.onResume();`\n\n        `mBinding.appStatus.setWifiImg();`\n\n        `AvatarViewUtils.getInstance().setVisiable(isShowAvatar());`\n\n    `}`\n\n    `@Override`\n\n    `protected` `void` `onDestroy() {`\n\n`//        AiuiBizHelper.removeAIUIRetry();`\n\n        `super``.onDestroy();`\n\n        `Glide.get(``this``).clearMemory();`\n\n        `getContentResolver().unregisterContentObserver(mSettingsContentObserver);`\n\n    `}`\n\n    `@Inject`\n\n    `AvatarInstructUtils avatarInstructUtils;`\n\n    `@Override`\n\n    `protected` `void` `initView() {`\n\n`//        AvatarViewUtils.getInstance().showFloatingWindow();`\n\n        `AvatarManager.getInstance().init(avatarInstructUtils);`\n\n        `initMainFragment();`\n\n        `//初始化权限对象`\n\n        `initPermission();`\n\n        `//各类消息事件接收`\n\n        `initEventListen();`\n\n        `view = mBinding.flContainer;`\n\n        `//添加Lifecycle观察者设置更新相关动作`\n\n        `ConsumeUpdateUtil.softwareUpdateObserver(``this``);`\n\n        `//设置页面设置超时时间监听器`\n\n        `getContentResolver().registerContentObserver(Settings.System.CONTENT_URI,` `true``, mSettingsContentObserver);`\n\n        `//加载副屏界面`\n\n        `loadSecondScreenView();`\n\n    `}`\n\n    `/**`\n\n     `* 初始化主页Fragment`\n\n     `*/`\n\n    `private` `void` `initMainFragment() {`\n\n        `boolean` `isCareModel = SPUtils.getInstance().getBoolean(SpConstant.IS_CARE_MODEL,` `false``);`\n\n        `LogUtils.i(``\"主页关怀版本初始化： 是否是关怀版本\"` `+ isCareModel);`\n\n        `FragmentManager fragmentManager = getSupportFragmentManager();`\n\n        `FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();`\n\n        `if` `(isCareModel) {`\n\n            `mCareMainFragment = CareMainFragment.newInstance();`\n\n            `fragmentTransaction.add(mBinding.flContainer.getId(), mCareMainFragment,` `\"careMainFragment\"``);`\n\n            `fragmentTransaction.show(mCareMainFragment);`\n\n        `}` `else` `{`\n\n            `mMainFragment = MainFragment.newInstance();`\n\n            `fragmentTransaction.add(mBinding.flContainer.getId(), mMainFragment,` `\"mainFragment\"``);`\n\n            `fragmentTransaction.show(mMainFragment);`\n\n        `}`\n\n        `fragmentTransaction.commitNowAllowingStateLoss();`\n\n    `}`\n\n    `/**`\n\n     `* 切换Fragment`\n\n     `*`\n\n     `* @param toCareHomePage`\n\n     `*/`\n\n    `private` `void` `replaceFragment(``boolean` `toCareHomePage) {`\n\n        `LogUtils.i(``\"主页关怀版本替换\"` `+ toCareHomePage);`\n\n        `if` `(toCareHomePage) {`\n\n            `mCareMainFragment = CareMainFragment.newInstance();`\n\n            `getSupportFragmentManager().beginTransaction()`\n\n                    `.replace(mBinding.flContainer.getId(), mCareMainFragment)`\n\n                    `.commitAllowingStateLoss();`\n\n        `}` `else` `{`\n\n            `if` `(mMainFragment ==` `null``) {`\n\n                `mMainFragment = MainFragment.newInstance();`\n\n            `}`\n\n            `getSupportFragmentManager().beginTransaction()`\n\n                    `.replace(mBinding.flContainer.getId(), mMainFragment)`\n\n                    `.commitAllowingStateLoss();`\n\n            `//加载虚拟人`\n\n            `new` `Handler().postDelayed(() -> mMainFragment.loadVirtualMan(),` `2000``);`\n\n        `}`\n\n        `SPUtils.getInstance().put(SpConstant.IS_CARE_MODEL, toCareHomePage,` `true``);`\n\n        `YZAiui.getInstance().setAiuiOn(!toCareHomePage);`\n\n        `LogUtils.i(``\"主页关怀版本替换后\"` `+ SPUtils.getInstance().getBoolean(SpConstant.IS_CARE_MODEL));`\n\n        `ThreadUtils.getMainHandler().postDelayed(``new` `Runnable() {`\n\n            `@Override`\n\n            `public` `void` `run() {`\n\n                `mViewModel.updateCareModeSetting();`\n\n            `}`\n\n        `},` `1000``);`\n\n    `}`\n\n    `@Override`\n\n    `public` `void` `onRequestPermissionsResult(``int` `requestCode,` `@NonNull` `String[] permissions,` `@NonNull` `int``[] grantResults) {`\n\n        `super``.onRequestPermissionsResult(requestCode, permissions, grantResults);`\n\n        `mYZAIUIPermission.onRequestPermissionsResult(requestCode, permissions, grantResults);`\n\n    `}`\n\n    `@Override`\n\n    `protected` `void` `onActivityResult(``int` `requestCode,` `int` `resultCode,` `@androidx``.annotation.Nullable Intent data) {`\n\n        `super``.onActivityResult(requestCode, resultCode, data);`\n\n        `mYZAIUIPermission.onActivityResult(requestCode, resultCode, data);`\n\n        `if` `(RESULT_OK == resultCode && requestCode ==` `100` `&& data !=` `null``) {`\n\n            `OperationBean chooseBean = (OperationBean) data.getSerializableExtra(IntentConstants.COLLECT_CLICK_ITEM);`\n\n            `Log.i(TAG,` `\"收到的数据\"` `+ GsonUtils.toJson(chooseBean));`\n\n            `if` `(chooseBean !=` `null``) {`\n\n                `mViewModel.setSrcOperationBean(chooseBean);`\n\n                `mMainFragment.setOperatedata(chooseBean);`\n\n            `}`\n\n        `}`\n\n    `}`\n\n    `/**`\n\n     `* 加载副屏界面`\n\n     `*/`\n\n    `private` `void` `loadSecondScreenView() {`\n\n        `if` `(!YZDeviceUtil.isDoubleScreenDevice()) {`\n\n            `return``;`\n\n        `}`\n\n        `//方式1`\n\n        `MediaRouter mediaRouter = (MediaRouter) getSystemService(Context.MEDIA_ROUTER_SERVICE);`\n\n        `MediaRouter.RouteInfo route = mediaRouter.getSelectedRoute(MediaRouter.ROUTE_TYPE_LIVE_AUDIO);`\n\n        `if` `(route !=` `null``) {`\n\n            `Display presentationDisplay = route.getPresentationDisplay();`\n\n            `if` `(presentationDisplay !=` `null``) {`\n\n                `mSecondScreenDialog =` `new` `SecondScreenDialog(ConsumeMainActivity.``this``, presentationDisplay);`\n\n                `mSecondScreenDialog.show();`\n\n            `}`\n\n        `}` `else` `{`\n\n            `Toast.makeText(``this``,` `\"不支持分屏\"``, Toast.LENGTH_SHORT).show();`\n\n        `}`\n\n    `}`\n\n    `private` `void` `handlePermissionResult(``boolean` `result) {`\n\n        `if` `(result) {`\n\n            `Log.i(TAG,` `\"权限都有了，初始化AIUI\"``);`\n\n            `initAiui();`\n\n        `}` `else` `{`\n\n            `ConsumeCommonDialog bindDialog =` `new` `ConsumeCommonDialog.Builder(``this``).setContent(getString(R.string.no_permission))`\n\n                    `.setClickCallBack(getString(R.string.go_open), getString(R.string.cancel),` `new` `ConsumeCommonDialog.OnClickListen() {`\n\n                        `@Override`\n\n                        `public` `void` `onConfirmListen(BasePopupView dialog, View view) {`\n\n                            `dialog.dismiss();`\n\n                            `mYZAIUIPermission.requestAiuiAllPermission();`\n\n                        `}`\n\n                        `@Override`\n\n                        `public` `void` `onCancelListen(BasePopupView dialog, View view) {`\n\n                            `dialog.dismiss();`\n\n                        `}`\n\n                    `}).build();`\n\n            `DialogHelper.showDialog(``this``, bindDialog);`\n\n        `}`\n\n    `}`\n\n    `private` `void` `initAiui() {`\n\n        `//由于aiui占用授权设备数量，所以暂时关闭`\n\n        `FileHelper.getInstance().log(TAG,`\n\n                `\"initAiui \"` `+ AiuiBizHelper.AIUI_ON +` `\" isAiuiSuccess: \"` `+ YZAiui.getInstance().isAiuiSuccess);`\n\n        `if` `(AiuiBizHelper.AIUI_ON && !YZAiui.getInstance().isAiuiSuccess) {`\n\n            `AiuiBizHelper.initAIUI(YZAiui.MODE_ONE_SHOT);`\n\n        `}`\n\n        `ThreadUtils.runOnUiThread(avatarRunnable);`\n\n    `}`\n\n    `private` `final` `Runnable avatarRunnable=``new` `Runnable() {`\n\n        `@Override`\n\n        `public` `void` `run() {`\n\n            `if` `(mViewModel.initSuccess) {`\n\n                `boolean` `isCareModel = SPUtils.getInstance().getBoolean(SpConstant.IS_CARE_MODEL,` `false``);`\n\n                `AvatarManager.getInstance().create(``\"main\"``, !isCareModel);`\n\n            `}``else` `{`\n\n                `ThreadUtils.runOnUiThreadDelayed(avatarRunnable,``100``);`\n\n            `}`\n\n        `}`\n\n    `};`\n\n    `@SuppressLint``(``\"ClickableViewAccessibility\"``)`\n\n    `@Override`\n\n    `protected` `void` `initListen() {`\n\n        `super``.initListen();`\n\n        `Log.i(``\"haover\"``,` `\">>>>> mSDKInit=\"` `+ mSDKInit);`\n\n        `if` `(mSDKInit) {`\n\n            `mBinding.loadingIV.setVisibility(View.GONE);`\n\n        `}` `else` `{`\n\n            `mBinding.loadingIV.setVisibility(View.VISIBLE);`\n\n        `}`\n\n        `mBinding.loadingIV.setOnClickListener(``new` `View.OnClickListener() {`\n\n            `@Override`\n\n            `public` `void` `onClick(View v) {`\n\n            `}`\n\n        `});`\n\n        `LiveEventBus.get(AvatarEvent.AVATAR_VOICE_TAG_COOK, CommonEvent.``class``).observe(``this``, voiceCookEvent -> {`\n\n            `switch` `(voiceCookEvent.getVoiceCommand()) {`\n\n                `case` `VoiceTagConstant.START_TAG:`\n\n                    `Integer state = SmartHeatingContext.getInstance().getState();`\n\n                    `if` `(ActivityUtils.getTopActivity() == ConsumeMainActivity.``this``) {`\n\n                        `if` `(MicrowaveState.INIT.getCode() == state) {`\n\n                            `startCook();`\n\n                        `}` `else` `{`\n\n                            `AvatarManager.getInstance().playDynamic(getString(R.string.exec_failure),` `false``,` `null``);`\n\n                        `}`\n\n                    `}`\n\n                    `break``;`\n\n            `}`\n\n        `});`\n\n    `}`\n\n    `private` `void` `startCook() {`\n\n        `if` `(mViewModel.getEstimatedTotalCookingTime(mViewModel.getStageList()) >` `1800``) {`\n\n            `YzToastUtil.showCommonToast(getString(R.string.no_more_30));`\n\n            `return``;`\n\n        `}`\n\n        `mViewModel.clickStartCook();`\n\n    `}`\n\n    `/**`\n\n     `* 初始化权限对象`\n\n     `*/`\n\n    `private` `void` `initPermission() {`\n\n        `// 初始化权限对象`\n\n        `mYZAIUIPermission =` `new` `YZAIUIPermission(``this``);`\n\n        `mYZAIUIPermission.setPermissionCallBack(``new` `IPermissionCallBack() {`\n\n            `@Override`\n\n            `public` `void` `callBack(``boolean` `result) {`\n\n                `// 拿到授权结果后做对应处理`\n\n                `handlePermissionResult(result);`\n\n            `}`\n\n        `});`\n\n    `}`\n\n    `/**`\n\n     `* 首次运行跳转引导页面`\n\n     `*/`\n\n    `private` `void` `firstRunGoGuidePage() {`\n\n        `if` `(GuideViewModel.isShowGuide()) {`\n\n            `mViewModel.setDeviceGuideShowing(``true``);`\n\n            `guideIntent.launch(``new` `Intent(``this``, GuideActivity.``class``));`\n\n        `}` `else` `{`\n\n            `// 初始化AIUI`\n\n            `mYZAIUIPermission.requestAiuiAllPermission();`\n\n            `ThreadUtils.runOnUiThreadDelayed(``new` `Runnable() {`\n\n                `@Override`\n\n                `public` `void` `run() {`\n\n                    `mViewModel.checkNetwork(``new` `ConsumeMainViewV2Model.ICheckNetworkCallBack() {`\n\n                        `@Override`\n\n                        `public` `void` `ok() {`\n\n                        `}`\n\n                        `@Override`\n\n                        `public` `void` `no() {`\n\n                            `mViewModel.showNetDisableDialog();`\n\n                        `}`\n\n                    `});`\n\n                `}`\n\n            `},` `3000``);`\n\n        `}`\n\n    `}`\n\n    `/**`\n\n     `* 各类消息事件接收`\n\n     `*/`\n\n    `private` `void` `initEventListen() {`\n\n        `//监听是否有新的系统固件`\n\n        `LiveEventBus.get(CommEvent.CHANGE_CARE_OR_MAIN, SwitchModelEvent.``class``).observe(``this``,`\n\n                `switchModelEvent -> replaceFragment(switchModelEvent.isToCareModel()));`\n\n        `mViewModel.getNewSystemVersionLiveData().observe(``this``, newSystemVersion -> {`\n\n            `if` `(!TextUtils.isEmpty(newSystemVersion)) {`\n\n                `ConsumeUpdateUtil.showSystemUpdateDialog(newSystemVersion,` `new` `ConsumeCommonDialog.OnClickListen() {`\n\n                    `@Override`\n\n                    `public` `void` `onConfirmListen(BasePopupView dialog, View view) {`\n\n                        `LogUtils.d(``\"点击更新按钮、开始升级\"``);`\n\n                        `dialog.dismiss();`\n\n                        `mViewModel.installSystemFirmware();`\n\n                    `}`\n\n                    `@Override`\n\n                    `public` `void` `onCancelListen(BasePopupView dialog, View view) {`\n\n                        `dialog.dismiss();`\n\n                    `}`\n\n                `});`\n\n            `}`\n\n        `});`\n\n        `mViewModel.mEnterCollectPageLiveData.observe(``this``, collectionFolderResDtos -> {`\n\n            `Intent intent =` `new` `Intent(``this``, ConsumeCollectActivity.``class``);`\n\n            `intent.putExtra(IntentConstants.USERID, mViewModel.getUserId());`\n\n            `intent.putExtra(IntentConstants.UUID, mViewModel.getmUuid());`\n\n            `startActivityForResult(intent,` `100``);`\n\n        `});`\n\n        `//开始烹饪结果`\n\n        `mViewModel.observeStartSmartCookResult(``this``);`\n\n        `//sdk初始化成功`\n\n        `LiveEventBus.get(HARD_SDK_INIT_SUCC, SDKInitEvent.``class``).observeSticky(``this``, sdkInitEvent -> {`\n\n            `LogUtils.d(``\"收到初始化成功通知 开始其他模块初始化\"``);`\n\n            `mSDKInit =` `true``;`\n\n            `mViewModel.otherHardWareInit();`\n\n            `if` `(!isViewDestroy()) {`\n\n                `mBinding.loadingIV.setVisibility(View.GONE);`\n\n            `}`\n\n            `//加载虚拟人`\n\n            `boolean` `isCareModel = SPUtils.getInstance().getBoolean(SpConstant.IS_CARE_MODEL,` `false``);`\n\n            `if` `(!isCareModel) {`\n\n                `mMainFragment.loadVirtualMan();`\n\n            `}`\n\n            `new` `Handler().postDelayed(``this``::addNetWorkObserver,` `0``);`\n\n            `//首次运行跳转引导页面`\n\n            `firstRunGoGuidePage();`\n\n        `});`\n\n        `//解绑和绑定监听`\n\n        `LiveEventBus.get(MICROWAVE_ADMIN_BIND_EVENT, MicrowaveAdminBindEvent.``class``).observeSticky(``this``,` `new` `Observer<MicrowaveAdminBindEvent>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(MicrowaveAdminBindEvent adminBindEvent) {`\n\n                `LogUtils.dTag(TAG,` `\"bind event\"``);`\n\n                `if` `(isViewDestroy()) {`\n\n                    `return``;`\n\n                `}`\n\n                `if` `(``null` `!= adminBindEvent &&` `null` `!= adminBindEvent.getAdminBind() &&` `1` `== adminBindEvent.getAdminBind()) {`\n\n                    `LogUtils.dTag(TAG,` `\"bind event yes\"``);`\n\n                    `mViewModel.getIsRegistrationLiveData().postValue(``true``);`\n\n                    `mViewModel.getIsRegistrationRealLiveData().postValue(``true``);`\n\n                    `return``;`\n\n                `}`\n\n                `LogUtils.dTag(TAG,` `\"bind event not\"``);`\n\n                `mViewModel.setUserAccount(``null``);`\n\n                `mViewModel.getIsRegistrationLiveData().postValue(``false``);`\n\n                `mViewModel.getIsRegistrationRealLiveData().postValue(``false``);`\n\n            `}`\n\n        `});`\n\n        `//设备注册成功`\n\n        `LiveEventBus.get(DEVICE_REGISTER_SUCCESS_EVENT, DeviceRegisterSuccessEvent.``class``).observeSticky(``this``,` `new` `Observer<DeviceRegisterSuccessEvent>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(DeviceRegisterSuccessEvent registerSuccessEvent) {`\n\n                `LogUtils.dTag(TAG,` `\"register success event 设备注册成功\"``);`\n\n                `mViewModel.setRegisterDeviceSuccess(``true``);`\n\n                `mViewModel.onResume();`\n\n            `}`\n\n        `});`\n\n        `//toast提示`\n\n        `LiveEventBus.get(INVALID_ORDER, PayQrInvalidEvent.``class``).observe(``this``, invalidEvent`\n\n                `-> mViewModel.invalidPreOrderCode(invalidEvent.getOrderNo()));`\n\n        `//toast提示`\n\n        `LiveEventBus.get(TOAST_EVENT, ToastEvent.``class``).observe(``this``, toastEvent -> runOnUiThread(() -> {`\n\n            `if` `(toastEvent.getContent().equals(MicrowaveTwoInOneModuleReportEventListener.NO_SCHEME_TOAST)) {`\n\n                `mViewModel.eventToast(toastEvent.getContent());`\n\n                `AvatarManager.getInstance().playDynamic(``\"无法找到烹饪方案，如果您想烹饪食品请对我说‘打开某某烹饪方案\"``,`\n\n                        `false``,` `new` `IPlayChatListener() {`\n\n                            `@Override`\n\n                            `public` `void` `onChatEnd(String text) {`\n\n                                `AiuiBizHelper.openDialog(``true``,` `null``);`\n\n                            `}`\n\n                        `});`\n\n            `}` `else` `if` `(toastEvent.getContent().equals(getString(R.string.in_cooking_try_later))) {`\n\n                `AvatarPlayer.playTryLater();`\n\n            `}` `else` `{`\n\n                `mViewModel.eventToast(toastEvent.getContent());`\n\n            `}`\n\n        `}));`\n\n        `//故障上报`\n\n        `LiveEventBus.get(ERROR_REPORT_EVENT, ErrorReportEvent.``class``).observe(``this``, errorReportEvent -> {`\n\n            `if` `(!mHasDisMissErrorDialog) {`\n\n                `LogUtils.d(``\"连续收到故障弹框\"``);`\n\n                `return``;`\n\n            `}`\n\n            `mViewModel.getSalesAfterPhone(``new` `OnDataCallBack<ParameterResDto>() {`\n\n                `@Override`\n\n                `public` `void` `onSucc(ParameterResDto parameterResDto) {`\n\n                    `showErrorDialog(errorReportEvent, parameterResDto.getAfterSalePhone());`\n\n                `}`\n\n                `@Override`\n\n                `public` `void` `onFail(String message) {`\n\n                `}`\n\n            `});`\n\n        `});`\n\n        `//mqtt 已连接 同步数据`\n\n        `LiveEventBus.get(MQTT_CONNECT, MqttEvent.``class``).observeSticky(``this``, mqttEvent -> {`\n\n            `if` `(mqttEvent.isConnected()) {`\n\n                `mViewModel.initSuccess=``true``;`\n\n                `//收到mqtt通知`\n\n                `LogUtils.d(``\"mqtt连接\"``);`\n\n                `LogUtils.dTag(``\"zxxumqtt\"``,` `\"Connect  \"``);`\n\n                `APKUpdateHelper.mqttConnectComplete();`\n\n                `mViewModel.syncData();`\n\n            `}` `else` `{`\n\n                `LogUtils.dTag(``\"zxxumqtt\"``,` `\"un  Connect  \"``);`\n\n                `//mqtt断开连接`\n\n                `LogUtils.d(``\"mqtt断开连接\"``);`\n\n            `}`\n\n            `mBinding.appStatus.setWifiImg();`\n\n        `});`\n\n        `//COOKING_STOP_EVENT`\n\n        `LiveEventBus.get(COOKING_STOP_EVENT, CookingStopEvent.``class``).observe(``this``, sdkInitEvent -> {`\n\n            `LogUtils.d(``\"暂停 定时器执行\"``);`\n\n            `ActivityUtils.finishToActivity(ConsumeMainActivity.``class``,` `false``);`\n\n        `});`\n\n        `//烹饪状态事件`\n\n        `LiveEventBus.get(COOKING_EVENT, CookEvent.``class``).observe(``this``, cookEvent -> {`\n\n            `LogUtils.d(``\"接收到烹饪事件\"` `+ cookEvent);`\n\n            `if` `(HeatState.STOP == cookEvent.getHeatState()) {`\n\n                `mFinishReceived =` `true``;`\n\n                `FileHelper.getInstance().log(``\"Main\"``,``\"3\"``);`\n\n                `WakeLockUtil.getInstance().releaseWakeLock();`\n\n            `}` `else` `{`\n\n                `if` `(HeatState.START == cookEvent.getHeatState()) {`\n\n                    `WakeLockUtil.getInstance().getWakeLock();`\n\n                    `WakeLockUtil.getInstance().getWakeLock();`\n\n                `}`\n\n            `}`\n\n        `});`\n\n        `LiveEventBus.get(SMART_HEAT_START_RESULT_EVENT, SmartHeatingStartResultEvent.``class``).observe(``this``, event -> {`\n\n            `LogUtils.dTag(TAG,` `\"observeStartSmartCook \"` `+ (``null` `== event ?` `\"null\"` `: event.toString()));`\n\n            `if` `(``null` `== event) {`\n\n                `return``;`\n\n            `}`\n\n            `if` `(SmartHeatingStartEventTypeEnum.SUCCESS == event.getType()) {`\n\n                `LogUtils.dTag(TAG,` `\"observeStartSmartCook success\"``);`\n\n                `WakeLockUtil.getInstance().getWakeLock();`\n\n                `return``;`\n\n            `}`\n\n        `});`\n\n        `LiveEventBus.get(SMART_HEAT_STOP_RESULT_EVENT, SmartHeatingStopResultEvent.``class``).observe(``this``, event -> {`\n\n            `LogUtils.dTag(TAG,` `\"observeStartSmartCook \"` `+ (``null` `== event ?` `\"null\"` `: event.toString()));`\n\n            `if` `(``null` `== event) {`\n\n                `return``;`\n\n            `}`\n\n            `if` `(SmartHeatingStopEventTypeEnum.SUCCESS == event.getType()) {`\n\n                `LogUtils.dTag(TAG,` `\"observeStartSmartCook success\"``);`\n\n                `mFinishReceived =` `true``;`\n\n                `FileHelper.getInstance().log(``\"Main\"``,``\"4\"``);`\n\n                `WakeLockUtil.getInstance().releaseWakeLock();`\n\n                `return``;`\n\n            `}`\n\n        `});`\n\n        `LiveEventBus.get(SMART_HEAT_FINISH_RESULT_EVENT, SmartHeatingFinishResultEvent.``class``).observe(``this``, event -> {`\n\n            `LogUtils.dTag(TAG,` `\"observeStartSmartCook \"` `+ (``null` `== event ?` `\"null\"` `: event.toString()));`\n\n            `if` `(``null` `== event) {`\n\n                `return``;`\n\n            `}`\n\n            `if` `(SmartHeatingFinishEventTypeEnum.DONE == event.getType()) {`\n\n                `LogUtils.dTag(TAG,` `\"observeStartSmartCook success\"``);`\n\n                `mFinishReceived =` `true``;`\n\n                `FileHelper.getInstance().log(``\"Main\"``,``\"5\"``);`\n\n                `WakeLockUtil.getInstance().releaseWakeLock();`\n\n                `return``;`\n\n            `}`\n\n        `});`\n\n        `LiveEventBus.get(DOOR_OPEN, DoorOpenEvent.``class``).observe(``this``, doorOpenEvent -> {`\n\n            `if` `(MicrowaveHeatDataDto.getInstance().isHeatFinished()) {`\n\n                `//炉门打开 非烹饪状态才需要获取屏幕锁`\n\n                `WakeLockUtil.acquireWakeLock(ConsumeMainActivity.``this``,` `\"dooropen\"``);`\n\n`//                mScreenProtectHandle.getWakeLock();`\n\n            `}`\n\n        `});`\n\n        `LiveEventBus.get(DOOR_CLOSED, DoorCloseEvent.``class``).observe(``this``, doorOpenEvent -> {`\n\n`//            if (MicrowaveHeatDataDto.getInstance().isHeatFinished()) {`\n\n`//                //炉门关闭 非烹饪状态才需要释放屏幕锁`\n\n`//                mScreenProtectHandle.releaseWakeLock();`\n\n`//            }`\n\n        `});`\n\n        `//扫码时发现设备锁定`\n\n        `LiveEventBus.get(SCAN_CHECK_LOCKED, CheckLockedEvent.``class``).observe(``this``, event -> {`\n\n            `YzDialogUtil.showLockDialog(event.getContent());`\n\n        `});`\n\n        `//主动下发`\n\n        `LiveEventBus.get(MQTT_LOCKED, MqttLockedEvent.``class``).observe(``this``, event -> {`\n\n            `//不是加热 返回首页`\n\n            `if` `(!WdcDeviceUtil.isHeating()) {`\n\n                `ActivityUtils.finishToActivity(ConsumeMainActivity.``class``,` `false``);`\n\n                `YzDialogUtil.showLockDialog(event.getContent());`\n\n            `}`\n\n        `});`\n\n        `//网络连接通知`\n\n        `LiveEventBus.get(CommEvent.NET_WORK_CONNECTED, NetConnected.``class``).observe(``this``,` `new` `Observer<NetConnected>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(NetConnected netConnected) {`\n\n                `mViewModel.log(``\"net work connected\"``);`\n\n                `ThreadUtils.getMainHandler().postDelayed(``new` `Runnable() {`\n\n                    `@Override`\n\n                    `public` `void` `run() {`\n\n                        `mViewModel.updateCareModeSetting();`\n\n                    `}`\n\n                `},` `2000``);`\n\n            `}`\n\n        `});`\n\n        `//app端下发切换关怀模式指令`\n\n        `LiveEventBus.get(CARE_MODE_CHANGE_EVENT, CareModeChangeEvent.``class``).observe(``this``,` `new` `Observer<CareModeChangeEvent>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(CareModeChangeEvent careModeChangeEvent) {`\n\n                `mViewModel.log(``\"CARE_MODE_CHANGE_EVENT receive careModeSwitch=\"` `+ YZValueUtil.logValue(careModeChangeEvent.getCareModeSwitch()));`\n\n                `Boolean careModeSwitch = careModeChangeEvent.getCareModeSwitch();`\n\n                `if` `(``null` `== careModeSwitch) {`\n\n                    `mViewModel.log(``\"CARE_MODE_CHANGE_EVENT careModeSwitch=null do nothing\"``);`\n\n                    `return``;`\n\n                `}`\n\n                `if` `(CookHandler.isInCookingPage()) {`\n\n                    `mViewModel.log(``\"CARE_MODE_CHANGE_EVENT in cooking page->>do later\"``);`\n\n                    `mViewModel.getSwitchToCareModeLiveData().postValue(careModeSwitch);`\n\n                `}` `else` `{`\n\n                    `mViewModel.doSwitchToCareModeFromOrder(careModeSwitch);`\n\n                `}`\n\n            `}`\n\n        `});`\n\n        `//app端下发升级apk指令`\n\n        `LiveEventBus.get(FIRMWARE_UPGRADE_CONFIRM_EVENT, FirmwareUpgradeConfirmEvent.``class``).observe(``this``,` `new` `Observer<FirmwareUpgradeConfirmEvent>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(FirmwareUpgradeConfirmEvent firmwareUpgradeConfirmEvent) {`\n\n                `mViewModel.log(``\"FIRMWARE_UPGRADE_CONFIRM_EVENT receive firmwareType=\"` `+ YZValueUtil.logValue(firmwareUpgradeConfirmEvent.getFirmwareType()) +` `\"  version=\"` `+ YZValueUtil.logValue(firmwareUpgradeConfirmEvent.getFirmwareVersion()));`\n\n                `if` `(!BuildConfig.apk_firmware_model.equals(firmwareUpgradeConfirmEvent.getFirmwareType())) {`\n\n                    `mViewModel.log(``\"FIRMWARE_UPGRADE_CONFIRM_EVENT receive not apk order->>do nothing\"``);`\n\n                    `return``;`\n\n                `}`\n\n                `mViewModel.doUpdateApkFromOrder(firmwareUpgradeConfirmEvent.getFirmwareVersion());`\n\n            `}`\n\n        `});`\n\n        `mViewModel.getSwitchToCareModeLiveData().observe(``this``,` `new` `Observer<Boolean>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(Boolean switchToCare) {`\n\n                `if` `(``null` `== switchToCare) {`\n\n                    `mViewModel.log(``\"back home SwitchToCareMode null\"``);`\n\n                    `return``;`\n\n                `}`\n\n                `mViewModel.log(String.format(``\"back home SwitchToCareMode %s\"``, switchToCare));`\n\n                `mViewModel.doSwitchToCareModeFromOrder(switchToCare);`\n\n            `}`\n\n        `});`\n\n        `mViewModel.getIsRegistrationRealLiveData().observe(``this``,` `new` `Observer<Boolean>() {`\n\n            `@Override`\n\n            `public` `void` `onChanged(Boolean isRegistration) {`\n\n                `LogUtils.dTag(TAG,` `\"check real isRegistration=\"` `+ ((``null` `== isRegistration) ?` `\"null\"` `: isRegistration));`\n\n                `if` `(``null` `== isRegistration) {`\n\n                    `return``;`\n\n                `}`\n\n                `if` `(!isRegistration) {`\n\n                    `if` `(YZBizModeUtil.isCareMode()) {`\n\n                        `LogUtils.i(``\"主页关怀版本退出\"``);`\n\n                        `YZBizModeUtil.exitCareMode();`\n\n                    `}`\n\n                `}`\n\n            `}`\n\n        `});`\n\n    `}`\n\n    `private` `void` `showErrorDialog(ErrorReportEvent errorReportEvent, String saleAfterPhone) {`\n\n        `Activity topActivity = ActivityUtils.getTopActivity();`\n\n        `DialogHelper.showDialog(topActivity,` `new` `ConsumeCommonDialog.Builder(topActivity)`\n\n                `.setContent(StringUtils.format(getString(R.string.error_text), errorReportEvent.getContent(), saleAfterPhone))`\n\n                `.setClickCallBack(R.string.report_log, R.string.cancel_suanle,` `new` `ConsumeCommonDialog.OnClickListen() {`\n\n                    `@Override`\n\n                    `public` `void` `onConfirmListen(BasePopupView dialog, View view) {`\n\n                        `dialog.dismiss();`\n\n                        `ActivityUtils.finishToActivity(ConsumeMainActivity.``class``,` `false``);`\n\n                        `mHasDisMissErrorDialog =` `true``;`\n\n                        `mViewModel.reportLog(errorReportEvent.getContent(), errorReportEvent.getUserId(), errorReportEvent.getSchemeCode());`\n\n                    `}`\n\n                    `@Override`\n\n                    `public` `void` `onCancelListen(BasePopupView dialog, View view) {`\n\n                        `dialog.dismiss();`\n\n                        `ActivityUtils.finishToActivity(ConsumeMainActivity.``class``,` `false``);`\n\n                        `mHasDisMissErrorDialog =` `true``;`\n\n                    `}`\n\n                `}).build(),` `false``);`\n\n        `mHasDisMissErrorDialog =` `false``;`\n\n    `}`\n\n    `/**`\n\n     `* 判断锁定对话框 是否检查 显示`\n\n     `*/`\n\n    `private` `void` `judgeLockDialog() {`\n\n        `if` `(mFinishReceived) {`\n\n            `mViewModel.checkShowLockDialog();`\n\n            `mFinishReceived =` `false``;`\n\n        `}`\n\n    `}`\n\n    `private` `void` `addNetWorkObserver() {`\n\n        `LogUtils.d(``\"添加网络监听\"``);`\n\n        `getLifecycle().addObserver(mNetworkStateListenHandle);`\n\n    `}`\n\n    `/**`\n\n     `* 正在开发中提示`\n\n     `*/`\n\n    `public` `void` `onDeveloping(View v) {`\n\n        `YzToastUtil.showCommonToast(getString(R.string.is_developing));`\n\n    `}`\n\n    `public` `void` `onTest(View v) {`\n\n`//        YzToastUtil.showCommonToast(\"ui…\");`\n\n`//        FastBlur fastBlur = new FastBlur();`\n\n`//        basePopupView = new XPopup.Builder(ActivityUtils.getTopActivity())`\n\n`//                .popupAnimation(PopupAnimation.ScaleAlphaFromCenter)`\n\n`//                .dismissOnTouchOutside(true)`\n\n`//                .isDestroyOnDismiss(true)`\n\n`//                .asCustom(new MenuSelectDialog(ActivityUtils.getTopActivity(), this, mViewModel.mTurnTableListLiveData.getValue()));`\n\n`//        basePopupView.getPopupContentView().setBackground(new BitmapDrawable(getResources(), fastBlur.applyBlur(this, view)));`\n\n`//        basePopupView.show();`\n\n    `}`\n\n    `@Override`\n\n    `protected` `boolean` `isShowAvatar() {`\n\n        `AvatarViewUtils.getInstance().setChatVisiable(``false``);`\n\n        `boolean` `isCareModel = SPUtils.getInstance().getBoolean(SpConstant.IS_CARE_MODEL,` `false``);`\n\n        `AvatarStatusManager.getInstance().setBigMiddleVisiable(``false``,` `false``);`\n\n        `return` `!isCareModel;`\n\n    `}`\n\n    `private` `long` `downtime = -1L;`\n\n    `private` `static` `Handler handler =` `new` `Handler(Looper.getMainLooper());`\n\n    `@Override`\n\n    `public` `boolean` `dispatchTouchEvent(MotionEvent ev) {`\n\n        `if` `(AvatarStatusManager.getInstance().isTouchAvatar(ev.getRawX(), ev.getRawY())) {`\n\n            `if` `(ev.getAction() == MotionEvent.ACTION_DOWN) {`\n\n                `downtime = System.currentTimeMillis();`\n\n                `handler.removeCallbacksAndMessages(``null``);`\n\n                `handler.postDelayed(runnable,` `500``);`\n\n            `}` `else` `if` `(ev.getAction() == MotionEvent.ACTION_MOVE) {`\n\n                `handler.removeCallbacksAndMessages(``null``);`\n\n            `}` `else` `if` `(ev.getAction() == MotionEvent.ACTION_UP) {`\n\n                `if` `(downtime >` `0` `&& System.currentTimeMillis() - downtime <` `500``) {`\n\n                    `handler.removeCallbacksAndMessages(``null``);`\n\n                `}`\n\n                `downtime = -``1``;`\n\n            `}`\n\n        `}`\n\n        `return` `super``.dispatchTouchEvent(ev);`\n\n    `}`\n\n    `private` `final` `Runnable runnable =` `new` `Runnable() {`\n\n        `@Override`\n\n        `public` `void` `run() {`\n\n            `if` `(AvatarManager.getInstance().avatarList.size() <=` `1``) {`\n\n                `AvatarManager.getInstance().playDynamic(``\"抱歉，您没有可以切换的虚拟人角色\"``,` `false``,` `null``);`\n\n            `}` `else` `{`\n\n                `ChangeAvatarUtils.getInstance().show();`\n\n            `}`\n\n        `}`\n\n    `};`\n\n    `@Override`\n\n    `protected` `void` `onPause() {`\n\n        `super``.onPause();`\n\n        `AvatarViewUtils.getInstance().setVisiable(``false``);`\n\n    `}`\n\n`}`\n\nConsumeMainActivity表达的是：\n\n**具体分析如下：**\n\n> **导入各种类**\n\n*   先导入一些列常量，来自于com.yingzi.wdcservice.common.constants.CommEvent类\n    \n*   再导入一系列Android的类和接口，详细分析如下：  \n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    14\n    \n    15\n    \n    `android.annotation.SuppressLint：用于指定特定元素（如类、方法或字段）被标记为已过时、不推荐使用或具有其他特殊属性。`\n    \n    `android.app.Activity：表示Android应用程序中的一个活动（Activity），即用户界面的一个单独屏幕。`\n    \n    `android.content.Context：提供访问应用程序资源和服务的接口。`\n    \n    `android.content.Intent：用于在Android应用程序组件之间传递消息和执行操作。`\n    \n    `android.media.MediaRouter：用于管理多媒体路由的类，例如音频输出设备。`\n    \n    `android.os.Bundle：用于在Android组件之间传递数据的容器。`\n    \n    `android.os.Handler：用于在特定线程上执行代码的工具类。`\n    \n    `android.os.Looper：用于管理线程消息循环的类。`\n    \n    `android.provider.Settings：提供访问设备设置的接口。`\n    \n    `android.text.TextUtils：提供处理文本字符串的实用方法。`\n    \n    `android.util.Log：用于在Android应用程序中记录日志消息的类。`\n    \n    `android.view.Display：表示Android设备的显示屏幕。`\n    \n    `android.view.MotionEvent：表示触摸事件的类。`\n    \n    `android.view.View：表示Android应用程序中的一个视图元素。`\n    \n    `android.widget.Toast：用于在屏幕上显示短暂消息的类。`\n    \n*   再导入一系列AndroidX库中的类和接口，详细分析如下：\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    `androidx.activity.result.ActivityResult：表示一个活动结果，用于在活动之间传递数据或状态。`\n    \n    `androidx.activity.result.ActivityResultCallback：用于处理活动结果的回调接口。`\n    \n    `androidx.activity.result.ActivityResultLauncher：用于启动活动并接收其结果的接口。`\n    \n    `androidx.activity.result.contract.ActivityResultContracts：定义了一组预定义的活动结果契约，用于启动活动并接收其结果。`\n    \n    `androidx.annotation.NonNull：用于标记参数、字段或方法返回值不允许为空的注解。`\n    \n    `androidx.annotation.Nullable：用于标记参数、字段或方法返回值可以为空的注解。`\n    \n    `androidx.fragment.app.FragmentManager：用于管理Fragment的类，包括添加、替换和移除Fragment等操作。`\n    \n    `androidx.fragment.app.FragmentTransaction：用于执行Fragment事务的类，包括添加、替换和移除Fragment等操作。`\n    \n    `androidx.lifecycle.Observer：用于观察LiveData对象的变化并作出相应响应的接口。`\n    \n    androidx.activity.result的使用分析如下：\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    14\n    \n    15\n    \n    16\n    \n    17\n    \n    18\n    \n    19\n    \n    20\n    \n    21\n    \n    22\n    \n    23\n    \n    24\n    \n    25\n    \n    26\n    \n    27\n    \n    28\n    \n    29\n    \n    30\n    \n    31\n    \n    32\n    \n    33\n    \n    34\n    \n    35\n    \n    36\n    \n    37\n    \n    38\n    \n    39\n    \n    40\n    \n    41\n    \n    42\n    \n    43\n    \n    `androidx.activity.result是AndroidX库中提供的一个用于处理活动结果的模块。它提供了一组类和接口，用于启动活动并接收其结果。`\n    \n    `要使用androidx.activity.result模块，可以按照以下步骤进行操作：`\n    \n    `1、在项目的build.gradle文件中，确保已添加AndroidX库的依赖。例如：`\n    \n        `dependencies {`\n    \n            `implementation 'androidx.appcompat:appcompat:1.3.0'`\n    \n        `// 其他依赖项`\n    \n        `}`\n    \n    `2、在需要使用androidx.activity.result的类中，导入相关的类和接口。例如：`\n    \n        `import androidx.activity.result.ActivityResult;`\n    \n        `import androidx.activity.result.ActivityResultCallback;`\n    \n        `import androidx.activity.result.ActivityResultLauncher;`\n    \n        `import androidx.activity.result.contract.ActivityResultContracts;`\n    \n    `3、创建一个ActivityResultLauncher对象，用于启动活动并接收其结果。例如：`\n    \n        `ActivityResultLauncher<Intent> launcher = registerForActivityResult(`\n    \n            `new ActivityResultContracts.StartActivityForResult(),`\n    \n            `new ActivityResultCallback<ActivityResult>() {`\n    \n                `@Override`\n    \n                `public void onActivityResult(ActivityResult result) {`\n    \n                    `// 处理活动结果`\n    \n                    `if (result.getResultCode() == Activity.RESULT_OK) {`\n    \n                        `Intent data = result.getData();`\n    \n                        `// 处理返回的数据`\n    \n                    `}`\n    \n                `}`\n    \n            `}`\n    \n        `);`\n    \n    `4、使用ActivityResultLauncher对象启动活动。例如：`\n    \n        `Intent intent = new Intent(this, MyActivity.class);`\n    \n        `launcher.launch(intent);`\n    \n    `5、在活动的onActivityResult()方法中处理活动结果。例如：`\n    \n        `@Override`\n    \n        `protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {`\n    \n            `super.onActivityResult(requestCode, resultCode, data);`\n    \n            `if (requestCode == MY_REQUEST_CODE && resultCode == Activity.RESULT_OK) {`\n    \n                `// 处理返回的数据`\n    \n            `}`\n    \n        `}`\n    \n    `通过以上步骤，你可以使用androidx.activity.result模块来启动活动并接收其结果。这种方式相比传统的startActivityForResult()方法更加简洁和易用，并且提供了更好的可读性和可维护性。`\n    \n*   再导入了一系列的Java类和接口，详细分析如下：\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    `com.blankj.utilcode.util.ActivityUtils：提供了一些与Activity相关的实用方法，例如启动Activity、获取栈顶Activity等。`\n    \n    `com.blankj.utilcode.util.LogUtils：用于在应用程序中记录日志消息的工具类。`\n    \n    `com.blankj.utilcode.util.NetworkUtils：提供了一些与网络连接状态相关的实用方法，例如检查网络是否可用、获取网络类型等。`\n    \n    `com.blankj.utilcode.util.SPUtils：用于简化SharedPreferences操作的工具类，可以方便地读取和写入数据。`\n    \n    `com.blankj.utilcode.util.StringUtils：提供了一些字符串处理的实用方法，例如判断字符串是否为空、去除空格等。`\n    \n    `com.blankj.utilcode.util.ThreadUtils：提供了一些线程操作的实用方法，例如在主线程执行任务、在子线程执行任务等。`\n    \n    `com.blankj.utilcode.util.Utils：提供了一些通用的工具方法，例如初始化工具类、获取应用程序上下文等。`\n    \n    `com.bumptech.glide.Glide：一个流行的图片加载库，用于加载和显示图片。`\n    \n    `com.blankj.utilcode-----Android工具类blankj，了解其用法链接如下：`\n    \n    `[https://blog.csdn.net/Crystal_xing/article/details/82798241](https://blog.csdn.net/Crystal_xing/article/details/82798241)`\n    \n    `[https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md](https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md)`\n    \n    `通过导入这些类和接口，可以在代码中使用它们提供的功能和特性。这些类和接口是从不同的库中导入的，用于简化开发过程和提供更多的工具和功能。`\n    \n*   再导入一些yzbase相关的库\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    `com.example.yzbase.constant.SpConstant：定义了一些SharedPreferences的常量。`\n    \n    `com.example.yzbase.event.ErrorReportEvent：表示错误报告事件的类。`\n    \n    `com.example.yzbase.event.MqttEvent：表示MQTT事件的类。`\n    \n    `com.example.yzbase.event.SDKInitEvent：表示SDK初始化事件的类。`\n    \n    `com.example.yzbase.event.ToastEvent：表示Toast消息事件的类。`\n    \n    `com.example.yzbase.network.res.ParameterResDto：表示参数响应数据的类。`\n    \n    `com.example.yzbase.ui.dialog.DialogHelper：用于显示对话框的辅助类。`\n    \n    `com.example.yzbase.utils.FileHelper：提供了一些文件操作的实用方法，例如读取文件、写入文件等。`\n    \n    `com.example.yzbase.utils.WakeLockUtil：提供了一些与唤醒锁相关的实用方法，用于控制设备的唤醒状态。`\n    \n    `com.example.yzbase.utils.YZDeviceUtil：提供了一些与设备相关的实用方法，例如获取设备信息、检查设备状态等。`\n    \n    `通过导入这些类，你可以在代码中使用它们提供的功能和特性。这些类是从com.example.yzbase包中导入的，可能是你自己的项目中定义的类，用于实现特定的功能或提供特定的工具方法。`\n    \n*   再导入com.yingzi.consume相关的库\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    14\n    \n    15\n    \n    16\n    \n    17\n    \n    18\n    \n    19\n    \n    20\n    \n    21\n    \n    22\n    \n    23\n    \n    24\n    \n    `com.yingzi.consume.reciver.NetConnected：表示网络连接状态的接收器类，可能用于监听网络连接状态的变化。`\n    \n    `com.yingzi.consume.utils.CookHandler：提供了一些与烹饪处理相关的实用方法，可能用于处理烹饪相关的逻辑和操作。`\n    \n    `com.yingzi.consume.utils.GsonUtils：提供了一些与Gson库相关的实用方法，可能用于处理JSON数据的序列化和反序列化操作。`\n    \n    `com.yingzi.consume.R：表示资源文件，可能包含应用程序中使用的各种资源，如布局文件、图像文件等。`\n    \n    `com.yingzi.consume.aiui.AiuiBizHelper：提供了一些与AIUI业务相关的实用方法，可能用于处理AIUI相关的逻辑和操作。`\n    \n    `com.yingzi.consume.aiui.AvatarInstructUtils：提供了一些与Avatar指令相关的实用方法，可能用于处理Avatar指令的解析和执行。`\n    \n    `com.yingzi.consume.base.ConsumeBaseActivity：表示应用程序中的基础Activity类，可能包含一些通用的功能和方法。`\n    \n    `com.yingzi.consume.common.ScreenChooseObserver：表示屏幕选择观察者类，可能用于监听屏幕选择的变化。`\n    \n    `com.yingzi.consume.constant.IntentConstants：定义了一些Intent常量，可能用于在应用程序中传递数据和信息。`\n    \n    `com.yingzi.consume.databinding.ConsumeActivityMainV2Binding：表示Data Binding生成的用于绑定视图的类。`\n    \n    `com.yingzi.consume.dialog.SecondScreenDialog：表示第二屏对话框类，可能用于显示第二屏的相关内容。`\n    \n    `com.yingzi.consume.reciver.NetworkStateListenHandle：表示网络状态监听处理类，可能用于监听网络状态的变化。`\n    \n    `com.yingzi.consume.ui.activity.collect.ConsumeCollectActivity：表示消费收集活动类，可能用于展示和管理消费数据的收集。`\n    \n    `com.yingzi.consume.ui.dialog.ConsumeCommonDialog：表示通用对话框类，可能用于显示应用程序中的通用对话框。`\n    \n    `com.yingzi.consume.ui.fragment.home.CareMainFragment：表示关注主页片段类，可能用于展示和管理关注的内容。`\n    \n    `com.yingzi.consume.ui.fragment.home.MainFragment：表示主页片段类，可能用于展示和管理应用程序的主页内容。`\n    \n    `com.yingzi.consume.ui.viewmodel.ConsumeMainViewV2Model：表示消费主视图V2模型类，可能用于处理消费主视图的逻辑和数据。`\n    \n    `com.yingzi.consume.ui.viewmodel.GuideViewModel：表示引导视图模型类，可能用于处理应用程序的引导逻辑和数据。`\n    \n    `com.yingzi.consume.ui.widgets.operation.OperationBean：表示操作项的实体类，可能用于描述和管理操作项的信息。`\n    \n    `com.yingzi.consume.utils.ConsumeUpdateUtil：提供了一些与消费更新相关的实用方法，可能用于检查和执行消费更新。`\n    \n    `com.yingzi.consume.utils.YZBizModeUtil：提供了一些与业务模式相关的实用方法，可能用于处理业务模式的逻辑和操作。`\n    \n    `com.yingzi.consume.utils.YZValueUtil：提供了一些与值处理相关的实用方法，可能用于处理值的转换和计算。`\n    \n    `com.yingzi.consume.utils.YzDialogUtil：提供了一些与对话框相关的实用方法，可能用于显示和管理对话框。`\n    \n    `com.yingzi.consume.utils.YzToastUtil：提供了一些与Toast消息相关的实用方法，可能用于显示和管理Toast消息。`\n    \n*   再导入com.yingzi.wdcservice相关的库  \n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    14\n    \n    15\n    \n    16\n    \n    17\n    \n    18\n    \n    19\n    \n    20\n    \n    21\n    \n    22\n    \n    23\n    \n    24\n    \n    25\n    \n    26\n    \n    27\n    \n    28\n    \n    `com.yingzi.wdcservice.BuildConfig：表示构建配置类，可能包含一些与构建相关的配置信息。`\n    \n    `com.yingzi.wdcservice.common.constants.CommEvent：表示通用事件常量类，可能包含一些应用程序中使用的通用事件常量。`\n    \n    `com.yingzi.wdcservice.common.enums.HeatState：表示加热状态枚举类，可能包含一些与加热状态相关的枚举值。`\n    \n    `com.yingzi.wdcservice.common.enums.SmartHeatingFinishEventTypeEnum：表示智能加热完成事件类型枚举类，可能包含一些与智能加热完成事件类型相关的枚举值。`\n    \n    `com.yingzi.wdcservice.common.enums.SmartHeatingStartEventTypeEnum：表示智能加热开始事件类型枚举类，可能包含一些与智能加热开始事件类型相关的枚举值。`\n    \n    `com.yingzi.wdcservice.common.enums.SmartHeatingStopEventTypeEnum：表示智能加热停止事件类型枚举类，可能包含一些与智能加热停止事件类型相关的枚举值。`\n    \n    `com.yingzi.wdcservice.common.utils.WdcDeviceUtil：提供了一些与设备相关的实用方法，可能用于处理设备的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.context.SmartHeatingContext：表示智能加热上下文类，可能用于管理智能加热的上下文信息。`\n    \n    `com.yingzi.wdcservice.noticeview.callback.OnDataCallBack：表示数据回调接口，可能用于处理数据回调的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.CareModeChangeEvent：表示关注模式变化事件类，可能用于处理关注模式变化事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.CheckLockedEvent：表示检查锁定事件类，可能用于处理检查锁定事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.CookEvent：表示烹饪事件类，可能用于处理烹饪事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.CookingStopEvent：表示烹饪停止事件类，可能用于处理烹饪停止事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.DeviceRegisterSuccessEvent：表示设备注册成功事件类，可能用于处理设备注册成功事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.DoorCloseEvent：表示门关闭事件类，可能用于处理门关闭事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.DoorOpenEvent：表示门打开事件类，可能用于处理门打开事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.FirmwareUpgradeConfirmEvent：表示固件升级确认事件类，可能用于处理固件升级确认事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.MicrowaveAdminBindEvent：表示微波炉管理员绑定事件类，可能用于处理微波炉管理员绑定事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.MqttLockedEvent：表示MQTT锁定事件类，可能用于处理MQTT锁定事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.PayQrInvalidEvent：表示支付二维码无效事件类，可能用于处理支付二维码无效事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.SmartHeatingFinishResultEvent：表示智能加热完成结果事件类，可能用于处理智能加热完成结果事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.SmartHeatingStartResultEvent：表示智能加热开始结果事件类，可能用于处理智能加热开始结果事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.SmartHeatingStopResultEvent：表示智能加热停止结果事件类，可能用于处理智能加热停止结果事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.noticeview.event.SwitchModelEvent：表示切换模式事件类，可能用于处理切换模式事件的逻辑和操作。`\n    \n    `com.yingzi.wdcservice.service.dto.MicrowaveHeatDataDto：表示微波炉加热数据传输对象类，可能用于传输微波炉加热数据。`\n    \n    `com.yingzi.wdcservice.service.listener.MicrowaveTwoInOneModuleReportEventListener：表示微波炉二合一模块报告事件监听器类，可能用于监听微波炉二合一模块的报告事件。`\n    \n    `com.yingzi.wdcservice.statemachine.enums.MicrowaveState：表示微波炉状态枚举类，可能包含一些与微波炉状态相关的枚举值。`\n    \n    `com.yingzi.wdcservice.update.APKUpdateHelper：表示APK更新助手类，可能用于处理APK更新的逻辑和操作。`\n    \n*   AIUI相关的库\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    `com.yingzi.consume.utils.YZBizModeUtil：提供了一些与业务模式相关的实用方法，可能用于处理业务模式的逻辑和操作。`\n    \n    `com.yingzi.consume.utils.YZValueUtil：提供了一些与值处理相关的实用方法，可能用于处理值的转换和计算。`\n    \n    `com.yingzi.consume.utils.YzDialogUtil：提供了一些与对话框相关的实用方法，可能用于显示和管理对话框。`\n    \n    `com.yingzi.consume.utils.YzToastUtil：提供了一些与Toast消息相关的实用方法，可能用于显示和管理Toast消息。`\n    \n*   其他的库\n    \n     展开源码\n    \n    [expand source](#)[?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    `java.util.concurrent.TimeUnit：表示时间单位类，用于表示时间的单位，例如秒、毫秒等。`\n    \n    `javax.inject.Inject：表示依赖注入注解，用于标记需要进行依赖注入的字段、构造函数或方法。`\n    \n    `dagger.hilt.android.AndroidEntryPoint：表示Android入口点注解，用于标记Android组件（如Activity、Fragment）作为Hilt的入口点，以便进行依赖注入。`\n    \n\n> **分析ConsumeMa****inActivity  \n> **\n\n[?](#)\n\n1\n\n`public` `class` `ConsumeMainActivity` `extends` `ConsumeBaseActivity<ConsumeActivityMainV2Binding, ConsumeMainViewV2Model> {}`\n\n这段代码表达的是：  \n\n1.  这段代码定义了一个名为ConsumeMainActivity的类，它继承自ConsumeBaseActivity<ConsumeActivityMainV2Binding, ConsumeMainViewV2Model>。  \n    在Java中，使用关键字extends来实现类的继承。【通过继承，子类可以继承父类的属性和方法，并可以添加自己的属性和方法】\n2.  在这个例子中，ConsumeMainActivity继承自ConsumeBaseActivity<ConsumeActivityMainV2Binding, ConsumeMainViewV2Model>，  \n    意味着ConsumeMainActivity将拥有ConsumeBaseActivity类中的属性和方法，并且可以使用ConsumeActivityMainV2Binding和ConsumeMainViewV2Model作为泛型参数。\n3.  需要注意的是，ConsumeBaseActivity、ConsumeActivityMainV2Binding和ConsumeMainViewV2Model应该是你项目中定义的类或接口。通过继承和泛型参数的使用，可以实现代码的重用和灵活性。\n\n而ConsumeBaseActivity继承自BaseActivity，BaseActivity继承自AppCompatActivity\n\nAppCompatActivity是Android系统自带类，BaseActivity表达内容为：\n\n  \n\n1.  导入所需的类和包。\n2.  声明了一个泛型类型参数T和V，分别表示ViewBinding和ViewModel的类型。\n3.  定义了一些成员变量，如mBinding（表示ViewBinding对象）、mViewModel（表示ViewModel对象）、tabBarBinding（表示工具栏的ViewBinding对象）等。\n4.  初始化ViewBinding和ViewModel：  \n    a、在onCreate方法中，调用invokeVBVM()方法来初始化ViewBinding和ViewModel。  \n    b、invokeVBVM()方法使用反射获取泛型参数的具体类型，并使用ViewBinding.inflate()方法和ViewModelProvider来创建ViewBinding和ViewModel对象。\n5.  初始化界面、数据和事件监听：  \n    a、在onCreate方法中，调用initView()、initData()和initListen()方法来初始化界面、数据和事件监听。  \n    b、initView()方法用于初始化界面元素，如设置布局、查找和绑定视图等。  \n    c、initData()方法用于初始化数据，可以在子类中重写该方法来执行特定的数据初始化操作。  \n    d、initListen()方法用于初始化事件监听器，如按钮点击事件、列表项点击事件等。  \n    e、invokeClickListen()方法用于递归遍历ViewGroup中的所有子视图，并为每个子视图设置点击事件监听器。\n6.  生命周期方法：  \n    a、onDestroy方法：在Activity销毁时被调用，用于释放资源和进行清理操作。在这里，将mBinding置为null，以释放对ViewBinding的引用。  \n    b、onResume方法：在Activity从后台切换到前台时被调用，可以在子类中重写该方法来执行特定的逻辑。  \n    c、onPause方法：在Activity从前台切换到后台时被调用，可以在子类中重写该方法来执行特定的逻辑。\n7.  工具栏相关方法：  \n    a、showToolBar()方法：用于确定是否显示工具栏，默认返回false。可以在子类中重写该方法来决定是否显示工具栏。  \n    b、setTitle()方法：用于设置工具栏的标题。  \n    c、setRightAction()方法：用于设置工具栏右侧的操作按钮，包括文本、颜色和点击事件。\n8.  辅助方法：  \n    a、backgroundView()方法：用于返回背景视图，可以在子类中重写该方法来自定义背景视图。  \n    b、emptyView()方法：用于返回空视图，可以在子类中重写该方法来自定义空视图。  \n    c、showEmptyView()方法：用于显示空视图。  \n    d、showContentView()方法：用于显示内容视图。\n9.  通过继承BaseActivity，可以减少重复代码，并提供一些通用的功能和方法，以便更方便地开发和管理Android应用中的Activity。\n\nConsumeBaseActivity表达内容为：\n\n1.  android.os.Bundle：用于处理活动的状态信息。  \n    android.view.View：用于处理视图相关的操作。  \n    android.widget.Toast：用于显示短暂的提示消息。  \n    androidx.annotation.Nullable：用于标注可为空的元素。  \n    androidx.viewbinding.ViewBinding：用于绑定视图和布局文件。  \n    com.blankj.utilcode.util.ActivityUtils：提供了与活动相关的实用方法。  \n    com.example.yzbase.ui.widget.SettingReturnButton：自定义的返回按钮小部件。  \n    com.yingzi.avatar.helper.AppContextHelper：提供了应用程序上下文的帮助类。  \n    com.yingzi.avatar.manager.AvatarManager：管理虚拟人的类。  \n    com.yingzi.avatar.status.AvatarStatusManager：管理虚拟人状态的类。  \n    com.yingzi.avatar.view.AvatarViewUtils：提供了操作虚拟人视图的实用方法。  \n    com.yingzi.avatar.voice.ChangeAvatarUtils：提供了切换虚拟人的实用方法。  \n    com.yingzi.avatar.voice.YZVoiceInteractionDialogUtil：提供了与语音交互对话框相关的实用方法。  \n    com.yingzi.consume.aiui.AiuiBizHelper：提供了与AIUI业务相关的实用方法。  \n    com.yingzi.consume.aiui.AvatarCommonUtils：提供了与虚拟人相关的实用方法。  \n    com.yingzi.consume.interf.IAIUIHandlerCallBack：定义了与AIUI处理相关的回调接口。  \n    com.yingzi.consume.ui.activity.ConsumeMainActivity：消费主页面的活动类。  \n    com.yingzi.consume.utils.AIUIHandler：处理AIUI的帮助类。  \n    com.yingzi.consume.utils.CookHandler：处理烹饪相关的帮助类。  \n    com.yingzi.consume.utils.YZBizModeUtil：处理业务模式的帮助类。\n2.  这是一个抽象类ConsumeBaseActivity，它继承自BaseActivity类。它有两个泛型类型参数T和V，分别限制为ViewBinding和ConsumeBaseViewModel的子类。\n3.  onCreate()方法：在这个方法中，调用了父类的onCreate()方法，并初始化了AIUI处理。\n4.  showFloatingWindow()方法：这个方法使用AvatarViewUtils实例来显示一个浮动窗口。它根据CookHandler.isInCookingPage()的返回值来确定是否在烹饪页面中显示浮动窗口。\n5.  onResume()方法：在这个方法中，首先关闭了返回按钮的浮动窗口，然后调用了showFloatingWindow()方法显示浮动窗口。接着，根据isShowAvatar()方法的返回值设置虚拟人视图的可见性，并将AvatarManager.getInstance().needWalk设置为isShowAvatar()的返回值。\n6.  onPause()方法：在这个方法中，关闭了语音交互对话框并取消与之关联的任何超时。\n7.  initAIUIHandler()方法：这是一个私有方法，它通过向生命周期添加观察者并提供IAIUIHandlerCallBack接口的实现来初始化AIUI处理。\n8.  showFloatingWindow()方法：这个方法使用AvatarViewUtils实例来显示一个浮动窗口。它根据CookHandler.isInCookingPage()的返回值来确定是否在烹饪页面中显示浮动窗口。\n9.  enableAIUIOnThisPage()方法：这个方法确定当前页面是否打开AIUI。它根据YZBizModeUtil.isCareMode()的返回值来确定是否打开AIUI。\n10.  showSkillsOnThisPage()方法：这个方法返回当前页面要显示的技能列表。它调用了AiuiBizHelper.defaultShowSkills()方法来获取默认的技能列表。\n11.  isDoDefaultSkillsThisPage()方法：这个方法确定当前页面是否处理默认技能。它返回一个布尔值，表示当前页面。\n12.  isShowAvatar()方法：这个方法确定当前页面是否显示虚拟人。它根据AvatarStatusManager.getInstance().isShowAvatar()的返回值来确定是否显示虚拟人。\n13.  doBizRecognizeResult()方法：这个方法处理业务界面的AIUI识别结果。它接收一些参数，包括技能类型、意图类型、意图、语音文本、回答和JSON数组。\n\n2.3. 设计稿适配页面\n------------\n\n参考文档：[http://tech.ipalfish.com/blog/2020/04/14/autosize/](http://tech.ipalfish.com/blog/2020/04/14/autosize/)\n\n2.4. 实现视图绑定\n-----------\n\n有两种方法实现，一种是Android自带的viewBinding，一种是使用第三方开源库Butter Knife，都是用于简化视图与代码事件的绑定过程，但其具体的用法、效果等等有一些区别，如下所示：\n\n*   依赖关系：ButterKnife 是一个第三方库，需要在项目中添加相应的依赖项。而 ViewBinding 是 Android 官方提供的功能，在 Android Gradle 插件 3.6.0 及更高版本中默认可用，无需额外的依赖。\n*   注解处理器 vs. 自动生成类：ButterKnife 使用注解处理器，在编译时生成绑定代码，通过注解来标记需要绑定的视图组件。而 ViewBinding 则是通过 Android Gradle 插件自动生成绑定类，无需使用注解。\n*   Null 安全性：ViewBinding 支持空安全（null safety），生成的绑定类中的视图组件都是可空类型，避免了空指针异常。而 ButterKnife 不具备空安全性，需要手动处理可能为空的视图组件。\n*   性能：由于 ButterKnife 使用注解处理器，在编译时生成绑定代码，因此在运行时绑定速度较快。而 ViewBinding 是在运行时通过反射来查找和绑定视图组件，稍微慢于 ButterKnife。\n*   功能和灵活性：ButterKnife 提供了更多的功能，如绑定点击事件、资源绑定等。它还可以与其他库（如 Dagger）结合使用。而 ViewBinding 主要用于视图绑定，不提供其他额外的功能。\n\n总体而言，ViewBinding 是 Android 官方推荐的视图绑定方式，具有空安全性和简单易用的特点。ButterKnife 则是一个功能更丰富的第三方库，适用于需要更多高级功能的项目。选择使用哪种方式取决于您的项目需求和个人偏好。\n\n### 2.4.1. viewBinding\n\n1.  确保您的项目使用了 Android Gradle 插件 3.6.0 或更高版本。在build.gradle中配置：  \n    \n    **build.gradle**\n    \n    [?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    `android{`\n    \n        `viewBinding{`\n    \n            `enabled = true`\n    \n        `}`\n    \n    `}`\n    \n2.  在布局文件中，确保每个需要绑定的视图组件都有一个唯一的 ID。例如，给一个 TextView 设置一个 ID：  \n    \n    **XML**\n    \n    [?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    `<``TextView`\n    \n        `android:id``=``\"@+id/myTextView\"`\n    \n        `android:layout_width``=``\"wrap_content\"`\n    \n        `android:layout_height``=``\"wrap_content\"`\n    \n        `android:text``=``\"Hello ViewBinding!\"` `/>`\n    \n    `<``Button`\n    \n        `android:id``=``\"@+id/btn_submit\"`\n    \n        `android:layout_width``=``\"wrap_content\"`\n    \n        `android:layout_height``=``\"wrap_content\"`\n    \n        `android:text``=``\"@string/submit\"` `/>`\n    \n3.  在对应的 Activity 或 Fragment 中启用 ViewBinding，在类的顶部添加以下代码：\n    \n    **MainActivity.java**\n    \n    [?](#)\n    \n    1\n    \n    `import` `com.example.myapp.databinding.ActivityMainBinding;`\n    \n4.  在 Activity 或 Fragment 的 onCreate() 方法中，使用 setContentView() 方法来设置布局，并通过 ActivityMainBinding.inflate() 或 FragmentMainBinding.inflate() 方法来获取绑定实例：\n    \n    **MainActivity.java**\n    \n    [?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    14\n    \n    15\n    \n    16\n    \n    17\n    \n    18\n    \n    19\n    \n    20\n    \n    21\n    \n    22\n    \n    23\n    \n    `protected` `void` `onCreate(Bundle savedInstanceState) {`\n    \n         `super``.onCreate(savedInstanceState);`\n    \n         `binding = ActivityMainBinding.inflate(getLayoutInflater());`\n    \n         `setContentView(binding.getRoot());`\n    \n         `// 现在可以通过 binding 来访问布局中的视图组件`\n    \n         `binding.myTextView.setText(``\"Hello ViewBinding!\"``);`\n    \n         `// 设置点击事件监听器，进行页面跳转`\n    \n         `binding.btnSubmit.setOnClickListener(``new` `View.OnClickListener() {`\n    \n             `@Override`\n    \n             `public` `void` `onClick(View v) {`\n    \n                 `// 创建 Intent 对象，指定目标 Activity`\n    \n                 `Intent intent =` `new` `Intent(MainActivity.``this``, SecondActivity.``class``);`\n    \n                 `// 可选：传递数据到目标 Activity`\n    \n                 `intent.putExtra(``\"key\"``,` `\"value\"``);`\n    \n                 `// 启动目标 Activity`\n    \n                 `startActivity(intent);`\n    \n               `}`\n    \n         `});`\n    \n    `}`\n    \n5.  现在，您可以使用 binding 对象来访问布局文件中的视图组件，无需手动调用 findViewById() 方法。例如，通过 binding.myTextView 来访问布局中的 TextView。\n\n这样，您就成功地使用了 ViewBinding 进行视图绑定。通过 ViewBinding，您可以获得类型安全的视图访问，并且无需手动进行视图组件的查找和转换操作，提高了代码的可读性和开发效率。\n\n### 2.4.2. Butter Knife\n\n1.  在项目的 build.gradle 文件中添加 Butter Knife 的依赖：  \n    \n    **build.gradle**\n    \n    [?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    `dependencies{`\n    \n        `implementation` `'com.jakewharton:butterknife:10.2.3'`\n    \n        `annotationProcessor` `'com.jakewharton:butterknife-compiler:10.2.3'`\n    \n    `}`\n    \n2.  在您的 Activity 或 Fragment 中使用 Butter Knife 进行视图绑定和事件绑定。首先，在类上添加 @BindView 注解来绑定视图：\n    \n    **MainActivity.java**\n    \n    [?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    11\n    \n    12\n    \n    13\n    \n    14\n    \n    15\n    \n    16\n    \n    17\n    \n    `import` `butterknife.BindView;`\n    \n    `import` `butterknife.ButterKnife`\n    \n    `public` `class` `MainActivity` `extends` `AppCompatActivity {`\n    \n        `@BindView``(R.id.textView)`\n    \n        `TextView textView;`\n    \n        `@Override`\n    \n        `protected` `void` `onCreate(Bundle savedInstanceState) {`\n    \n            `super``.onCreate(savedInstanceState);`\n    \n            `setContentView(R.layout.activity_main);`\n    \n            `ButterKnife.bind(``this``);`\n    \n            `// 现在可以直接使用 textView，而不需要手动调用 findViewById()`\n    \n            `textView.setText(``\"Hello Butter Knife!\"``);`\n    \n        `}`\n    \n    `}`\n    \n    在上述示例中，我们使用 @BindView 注解将一个 TextView 视图与 textView 字段进行绑定。然后，在 onCreate() 方法中，我们调用 ButterKnife.bind(this) 来完成视图绑定。\n    \n3.  如果您想要处理视图的点击事件，可以使用 @OnClick 注解:\n    \n    **MainActivity.java**\n    \n    [?](#)\n    \n    1\n    \n    2\n    \n    3\n    \n    4\n    \n    5\n    \n    6\n    \n    7\n    \n    8\n    \n    9\n    \n    10\n    \n    `import` `butterknife.Onclick;`\n    \n    `public` `class` `MainActivity` `extends` `AppCompatActivity {`\n    \n        `// ...`\n    \n        `@OnClick``(R.id.button)`\n    \n        `public` `void` `onButtonClick() {`\n    \n            `// 处理按钮点击事件`\n    \n        `}`\n    \n    `}`\n    \n    在上述示例中，我们使用 @OnClick 注解来定义一个名为 onButtonClick() 的方法，用于处理按钮的点击事件。通过这种方式，您无需手动设置点击事件监听器，Butter Knife 将自动为您处理。\n    \n\n通过使用 Butter Knife，您可以简化视图绑定和事件绑定的过程，使代码更加简洁和易读。请确保在使用 Butter Knife 之前正确配置了相关的依赖项，并按照注解的规则进行使用。\n\n2.5. 实现数据绑定\n-----------\n\n2.6. 实现路由跳转\n-----------\n\n2.7. 实现数据请求\n-----------\n\n2.8. Fragment生命周期\n-----------------\n\n**fragment生命周期**\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n`在 Android Fragment 的生命周期中，常见的方法包括：`\n\n`onAttach(): 当 Fragment 被附加到 Activity 时调用。`\n\n`onCreate(): 在 Fragment 创建时调用，用于进行基本的初始化操作。`\n\n`onCreateView(): 在创建 Fragment 的用户界面时调用，用于创建和配置布局。`\n\n`onActivityCreated(): 在与 Fragment 相关联的 Activity 的 onCreate() 方法完成后调用。`\n\n`onStart(): 当 Fragment 可见时调用。`\n\n`onResume(): 当 Fragment 可交互并处于前台时调用。`\n\n`onPause(): 当 Fragment 失去焦点、不再可交互或进入后台时调用。`\n\n`onStop(): 当 Fragment 不再可见时调用。`\n\n`onDestroyView(): 在销毁 Fragment 的用户界面时调用。`\n\n`onDestroy(): 在销毁 Fragment 时调用。`\n\n`onDetach(): 当 Fragment 与 Activity 解除关联时调用。`\n\n`这些方法提供了在 Fragment 生命周期中执行特定操作的机会。通过重写这些方法，您可以在适当的时候执行初始化、资源释放、数据保存等操作，以确保 Fragment 的正确行为和良好的用户体验。`\n\n`需要注意的是，Fragment 的生命周期方法可能会根据 Fragment 的状态和与其相关联的 Activity 的生命周期而有所变化。因此，在编写 Fragment 时，应该根据具体需求和场景合理地处理这些生命周期方法。`\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}