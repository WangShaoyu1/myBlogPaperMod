{
	"title": "sdk二次（n次）封装",
	"author": "王宇",
	"publishTime": "九月26,2023",
	"readTime": "12s",
	"tags": "[\"数字员工（H5）\"]",
	"description": "数字员工（H5）",
	"article": "0905版本，基于上个版本，将虚拟人更底层能力抽取出来，UI和逻辑分离，包括class和Avatar.vue\n\nClass\n-----\n\n### 虚拟人Class基础能力\n\n1.  init：初始化虚拟人\n2.  status： 状态\"loading\" | \"idle\" | \"talking\"\n3.  getAnswers: 提问返回文本\n4.  talk：播报文本\n5.  listen：执行收音动作\n6.  thiking：nlp思考中\n7.  boring：触发无聊时动作，一般是没其他操作时，倒计时一定时间触发\n8.  idle：打断动作、播报\n9.  move：调用动作\n10.  setBackground：设置2D背景，暂时没用，暂时是用css变量换背景\n\n### 注意点\n\n1.  所有操作都需要虚拟人异步加载完成才能进行，都需要判空特殊处理，方法较多，直接用proxy加方法白名单做统一拦截\n2.  内部有talking的计时，方便后面操作太快来做拦截\n\n  \n\n### 计划优化点\n\n*   异常提示比较重复、散乱，要做常量配置\n*   配合语音识别，也是异步操作比较多，考虑rxjs管理异步操作\n\n  \n\n完整代码\n----\n\n  \n\n**class**\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n`import { Avatar } from` `\"./haihuman.module.js\"``;`\n\n`import { userId } from` `\"@/storage/user\"``;`\n\n`import showMsg from` `\"@/utils/showMsg\"``;`\n\n`class AvatarH5 {`\n\n  `appId: string;`\n\n  `appKey: string;`\n\n  `appSecret: string;`\n\n  `avatarId: string;`\n\n  `instance: any;`\n\n  `status:` `\"loading\"` `|` `\"idle\"` `|` `\"talking\"``;`\n\n  `timer: NodeJS.Timer;`\n\n  `talkTime?: number;`\n\n  `constructor() {`\n\n    `this``.appId =` `\"6006805041792430\"``;`\n\n    `this``.appKey =` `\"TTZ92YT1mSDRLSGs5Mv1bMYJ\"``;`\n\n    `this``.appSecret =` `\"qBHOHn8OUHc17ulW756E2YmcpuMVqNnh\"``;`\n\n    `this``.avatarId =` `\"11100020000282450000000000000000\"``;`\n\n    `this``.status =` `\"loading\"``;`\n\n    `this``.timer =` `null``;`\n\n    `this``.talkTime = void 0;`\n\n  `}`\n\n  `init(cbs) {`\n\n    `console.log(``\"init\"``, userId.value);`\n\n    `this``.instance =` `new` `Avatar(`\n\n      `this``.avatarId,`\n\n      `\"v1.0\"``,`\n\n      `\"wandemei.glb\"``,`\n\n      `\"haihuman\"``,`\n\n      `\"\"``,`\n\n      `{`\n\n        `locale:` `\"cn\"``,`\n\n        `userId: userId.value,` `// 用户唯一标识`\n\n        `prefabs: [{ type:` `\"ani\"``, name:` `\"human_idle\"` `}],` `// 预加载动画资源`\n\n      `}`\n\n    `);`\n\n    `this``.instance.init(``this``.appId,` `this``.appKey,` `this``.appSecret, {`\n\n      `...cbs,`\n\n      `onEndOfChat: () => {`\n\n        `cbs?.onEndOfChat();`\n\n        `this``.talkTime = void 0;`\n\n        `clearTimeout(``this``.timer);`\n\n      `},`\n\n    `});`\n\n  `}`\n\n  `getAnswers(text, callback, errorFn, timeout = 30000) {`\n\n    `console.log(``'getAnswers text'``, text, callback)`\n\n    `this``.instance.chat.getAnswers(`\n\n      `text,`\n\n      `callback,`\n\n      `(e) => {`\n\n        `errorFn?.(e);`\n\n        `this``.talkTime = void 0;`\n\n        `clearTimeout(``this``.timer);`\n\n      `},`\n\n      `timeout`\n\n    `);`\n\n  `}`\n\n  `talk(text) {`\n\n    `this``.idle();`\n\n    `this``.instance.chat.talk(`\n\n      `text,`\n\n      `\"read\"``,`\n\n      `0,`\n\n      `() => console.log(``\"talk success\"``),`\n\n      `() => {`\n\n        `showMsg(``\"当前网络较差，请稍后再试\"``, 1000);`\n\n        `console.log(``\"talk fail\"``);`\n\n      `},`\n\n      `10 * 1000`\n\n    `);`\n\n    `this``.status =` `\"talking\"``;`\n\n    `this``.talkTime = 0;`\n\n    `clearTimeout(``this``.timer);`\n\n    `let _this =` `this``;`\n\n    `function` `count() {`\n\n      `if` `(_this.talkTime >= 2) {`\n\n        `_this.talkTime = void 0`\n\n        `clearTimeout(_this.timer);`\n\n        `return`\n\n      `}`\n\n      `_this.talkTime++;`\n\n      `_this.timer = setTimeout(count, 1000);`\n\n    `}`\n\n    `count();`\n\n  `}`\n\n  `getStatus() {`\n\n    `return` `this``.status;`\n\n  `}`\n\n  `setStatus(_status) {`\n\n    `this``.status = _status;`\n\n  `}`\n\n  `// 收音动作`\n\n  `listen() {`\n\n    `this``.instance.engine.move(`\n\n      `Math.random() > 0.5 ?` `\"human_listen\"` `:` `\"human_response\"``,`\n\n      `false``,`\n\n      `Date.now()`\n\n    `);`\n\n  `}`\n\n  `// 等待服务器动作`\n\n  `think() {`\n\n    `this``.instance.engine.move(`\n\n      `Math.random() > 0.5 ?` `\"human_thinking\"` `:` `\"human_confused\"``,`\n\n      `false``,`\n\n      `Date.now()`\n\n    `);`\n\n  `}`\n\n  `// 待命动作`\n\n  `boring() {`\n\n    `if` `([``\"idle\"``].includes(``this``.getStatus())) {`\n\n      `this``.instance.engine.move(`\n\n        `Math.random() > 0.5 ?` `\"human_hello\"` `:` `\"human_niuyiniu\"``,`\n\n        `false``,`\n\n        `Date.now()`\n\n      `);`\n\n    `}`\n\n  `}`\n\n  `idle() {`\n\n    `this``.talkTime = 0;`\n\n    `clearTimeout(``this``.timer);`\n\n    `this``.instance.idle();`\n\n  `}`\n\n  `setBackground(url) {`\n\n    `this``.instance.stage.setBackground2D(url);`\n\n  `}`\n\n`}`\n\n`export` `default` `AvatarH5;`\n\n`// export const avatar = new AvatarH5();`\n\n`export const avatar =` `new` `Proxy(``new` `AvatarH5(), {`\n\n  `get(target, propKey, receiver) {`\n\n    `if` `(`\n\n      `typeof` `target[propKey] ===` `\"function\"` `&&`\n\n      `![``\"init\"``,` `\"setStatus\"``].includes(propKey)`\n\n    `) {`\n\n      `if` `(!target.instance || target.instance?.state ===` `\"loading\"``) {`\n\n        `return` `() => {`\n\n          `alert(``\"虚拟人加载中，请稍等\"``);`\n\n        `};`\n\n      `}`\n\n    `}`\n\n    `return` `Reflect.get(target, propKey, receiver);`\n\n  `},`\n\n`});`\n\nAvatar.vue\n----------\n\n### 功能\n\n在class基础上增加业务逻辑\n\n1.  判断话术类型，做相应回答和后续交互\n2.  增加了手势动画，单击、双击、长按、滑动、复位，包括一些随机动画\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n`<script setup>`\n\n`import { ref, onMounted } from` `\"vue\"``;`\n\n`import { Avatar } from` `\"./haihuman.module.js\"``;`\n\n`import { useDebounceFn, onLongPress } from` `\"@vueuse/core\"``;`\n\n`import { userId } from` `\"@/storage/user\"``;`\n\n`import { avatar } from` `\"./class\"``;`\n\n`import showMsg from` `\"@/utils/showMsg\"``;`\n\n`import { getSimilarity } from` `\"@/utils\"``;`\n\n`// let status = \"idle\";`\n\n`let a;`\n\n`const props = defineProps([``\"onReady\"``]);`\n\n`const haihumanRef = ref(``null``);`\n\n`/**`\n\n `* Sdk loading callback`\n\n `* called while assets loading`\n\n `*/`\n\n`const onProgress = (progress) => {`\n\n  `// console.log(progress / 100)`\n\n`};`\n\n`/**`\n\n `* Sdk loading callback`\n\n `* called as assets loaded and stage ready`\n\n `*/`\n\n`const onReady = () => {`\n\n  `a = avatar.instance;`\n\n  `avatar.setStatus(``\"idle\"``);`\n\n  `if` `(a.model) {`\n\n    `a.model.position.y = -1.2;`\n\n    `a.model.position.x = 0;`\n\n    `a.model.scale.set(2.5, 2.5, 2.5);`\n\n    `a.stage.clearGround();`\n\n    `a.stage.controls.enableZoom =` `false``;`\n\n    `// a.stage.controls.enableDamping = false`\n\n    `a.stage.controls.enablePan =` `false``;`\n\n  `}`\n\n  `// if (a.speechRecognizer) {`\n\n  `//   a.speechRecognizer.setOnChange((text) => {`\n\n  `//     console.log(text);`\n\n  `//   });`\n\n  `// }`\n\n  `props?.onReady?.(a);`\n\n  `window.addEventListener(``\"visibilitychange\"``, () => {`\n\n    `if` `(document.hidden) {`\n\n      `a.idle();`\n\n    `}` `else` `{`\n\n      `a.engine?.move(``\"human_hello\"``,` `false``, Date.now());`\n\n      `avatar.setStatus(``\"idle\"``);`\n\n    `}`\n\n  `});`\n\n`};`\n\n`/**`\n\n `* Sdk render callback`\n\n `* called every frame`\n\n `*/`\n\n`const onRender = (delta) => {};`\n\n`const onError = (e) => {`\n\n  `console.error(``\"avatar error:\"``, e);`\n\n`};`\n\n`// 全局talk完成`\n\n`const onEndOfChat = () => {`\n\n  `console.log(``\"onEndOfChat\"``);`\n\n  `avatar.setStatus(``\"idle\"``);`\n\n  `// 移除所有speaker里的speaking`\n\n  `// document.querySelector('.conversation-container-body')`\n\n  `// let nodeList = document.querySelectorAll('.conversation-container-body .conversation-list .official .speaker.speaking')`\n\n  `// Array.prototype.forEach.call(nodeList, el => {`\n\n  `//   el.classList.remove('speaking')`\n\n  `// })`\n\n`};`\n\n`const cbs = { onProgress, onReady, onRender, onError, onEndOfChat };`\n\n`onMounted(() => {`\n\n  `avatar.init(cbs);`\n\n`});`\n\n`const createA = (options, ans) =>`\n\n  `Object.keys(options)`\n\n    ``.map((_) => `<a class=```\"goInstruct\"`  ``data-ans=${ans}>${_}</a>`)``\n\n    `.join(``\"\"``);`\n\n`// 创建指令选项`\n\n`const instruction = (_obj) => {`\n\n  `return` `{`\n\n    ``showText: `${_obj.text}${createA(_obj.options, _obj.ans)}`,``\n\n    ``readText: `${_obj.text}`,``\n\n  `};`\n\n`};`\n\n`// 创建富文本a标签`\n\n`const createRich = (_obj) => {`\n\n  `return` `` `<a class= ```\"goToLesson\"` `href=${_obj.href ||` `\"\"```}>${_obj.text}</a>`;``\n\n`};`\n\n`// // 切换背景`\n\n`// const setBackground = (url) => {`\n\n`//   a.stage.setBackground2D(url);`\n\n`// };`\n\n`// 创建再问一次`\n\n`const createRedo = (question) => {`\n\n  `return` `` `<a class= ```\"goToRedo\"` ``data-ques=${question}><span></span>再问一次</a>`;``\n\n`};`\n\n`// 创建“去反馈”`\n\n`const createFeedBack = (tag) => {`\n\n  `let res =` `\"\"``;`\n\n  `if` `(tag?.code ===` `\"h5_ptyy_wdc_useful\"``) {`\n\n    `return` `JSON.parse(tag?.succeed_answer)?.value;`\n\n  `}`\n\n  `if` `(tag?.code ===` `\"h5_ptyy_wdc_useless\"``) {`\n\n    `return` `` `${JSON.parse(tag?.succeed_answer)?.value.replace( ``\n\n      `\"去反馈＞\"``,`\n\n      `'<a class=\"goFeedback\">去反馈></a>'`\n\n    ``)}`;``\n\n  `}`\n\n  `return` `` `未知错误`; ``\n\n`};`\n\n`defineExpose({`\n\n  `getAnswers: (text, callback, errorFn, timeout = 30000) => {`\n\n    `avatar.getAnswers(`\n\n      `text,`\n\n      `async (answers) => {`\n\n        `console.log(``\"answers:\"``, answers);`\n\n        `let showText, readText;`\n\n        `if` `(answers.length) {`\n\n          `let as = answers.join(``\"\"``);`\n\n          `let tag = answers[0]?.tag;`\n\n          `let res;`\n\n          `// 指令库`\n\n          `if` `(tag?.service ===` `\"Instruction_library\"``) {`\n\n            `console.log(``\"指令库\"``);`\n\n            `try` `{`\n\n              `const succeed_answer = JSON.parse(tag?.succeed_answer);`\n\n              `console.log(``\"succeed_answer\"``, succeed_answer);`\n\n              `let succeed_answer_value = succeed_answer.value`\n\n                `.replaceAll(``\"[\"``,` `\"{\"``)`\n\n                `.replaceAll(``\"]\"``,` `\"}\"``)`\n\n                `?.replaceAll(``\"\\n\"``,` `\"\"``);`\n\n              `// 直接命中反馈`\n\n              `if` `(`\n\n                `[``\"h5_ptyy_wdc_useful\"``,` `\"h5_ptyy_wdc_useless\"``].includes(`\n\n                  `tag?.code`\n\n                `)`\n\n              `) {`\n\n                `console.log(``\"反馈\"``);`\n\n                `showText = createFeedBack(tag);`\n\n                `readText = showText.replace(`\n\n                  `'<a class=\"goFeedback\">去反馈></a>'``,`\n\n                  `\"去反馈\"`\n\n                `);`\n\n              `}` `else` `{`\n\n                `let value = JSON.parse(succeed_answer_value);`\n\n                `console.log(``\"succeed_answer_value\"``, succeed_answer_value);`\n\n                `// 命中回答`\n\n                `if` `(answers[0]?.text ===` `\"DEFAULT\"``) {`\n\n                  `if` `(tag?.isMulti ===` `\"false\"` `&& tag?.isEnd ==` `\"true\"``) {`\n\n                    `// 文本+超链接`\n\n                    `// 不带选项`\n\n                    `if` `(value?.text &&` `typeof` `value.text ===` `\"string\"``) {`\n\n                      `showText = value.text.replace(`\n\n                        `value.replace,`\n\n                        `createRich({`\n\n                          `text: value.replace,`\n\n                          `href: value.href,`\n\n                        `})`\n\n                      `);`\n\n                      `readText = value.text;`\n\n                    `}` `else` `{`\n\n                      `// 直达追问回答`\n\n                      `console.log(``\"直达追问回答\"``, value);`\n\n                      `let key = text.replace(tag?.intent,` `\"\"``);`\n\n                      `let _value = value[key];`\n\n                      `// 没匹配到`\n\n                      `if` `(!_value) {`\n\n                        `let m = 0,`\n\n                          `k;`\n\n                        `for` `(let k` `in` `value) {`\n\n                          `console.log(``'k, key'``, k, key)`\n\n                          `const p = getSimilarity(k, key);`\n\n                          `console.log(``'p'``, p)`\n\n                          `if` `(p > m) {`\n\n                            `m = p;`\n\n                            `_value = value[k];`\n\n                          `}`\n\n                        `}`\n\n                      `}`\n\n                      `console.log(``\"tag\"``, tag);`\n\n                      `console.log(``\"_value\"``, _value);`\n\n                      `showText = _value?.replace`\n\n                        `? _value.text.replace(`\n\n                            `_value.replace,`\n\n                            `createRich({`\n\n                              `text: _value.replace,`\n\n                              `href: _value.href,`\n\n                            `})`\n\n                          `)`\n\n                        `: _value.text;`\n\n                      `// showText = _value.text;`\n\n                      `readText = _value.text;`\n\n                    `}`\n\n                  `}`\n\n                `}` `else` `{`\n\n                  `// 追问失败`\n\n                  `if` `(`\n\n                    `JSON.parse(tag?.continue_failed_answer).value ===`\n\n                    `tag?.answer`\n\n                  `) {`\n\n                    `console.log(``\"追问失败\"``);`\n\n                    `showText = readText = tag.answer;`\n\n                    `readText = tag.answer;`\n\n                    ``showText = `${tag.answer}<div>${createRedo(text)}</div>`;``\n\n                  `}` `else` `{`\n\n                    `// 问题`\n\n                    `as = {`\n\n                      `text: answers[0]?.text,`\n\n                      `ans: tag?.intent,`\n\n                      `options: value,`\n\n                    `};`\n\n                    `res = instruction(as);`\n\n                    `showText = res.showText;`\n\n                    `readText = res.readText;`\n\n                    `// .replace(/<(a+)[^>]*>/g, \"\")`\n\n                    `// .replace(/<\\/a>/g, \"\")`\n\n                    `// .replace(/\\>/, \"\");`\n\n                  `}`\n\n                `}`\n\n              `}`\n\n            `}` `catch` `(error) {`\n\n              `console.error(error);`\n\n            `}`\n\n          `}`\n\n          `// FAQ`\n\n          `else` `if` `(tag?.service ===` `\"FAQ_Library\"``) {`\n\n            `console.log(``\"faq\"``);`\n\n            `try` `{`\n\n              `res = answers?.map((_) => _.text).join(``\"\"``);`\n\n              `const reg = /\\[(.*?)\\]|\\((.*?)\\)/g;` `// 匹配(xxx=xxx)出来`\n\n              `const matchs = res.match(reg);`\n\n              `// 有富文本内容`\n\n              `if` `(matchs?.length) {`\n\n                `showText = res.replace(reg, (match) => {`\n\n                  `const info = match.slice(1, match.length - 1).split(``\"=\"``);`\n\n                  `return` `` `<a class= ```\"goToLesson\"` `href=${info`\n\n                    `.slice(1)`\n\n                    `.join(``\"=\"```)}>${info[0]}</a>`;``\n\n                `});`\n\n                `readText = res.replace(reg,` `\"\"``);`\n\n              `}` `else` `{`\n\n                `showText = readText = res;`\n\n              `}`\n\n            `}` `catch` `(error) {`\n\n              `console.error(error);`\n\n            `}`\n\n          `}`\n\n          `// 闲聊`\n\n          `else` `{`\n\n            `as = answers?.map((_) => _.text).join(``\"\"``);`\n\n            `showText = readText = as;`\n\n          `}`\n\n          `console.log(``\"最终showText\"``, showText);`\n\n          `console.log(``\"最终readText\"``, readText);`\n\n          `if` `(``typeof` `callback ===` `\"function\"``) {`\n\n            `as = await callback?.(showText, readText, tag);`\n\n          `}`\n\n          `// 正在读的先停了,不然后续都会没声音`\n\n          `avatar.idle();`\n\n          `avatar.talk(as,` `\"read\"``);`\n\n        `}`\n\n      `},`\n\n      `async (e) => {`\n\n        `// 超时也能进这里`\n\n        `const as = await errorFn?.(e);`\n\n        `if` `(``typeof` `as ===` `\"string\"``) {`\n\n          `avatar.idle();`\n\n          `avatar.talk(as,` `\"read\"``);`\n\n        `}`\n\n      `},`\n\n      `timeout,`\n\n      `(e) => {`\n\n        `console.error(``\"超时\"``, e);`\n\n      `}`\n\n    `);`\n\n  `},`\n\n  `talk: (text) => {`\n\n    `avatar.talk(text);`\n\n    `avatar.setStatus(``\"talking\"``);`\n\n  `},`\n\n  `getStatus: () => avatar.status,`\n\n  `listen: (params) => avatar.listen(params),`\n\n  `think: (params) => avatar.think(params),`\n\n  `boring: (params) => avatar.boring(params),`\n\n  `idle: () => avatar?.idle(),`\n\n  `// setBackground,`\n\n`});`\n\n`const moveList0 = [`\n\n  `\"human_baishui\"``,`\n\n  `\"human_feiwen\"``,`\n\n  `\"human_pain\"``,`\n\n  `\"human_shakehead\"``,`\n\n  `\"human_tramplefeet\"``,`\n\n  `\"human_stagger\"``,`\n\n`];`\n\n`const moveList1 = [``\"human_ballet\"``,` `\"human_dance\"``,` `\"human_mechanicaldance\"``];`\n\n`const moveList2 = [`\n\n  `\"human_lookaround\"``,`\n\n  `\"human_clickonrightfoot\"``,`\n\n  `\"human_eatfull\"``,`\n\n  `\"human_hungry\"``,`\n\n`];`\n\n`let clickNum = 1,`\n\n  `clickTimer =` `null``,`\n\n  `lastClickTim`\n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}