{
	"title": "linux版虚拟人sdk文档",
	"author": "王宇",
	"publishTime": "四月13,2024",
	"readTime": "12s",
	"tags": "[\"陆元伟\"]",
	"description": "陆元伟",
	"article": "*   1[1\\. 初始化方法](#linux版虚拟人sdk文档-初始化方法)\n*   2[2\\. 检查资源](#linux版虚拟人sdk文档-检查资源)\n*   3[3\\. 下载资源](#linux版虚拟人sdk文档-下载资源)\n*   4[4\\. 创建数字虚拟人](#linux版虚拟人sdk文档-创建数字虚拟人)\n*   5[5\\. 加载身体部件](#linux版虚拟人sdk文档-加载身体部件)\n*   6[6\\. 添加画布](#linux版虚拟人sdk文档-添加画布)\n*   7[7\\. 播报](#linux版虚拟人sdk文档-播报)\n*   8[8\\. 角色基于现有大小缩放至指定的大小](#linux版虚拟人sdk文档-角色基于现有大小缩放至指定的大小)\n*   9[9\\. 删除画布](#linux版虚拟人sdk文档-删除画布)\n*   10[10\\. 设置背景颜色](#linux版虚拟人sdk文档-设置背景颜色)\n*   11[11\\. 删除数字虚拟人](#linux版虚拟人sdk文档-删除数字虚拟人)\n*   12[12\\. 角色行为状态切换到 Idle 状态](#linux版虚拟人sdk文档-角色行为状态切换到Idle状态)\n*   13[13\\. 播放本地动画](#linux版虚拟人sdk文档-播放本地动画)\n\n1\\. 初始化方法\n=========\n\n  \n\nvoid haisdk\\_init(int useInnerAudioFlag,  \nconst char \\*persistPath,  \nint animMode,  \nconst char \\*authHost,  \nconst char \\*appKey,  \nconst char \\*appID,  \nconst char \\*appSecret,  \nconst char \\*usrID,  \nHAI\\_PVOID userData,  \nHAI\\_FPTR\\_INIT\\_END\\_CALLBACK initEndCallback)\n\n  \n\n参数说明\n\n\\* @param useInnerAudioFlag 是否启用内部音频控制器，如果是false，sdk的调用方可以重写sdk抛出的音频处理回调来达到重写音频控制代码。  \n\\* @param persistPath 需要用户手动设置一个可读写的文件路径给sdk，sdk内部会用这个目录存放存放一些依赖资源。  \n\\* @param animMode 0表示默认动画方式，1是升级动画方式  \n\\* @param authHost 这些参数都是和sdk本身的授权有关，这些参数需要向拟仁申请。  \n\\* @param appKey 这些参数都是和sdk本身的授权有关，这些参数需要向拟仁申请。  \n\\* @param appID 这些参数都是和sdk本身的授权有关，这些参数需要向拟仁申请。  \n\\* @param appSecret 这些参数都是和sdk本身的授权有关，这些参数需要向拟仁申请。  \n\\* @param usrID usrID  \n\\* @param usrID 所有传递给回调函数的用户数据指针  \n\\* @param initEndCallback 结束回调接口\n\n  \n\n  \n\n/\\*\\*  \n\\* 启用单一surface显示模式，这个模式与MultiSurfaces互斥，只会一个enable  \n\\* @param surfaceID 绘制表面的句柄id  \n\\*/  \nHAISDK\\_CALL void haisdk\\_enable\\_single\\_surfacemode(int surfaceID);\n\n  \n\n2\\. 检查资源\n========\n\n/\\*\\*  \n\\* SDK初始化完毕之后，可以调用这个接口，调用时需要有网络，这个接口主要就是检查服务器资源状态，检查结束会异步返回值。  \n\\* @param avatarID avatarID  \n\\* @param resourceType 0表示默认资源包，1表示aplus资源，3表示pbr资源包  \n\\* @param userData 所有传递给回调函数的用户数据指针  \n\\* @param checkCallback 资源检查的回调接口。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_check\\_server\\_asset(const char \\*avatarID,  \nint resourceType,  \nHAI\\_PVOID userData,  \nHAI\\_FPTR\\_CHECK\\_RESOURCE\\_CALLBACK checkCallback);\n\n  \n\n3\\. 下载资源\n========\n\n/\\*\\*  \n\\* 调用haisdk\\_check\\_server\\_asset之后，理论上可以调用这个接口了，调用时需要有网络，这个接口主要就是下载资源，  \n\\* 但是这个接口依赖haisdk\\_check\\_server\\_asset的返回状态。  \n\\* 如果haisdk\\_check\\_server\\_asset返回状态是HAS\\_UPDATE\\_IGNORABLE或者SHOULD\\_UPDATE，调用这个接口就会下载最新资源。  \n\\* 如果haisdk\\_check\\_server\\_asset返回状态是其他值，调用这个接口其实没有意义。  \n\\* @param userData 所有传递给回调函数的用户数据指针  \n\\* @param progressCallback 资源下载的进度回调接口。  \n\\* @param endCallback 资源下载的结束回调接口。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_download\\_server\\_asset(HAI\\_PVOID userData,  \nHAI\\_FPTR\\_DOWNLOAD\\_RESOURCE\\_PROGRESS\\_CALLBACK progressCallback,  \nHAI\\_FPTR\\_DOWNLOAD\\_RESOURCE\\_END\\_CALLBACK endCallback);\n\n  \n\n4\\. 创建数字虚拟人\n===========\n\n  \n\n/\\*\\*  \n\\* 创建数字虚拟人接口  \n\\* @param instId  \n\\* @param avatarID 表示insId对应的avatarID  \n\\* @param langID 多语言id，指定虚拟人是按照什么语言交流  \n\\* cn, en, es, fr, de, it, hi  \n\\* @param usrData 所有传递给回调函数的用户数据指针  \n\\* @param fptrStopAudio 音频控制的回调接口，用于API调用层重写音频控制函数，只有Init函数里面useInnerAudioFlag为false的时候，才有可能有回调。  \n\\* @param fptrPauseAudio 音频控制的回调接口，用于API调用层重写音频控制函数，只有Init函数里面useInnerAudioFlag为false的时候，才有可能有回调。  \n\\* @param fptrPlayAudioBuff 音频控制的回调接口，用于API调用层重写音频控制函数，只有Init函数里面useInnerAudioFlag为false的时候，才有可能有回调。  \n\\* @param fptrPlayAudioFile 音频控制的回调接口，用于API调用层重写音频控制函数，只有Init函数里面useInnerAudioFlag为false的时候，才有可能有回调。  \n\\* @param createAvatarCallback 虚拟人创建是否成功的异步回调。这个回调函数会返回两个参数，一个参数表示Instance是否创建成功，另一个表示创建成功的Instance实例ID。  \n\\*/  \nHAISDK\\_CALL void haisdk\\_avatar\\_create(const char \\*insID,  \nconst char \\*avatarID,  \nconst char \\*langID,  \nHAI\\_PVOID usrData,  \nHAI\\_FPTR\\_STOP\\_AUDIO\\_CALLBACK fptrStopAudio,  \nHAI\\_FPTR\\_PAUSE\\_AUDIO\\_CALLBACK fptrPauseAudio,  \nHAI\\_FPTR\\_PLAY\\_PCM\\_CALLBACK fptrPlayAudioBuff,  \nHAI\\_FPTR\\_PLAY\\_AUDIOFILE\\_CALLBACK fptrPlayAudioFile,  \nHAI\\_FPTR\\_CREATE\\_AVATAR\\_CALLBACK createAvatarCallback);\n\n5\\. 加载身体部件\n==========\n\n/\\*\\*  \n\\* 加载或者替换身体部件  \n\\* @param avaInstId haisdk\\_avatar\\_create返回的id值  \n\\* @param matType 0=unlit, 1=pbr  \n\\* @param haiMatID -1:默认值, 0:透明背景版  \n\\* @param ptrAssetName 新部件的资源名称  \n\\* @return 返回0为正确  \n\\*/  \nHAISDK\\_CALL int haisdk\\_avatar\\_load\\_parts(int avaInstId,  \nint matType,  \nint haiMatID,  \nconst char \\*ptrAssetName);\n\n6\\. 添加画布\n========\n\n/\\*\\*  \n\\* 添加一个绘制表面  \n\\* @param surface 绘制表面句柄  \n\\* @param width 绘制表面对应的像素宽度  \n\\* @param height 绘制表面对应的像素高度  \n\\* @return 返回值是默认的surfaceID(为非负值), 其他值表示API执行有错误。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_add\\_draw\\_surface(void \\*surface,  \nint width,  \nint height);\n\n  \n\n其他使用高频的方法\n\n7\\. 播报\n======\n\n/\\*\\*  \n\\* 将角色行为状态切换到动态播报状态, 同时输出口型对齐结果和行为情绪分析结果。  \n\\* @param avaInstId haisdk\\_avatar\\_create返回的id值  \n\\* @param text 播报的文本，可以是问题文本，也可以是答案文本。 \\*如果只是答案文本，请将openNLP设置成false。后面角色播报的时候，只是播报这个输入的文本。\\* 如果是问题文本，请将openNLP设置成true。后面角色播报的时候，会播报针对这个问题经过自然语言处理之后的答案文本。  \n\\* @param openNLP 是否启用自然语言处理。  \n\\* @param openMotionTag 是否启用行为动作分析处理。  \n\\* @param inLangID 输入文本的语言id，指定虚拟人是按照什么语言交流  \n\\* cn, en, es, fr, de, it, hi  \n\\* @param outLangID 目标播报语言id，指定虚拟人是按照什么语言交流  \n\\* cn, en, es, fr, de, it, hi  \n\\* @param tags 可以主动设置一些tag。  \n\\* @param chatUserData 所有传递给回调函数的用户数据指针  \n\\* @param chatEndCallback 结束播报的回调函数。  \n\\* @param chatTagCallback 中间结果，返回的tag回调函数。  \n\\* @param chatTextCallback 中间结果，返回的文本答案回调函数。  \n\\* @param chatRichCallback 中间结果，返回的富文本回调函数。  \n\\* @return 返回值为0时，表示调用接口正确返回。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_avatar\\_anim\\_playdynamic(int avaInstId,  \nconst char \\*text,  \nint openNLP,  \nint openMotionTag,  \nconst char \\*inLangID,  \nconst char \\*outLangID,  \nconst char \\*tags,  \nHAI\\_PVOID chatUserData,  \nHAI\\_FPTR\\_VOID\\_PVOID chatEndCallback,  \nHAI\\_FPTR\\_VOID\\_PVOID\\_PCHAR chatTagCallback,  \nHAI\\_FPTR\\_VOID\\_PVOID\\_PCHAR chatTextCallback,  \nHAI\\_FPTR\\_VOID\\_PVOID\\_PCHAR chatRichCallback);\n\n8\\. 角色基于现有大小缩放至指定的大小\n====================\n\n/\\*\\*  \n\\* 将角色基于现有大小缩放至指定的大小  \n\\* @param avaInstId haisdk\\_avatar\\_create返回的id值  \n\\* @param percentage 相对于原始模型大小的缩放系数，当值大于1时，表示放大，否则表示缩小。  \n\\* @return 返回值为0时，表示调用接口正确返回。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_avatar\\_scale\\_to(int avaInstId,  \nfloat percentage);\n\n9\\. 删除画布\n========\n\n/\\*\\*  \n\\* 根据一个绘制表面的句柄id，删除一个绘制表面  \n\\* @param surfaceID 绘制表面的句柄id  \n\\*/  \nHAISDK\\_CALL void haisdk\\_remove\\_draw\\_surface(int surfaceID);\n\n10\\. 设置背景颜色\n===========\n\n/\\*\\*  \n\\* 启用颜色背景，分别传递rgba的值，与SetBackgroundImage互斥，只有一个会显示。  \n\\* @param r255 0-255整形值  \n\\* @param g255 0-255整形值  \n\\* @param b255 0-255整形值  \n\\* @param a255 0-255整形值  \n\\* @return 返回值为0时，表示调用接口正确返回。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_background\\_show\\_color(int r255,  \nint g255,  \nint b255,  \nint a255);\n\n11\\. 删除数字虚拟人\n============\n\n/\\*\\*  \n\\* 删除数字虚拟人  \n\\* @param avaInstId haisdk\\_avatar\\_create返回的id值  \n\\*/  \nHAISDK\\_CALL void haisdk\\_avatar\\_destroy(int avaInstId);\n\n12\\. 角色行为状态切换到 Idle 状态\n======================\n\n/\\*\\*  \n\\* 将角色行为状态切换到 Idle 状态  \n\\* @param avaInstId haisdk\\_avatar\\_create返回的id值  \n\\* @return 返回值为0时，表示调用接口正确返回。  \n\\*/  \nHAISDK\\_CALL int haisdk\\_avatar\\_do\\_standby(int avaInstId);\n\n13\\. 播放本地动画\n===========\n\n/\\*\\*  \n\\* 将角色行为状态切换到播放原子级的分成动画状态  \n\\* @param avaInstId haisdk\\_avatar\\_create返回的id值  \n\\* @param animName 动画名称  \n\\* @param loop 循环标志位  \n\\* @param forcePlayClipState true表示中断其他虚拟人状态，直接进入单纯播放motion的状态  \n\\* @param usrData 所有传递给回调函数的用户数据指针  \n\\* @param playCallback 通知动画播放结束时间的回调处理函数；原子动画不含音频信息，因此不支持通知开始播放wav音频时间的回调处理函数。如果原子动画设置了循环播放的标志位，结束回调就不会再调用了  \n\\* @return 返回非负值为当前要播放的动画实例ID，负值表示播放错误  \n\\*/  \nHAISDK\\_CALL int haisdk\\_avatar\\_anim\\_playclip(int avaInstId,  \nconst char \\*animName,  \nint loop,  \nint forcePlayClipState,  \nHAI\\_PVOID usrData,  \nHAI\\_FPTR\\_VOID\\_PVOID\\_INT playCallback);\n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}