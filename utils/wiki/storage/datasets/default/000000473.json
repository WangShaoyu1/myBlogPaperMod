{
	"title": "sw模版",
	"author": "王宇",
	"publishTime": "五月23,2024",
	"readTime": "12s",
	"tags": "[\"pwa\"]",
	"description": "pwa",
	"article": "没定稿\n\n[?](#)\n\n`const CACHE_VERSION =` `\"v2024040522\"``;`\n\n`const blackList = [];`\n\n`let lastSrcs;`\n\n`const scriptReg = /\\<script.*src=[``\"'](?<src>[^\"``']+)/gm;`\n\n`const DURATION = 5000;`\n\n`async` `function` `extractNewScripts() {`\n\n  `const html = await fetch(``\"/?_timestamp=\"` `+ Date.now()).then((resp) =>`\n\n    `resp.text()`\n\n  `);`\n\n  `scriptReg.lastIndex = 0;`\n\n  `let res = [];`\n\n  `let match;`\n\n  `while` `((match = scriptReg.exec(html))) {`\n\n    `res.push(match.groups.src);`\n\n  `}`\n\n  `console.log(``'res'``, res)`\n\n  `return` `res;`\n\n`}`\n\n`async` `function` `needUpdate() {`\n\n  `const newScripts = await extractNewScripts();`\n\n  `console.log(``'lastSrcs'``, lastSrcs)`\n\n  `if` `(!lastSrcs) {`\n\n    `lastSrcs = newScripts;`\n\n    `return` `false``;`\n\n  `}`\n\n  `let result =` `false``;`\n\n  `if` `(lastSrcs.length !== newScripts.length) {`\n\n    `result =` `true``;`\n\n  `}`\n\n  `for` `(let i = 0; i < lastSrcs.length; i++) {`\n\n    `if` `(lastSrcs[i] !== newScripts[i]) {`\n\n      `result =` `true``;`\n\n      `break``;`\n\n    `}`\n\n  `}`\n\n  `lastSrcs = newScripts;`\n\n  `return` `result;`\n\n`}`\n\n`function` `autoRefresh() {`\n\n  `console.log(``\"autoRefresh\"``);`\n\n  `setTimeout(async () => {`\n\n    `const willUpdate = await needUpdate();`\n\n    `console.log(``'willUpdate'``, willUpdate)`\n\n    `if` `(willUpdate) {`\n\n      `self.clients.matchAll().then(all => all.map(client => {`\n\n        `client.postMessage(``'update'``)`\n\n      `}))`\n\n    `}` `else` `{`\n\n      `autoRefresh();`\n\n    `}`\n\n  `}, DURATION);`\n\n`}`\n\n`// 缓存优先`\n\n`function` `cacheFirstHandler(cacheResponse, event) {`\n\n  `if` `(cacheResponse) {`\n\n    `return` `cacheResponse;`\n\n  `}`\n\n  `return` `fetch(event.request).then((response) => {`\n\n    `return` `caches.open(CACHE_VERSION).then((cache) => {`\n\n      `cache.put(event.request, response.clone());`\n\n      `return` `response;`\n\n    `});`\n\n  `});`\n\n`}`\n\n`function` `staleWhileRevalidateHandler(cacheResponse, event, name) {`\n\n  `const fetchResponse = fetch(event.request).then((response) => {`\n\n    `return` `caches`\n\n      `.open(CACHE_VERSION)`\n\n      `.then((cache) => {`\n\n        `cache.put(name, response.clone());`\n\n        `return` `response;`\n\n      `})`\n\n      `.cache(() => cacheResponse);`\n\n  `});`\n\n  `return` `cacheResponse || fetchResponse;`\n\n`}`\n\n`self.addEventListener(``\"install\"``, (event) => {`\n\n  `console.log(``\"install\"``);`\n\n  `self.skipWaiting();`\n\n  `event.waitUntil(`\n\n    `caches.open(CACHE_VERSION).then((cache) => {`\n\n      `return` `cache.addAll([`\n\n        `/** cacheList */`\n\n      `]);`\n\n    `})`\n\n  `);`\n\n`});`\n\n`self.addEventListener(``\"activate\"``, (event) => {`\n\n  `console.log(``\"activate\"``);`\n\n  `autoRefresh();`\n\n  `event.waitUntil(`\n\n    `caches`\n\n      `.keys()`\n\n      `.then((cacheNames) => {`\n\n        `console.log(``\"cacheNames\"``, cacheNames);`\n\n        `return` `Promise.all(`\n\n          `cacheNames`\n\n            `.filter((cacheName) => {`\n\n              `return` `cacheName !== CACHE_VERSION;`\n\n            `})`\n\n            `.map((cacheName) => {`\n\n              `console.log(``\"删除\"``, cacheName);`\n\n              `return` `caches.``delete``(cacheName);`\n\n            `})`\n\n        `);`\n\n      `})`\n\n      `.then((cache) => {`\n\n        `return` `self.clients.matchAll().then((clients) => {`\n\n          `if` `(clients?.length) {`\n\n            `console.log(``\"sw更新了！\"``, cache);`\n\n            `// clients.forEach(client => {`\n\n            `//   clients.postMessage('sw:update')`\n\n            `// })`\n\n          `}`\n\n        `});`\n\n      `})`\n\n  `);`\n\n`});`\n\n`self.addEventListener(``\"fetch\"``, (event) => {`\n\n  `const { url, method, destination } = event.request;`\n\n  `// console.log(\"event\", event);`\n\n  `// 不缓存带时间戳`\n\n  `if` `(destination ===` `\"image\"` `&& url.includes(``\"?v=\"``)) {`\n\n    `return``;`\n\n  `}`\n\n  `// 不缓存第三方接口`\n\n  `if` `(event.request.url.includes(``\"/haigate/api\"``)) {`\n\n    `// event.respondWith(fetch(event.request));`\n\n    `return``;`\n\n  `}`\n\n  `// 不缓存post接口`\n\n  `if` `(method ===` `'POST'``) {`\n\n    `return`\n\n  `}`\n\n  `event.respondWith(`\n\n    `caches`\n\n      `.match(event.request)`\n\n      `.then((response) => {`\n\n        `if` `(response) {`\n\n          `return` `response;`\n\n        `}`\n\n        `const fetchRequest = event.request.clone()`\n\n        `return` `fetch(fetchRequest).then((networkResponse) => {`\n\n         `if` `(!networkResponse || networkResponse.status !== 200) {`\n\n          `console.log(``'不缓存'``, networkResponse)`\n\n          `return` `networkResponse`\n\n         `}`\n\n          `const responseToCache = networkResponse.clone()`\n\n          `caches.open(CACHE_VERSION).then(cache => {`\n\n            `console.log(``'缓存这个'``, event.request)`\n\n            `cache.put(event.request, responseToCache)`\n\n          `})`\n\n          `return` `networkResponse`\n\n        `});`\n\n      `})`\n\n      `.``catch``((e) => {`\n\n        `console.log(``\"error:\"``, e);`\n\n      `})`\n\n  `);`\n\n`});`\n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}