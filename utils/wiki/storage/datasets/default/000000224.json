{
	"title": "Docker环境手动运行容器",
	"author": "王宇",
	"publishTime": "六月27,2024",
	"readTime": "12s",
	"tags": "[\"赵吉山\"]",
	"description": "赵吉山",
	"article": "1\\. 编译和推送到云端\n============\n\n首先拉取代码，进入项目目录下运行脚本 image\\_build\\_and\\_push.sh\n\n[?](#)\n\n1\n\n2\n\n3\n\n`# 进入目录/home/Onanouser/ftt-em-edge/modules/AvatarModule/`\n\n`# 参数说明： 参数1为Tag中 0.0.$VERSION-arm64v8 中的$VERSION，生成镜像为acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.1-arm64v8`\n\n`.``/image_build_and_push``.sh 1`\n\n如下为脚本\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n`#!/bin/bash`\n\n`# 检查是否提供了版本号参数`\n\n`if` `[ -z` `\"$1\"` `];` `then`\n\n    `echo` `\"Usage: $0 <version>\"`\n\n    `exit` `1`\n\n`fi`\n\n`# 设置变量`\n\n`DOCKERFILE_PATH=``\"/home/Onanouser/ftt-em-edge/modules/AvatarModule/Dockerfile.arm64v8\"`\n\n`VERSION=$1`\n\n`TAG=``\"0.0.$VERSION-arm64v8\"`\n\n`IMAGE_NAME=``\"acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:$TAG\"`\n\n`BUILD_CONTEXT=``\"/home/Onanouser/ftt-em-edge/modules/AvatarModule\"`\n\n`# 构建Docker镜像`\n\n`echo` `\"Building Docker image : $IMAGE_NAME\"`\n\n`sudo` `docker build --``rm` `-f` `\"$DOCKERFILE_PATH\"` `-t` `\"$IMAGE_NAME\"` `\"$BUILD_CONTEXT\"`\n\n`if` `[ $? -``ne` `0 ];` `then`\n\n    `echo` `\"Docker build failed. Exiting.\"`\n\n    `exit` `1`\n\n`fi`\n\n`# 推送Docker镜像`\n\n`echo` `\"Pushing Docker image : $IMAGE_NAME\"`\n\n`sudo` `docker push` `\"$IMAGE_NAME\"`\n\n`if` `[ $? -``ne` `0 ];` `then`\n\n    `echo` `\"Docker push failed. Exiting.\"`\n\n    `exit` `1`\n\n`fi`\n\n`echo` `\"Docker image built and pushed successfully : $IMAGE_NAME\"`\n\n  \n\n2\\. 本地测试运行\n==========\n\n运行脚本rundocker.sh\n\n[?](#)\n\n1\n\n2\n\n3\n\n`# 进入目录/home/Onanouser/ftt-em-edge/modules/AvatarModule/`\n\n`# 参数说明： 参数1为Tag中 0.0.$VERSION-arm64v8 中的$VERSION，运行的镜像为acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.1-arm64v8`\n\n`.``/rundocker``.sh 1`\n\n如下的脚本内容\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n`#!/bin/bash`\n\n`# 设置要使用的版本号`\n\n`VERSION=``\"$1\"`\n\n`# 检查参数是否为空`\n\n`if` `[ -z` `\"$VERSION\"` `];` `then`\n\n    `echo` `\"Usage: $0 <version>\"`\n\n    `exit` `1`\n\n`fi`\n\n`export` `DISPLAY=:0`\n\n`xhost +`\n\n`# 执行 Docker run 命令`\n\n`sudo` `docker run --gpus all \\`\n\n    `--device` `/dev/snd``:``/dev/snd` `\\`\n\n    `--device` `/dev/video0``:``/dev/video0` `\\`\n\n    `-``v` `/run/user/1000/pulse``:``/run/user/1000/pulse` `\\`\n\n    `-``v` `/tmp/``.X11-unix:``/tmp/``.X11-unix \\`\n\n    `-``v` `/usr/share/alsa/alsa``.conf:``/usr/share/alsa/alsa``.conf \\`\n\n    `-``v` `/etc/asound``.conf:``/etc/asound``.conf \\`\n\n    `-``v` `~/.config``/pulse/cookie``:``/root/``.config``/pulse/cookie` `\\`\n\n    `-e PULSE_SERVER=unix:``/run/user/1000/pulse/native` `\\`\n\n    `-e DISPLAY=$DISPLAY \\`\n\n    `--privileged -it \\`\n\n    `acrembeddedfttdeveastus2001.azurecr.io``/avatarmodule``:0.0.$VERSION-arm64v8`\n\n对于运行脚本做出解释\n\n`docker run` 命令的详细解释：\n\n[?](#)\n\n`sudo` `docker run --gpus all \\`\n\n   `--device` `/dev/snd``:``/dev/snd` `\\`\n\n   `--device` `/dev/video0``:``/dev/video0` `\\`\n\n   `-``v` `/run/user/1000/pulse``:``/run/user/1000/pulse` `\\`\n\n   `-``v` `/tmp/``.X11-unix:``/tmp/``.X11-unix \\`\n\n   `-``v` `/usr/share/alsa/alsa``.conf:``/usr/share/alsa/alsa``.conf \\`\n\n   `-``v` `/etc/asound``.conf:``/etc/asound``.conf \\`\n\n   `-``v` `~/.config``/pulse/cookie``:``/root/``.config``/pulse/cookie` `\\`\n\n   `-e PULSE_SERVER=unix:``/run/user/1000/pulse/native` `\\`\n\n   `-e DISPLAY=$DISPLAY \\`\n\n   `--privileged -it \\`\n\n   `acrembeddedfttdeveastus2001.azurecr.io``/avatarmodule``:0.0.$VERSION-arm64v8`\n\n1.  `sudo docker run --gpus all`：以超级用户身份运行Docker容器，并使用主机的所有GPU。\n    \n2.  `--device /dev/snd:/dev/snd`：将主机的音频设备 `/dev/snd` 映射到容器内的相同路径，使容器能够访问主机的音频设备。\n    \n3.  `--device /dev/video0:/dev/video0`：将主机的第一个视频设备 `/dev/video0` 映射到容器内的相同路径，使容器能够访问主机的摄像头设备。\n    \n4.  `-v /run/user/1000/pulse:/run/user/1000/pulse`：将主机的 `/run/user/1000/pulse` 目录挂载到容器内的相同路径，以使容器能够与主机的PulseAudio服务器通信。\n    \n5.  `-v /tmp/.X11-unix:/tmp/.X11-unix`：将主机的X11 Unix套接字挂载到容器内，以使容器能够使用主机的显示服务器，支持图形界面应用的显示。\n    \n6.  `-v /usr/share/alsa/alsa.conf:/usr/share/alsa/alsa.conf`：将主机的ALSA配置文件挂载到容器内的相同路径，以使容器能够使用主机的ALSA配置。\n    \n7.  `-v /etc/asound.conf:/etc/asound.conf`：将主机的 `asound.conf` 文件挂载到容器内的相同路径，以使容器能够使用主机的音频配置。\n    \n8.  `-v ~/.config/pulse/cookie:/root/.config/pulse/cookie`：将主机用户的PulseAudio cookie文件挂载到容器内的相同路径，使容器内的PulseAudio客户端能够验证并连接到主机的PulseAudio服务器。\n    \n9.  `-e PULSE_SERVER=unix:/run/user/1000/pulse/native`：设置环境变量 `PULSE_SERVER`，指定PulseAudio服务器的地址，以使容器内的应用程序能够连接到主机的PulseAudio服务器。\n    \n10.  `-e DISPLAY=$DISPLAY`：设置环境变量 `DISPLAY`，以使容器内的应用程序能够使用主机的显示服务器。\n    \n11.  `--privileged`：以特权模式运行容器，允许容器访问主机的所有设备。这个选项赋予容器更多的权限，类似于主机上的root权限。\n    \n12.  `-it`：`-i` 保持标准输入打开，`-t` 分配一个伪终端，这两个选项通常用于交互式终端。\n    \n13.  `acrembeddedfttdeveastus2001.azurecr.io/avatarmodule:0.0.$VERSION-arm64v8`：这是要运行的Docker镜像的名称和标签。在这里，镜像存储在Azure容器注册表中，标签为 `0.0.$VERSION-arm64v8`，其中 `$VERSION` 是一个版本变量。\n    \n\n在Azure IoT Edge部署时， -v 参数添加到容器创建选项的Binds中，-e参数添加到环境设置中；\n\n请确保使用之前提到的脚本命令启动容器，以确保音频设备和PulseAudio配置正确传递;\n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}