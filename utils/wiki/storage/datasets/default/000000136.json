{
	"title": "VirtualFriend项目研究分析（一）",
	"author": "王宇",
	"publishTime": "十一月23,2023",
	"readTime": "12s",
	"tags": "[\"GPT相关\"]",
	"description": "GPT相关",
	"article": "  这是一个很有意思的项目，GitHub地址为：[VirtualFriend](https://github.com/yakami129/VirtualWife)，其也可以看作是一个基于大模型的AI原生应用，融入了角色VRM模型、声音ASR/TTS、\n\n1\\. 从项目结构上分析\n============\n\n1.1. Docker相关入口\n---------------\n\n入口文件为：\"start.bat\"，代码如下：\n\n**installer/windows/start.bat**\n\n[?](#)\n\n1\n\n2\n\n`@``echo` `off`\n\n`docker-compose -f ..\\docker-compose.yaml up -d`\n\n**分析为**：这段代码的作用是在后台启动由 docker-compose.yaml 文件定义的 Docker 容器。通过禁用命令回显，它可以在执行过程中隐藏命令的输出。\n\n*   **@echo off**：这是一个特殊的命令，用于禁止在批处理脚本执行时显示命令本身。它会关闭命令的回显功能，使脚本在运行时不会显示每个命令的输出。\n*   **docker-compose -f ..\\\\docker-compose.yaml up -d**：这是一个 docker-compose 命令，用于启动 Docker 容器。\n*   具体来说：\n\n1.  **docker-compose** 是一个命令行工具，用于管理和运行基于 Docker 的多容器应用程序。\n2.  **\\-f ..\\\\docker-compose.yaml** 指定了要使用的 Docker Compose 配置文件的路径。在这里，它指定了位于上级目录中的 docker-compose.yaml 文件。\n3.  **up** 是 docker-compose 命令的一个子命令，用于构建、创建和启动容器。\n4.  **\\-d** 参数表示以“后台模式”（detached mode）运行容器，即在后台运行容器而不阻塞命令提示符。\n\n往下分析：\n\n**docker-compose.yaml**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n`version:` `'3'`\n\n`services:`\n\n   `chatbot:`\n\n       `container_name:` `chatbot`\n\n       `image:` `okapi0129/virtualwife-chatbot``:``$``{``CHATBOT_TAG``:``-latest``}`\n\n       `extra_hosts:`\n\n        `-` `\"host.docker.internal:host-gateway\"`\n\n       `ports:`\n\n        `-` `8000``:``8000`\n\n       `environment:`\n\n         `-` `TZ=$``{``TIMEZONE``}`\n\n       `env_file:`\n\n         `-` `\"${ENV_FILE:-.env}\"`\n\n       `networks:`\n\n         `-` `virtualwife`\n\n   `chatvrm:`\n\n      `container_name:` `chatvrm`\n\n      `image:` `okapi0129/virtualwife-chatvrm``:``$``{``CHATVRM_TAG``:``-latest``}`\n\n      `environment:`\n\n        `-` `TZ=$``{``TIMEZONE``}` \n\n      `env_file:`\n\n        `-` `\"${ENV_FILE:-.env}\"`\n\n      `networks:`\n\n        `-` `virtualwife`\n\n   `gateway:`\n\n     `container_name:` `gateway`\n\n     `image:` `okapi0129/virtualwife-gateway``:``$``{``GATEWAY_TAG``:``-latest``}`\n\n     `restart:` `always`\n\n     `ports:`\n\n       `-` `$``{``NGINX_HTTP_PORT``:``-80``}``:``80`\n\n       `-` `$``{``NGINX_HTTPS_PORT``:``-443``}``:``443`\n\n     `environment:`\n\n       `-` `TZ=$``{``TIMEZONE``}`\n\n     `env_file:`\n\n       `-` `\"${ENV_FILE:-.env}\"`\n\n     `networks:`\n\n       `-` `virtualwife`\n\n`networks:`\n\n  `virtualwife:`\n\n    `driver:` `bridge`\n\n分析为：创建了三个服务services:chatbot、chatvrm、gateway，每一个服务都有自己的配置。注意，image字段表示的是从公网[https://hub.docker.com/](https://hub.docker.com/)拉取这三个镜像。重点放在domain-chatbot、domain-chatvrm、infrastructure-gateway这3个文件夹中的内容，镜像中的内容，是依据这几个文件夹（外加infrastructure-packaging文件夹）的内容来的。\n\n1.2. domain-chatbot\n-------------------\n\n是一个python语言写的后端程序，主要内容有如下：\n\n1.3. domain-chatvrm\n-------------------\n\n是一个基于next.js文件写的前端程序\n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}