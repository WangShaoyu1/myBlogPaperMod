{
	"title": "服务端渲染(ssr)",
	"author": "王宇",
	"publishTime": "四月09,2024",
	"readTime": "12s",
	"tags": "[\"十七、前端管理\"]",
	"description": "十七、前端管理",
	"article": "相关学习资料\n\n[https://cn.vuejs.org/guide/scaling-up/ssr](https://cn.vuejs.org/guide/scaling-up/ssr)\n\n[https://cn.vite-plugin-ssr.com/](https://cn.vite-plugin-ssr.com/)\n\n  \n\n文件结构\n\n\\- index.html  \n\\- server.js # main application server  \n\\- src/  \n\\- main.js # 导出环境无关的（通用的）应用代码  \n\\- entry-client.js # 将应用挂载到一个 DOM 元素上  \n\\- entry-server.js # 使用某框架的 SSR API 渲染该应用\n\n  \n\n  \n\n**package.json**\n\n[?](#)\n\n`{`\n\n    `\"scripts\"``:{`\n\n       `\"start\"``:` `\"node server\"`\n\n    `}`\n\n`}`\n\n  \n\n  \n\n**Dockerfile**\n\n[?](#)\n\n`#构建阶段`\n\n`FROM registry.yingzi.com:``8500``/library/node:``16.14``.``2``-alpine3.``15` `as builder`\n\n`WORKDIR` `'/web_app'`\n\n`COPY` `package``.json .`\n\n`COPY yarn.lock .`\n\n`RUN npm config set` `@yingzi``:registry http:``//maven.yingzi.com:9091/nexus/repository/npmyz/`\n\n`RUN npm config set registry https:``//registry.npmmirror.com`\n\n`RUN npm config set sass_binary_site https:``//npmmirror.com/mirrors/node-sass/`\n\n`RUN yarn`\n\n`# 省略部分...`\n\n`COPY . .`\n\n`# RUN node ./scripts/avatar.js`\n\n`RUN yarn build`\n\n`# 直接启动服务即可`\n\n`CMD [``\"yarn\"``,` `\"start\"``]`\n\n注意不是yarn start\n\n`CMD [\"yarn\", \"start\"]` 和直接运行 `yarn start` 的区别在于它们运行的环境。  \n`CMD [\"yarn\", \"start\"]` 是在 Dockerfile 文件中使用的。这会指定在 docker 容器启动时默认执行的命令，也就是说，当你通过 Docker 运行了一个容器实例以后，Docker 就会在这个新的隔离环境中运行 `yarn start`。  \n而 `yarn start` 通常是在你的本地开发环境中直接执行的，它会直接在你的本地运行，并可以直接访问你电脑上的文件系统和环境变量。  \n所以核心区别在于：`CMD [\"yarn\", \"start\"]` 是在 docker 容器这个隔离环境中运行，而 `yarn start` 是在你的本地环境中运行。\n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}