{
	"title": "自定义postcss插件，将gap属性转换xx，适配低端机",
	"author": "王宇",
	"publishTime": "五月28,2024",
	"readTime": "12s",
	"tags": "[\"postcss\"]",
	"description": "postcss",
	"article": "发现flex下的gap属性，使用各种前缀和polyfill都无法兼容低端机，只能修改写法或者使用外力解决\n\n网上有这个**flex-gap-polyfill**但用了后都是坑\n\n那就自己造一个简陋版的，能转换成符合几个场景使用的\n\n[?](#)\n\n`import postcss from` `\"postcss\"``;`\n\n`const isExclude = (reg, file) => {`\n\n  `if` `(Object.prototype.toString.call(reg) !==` `\"[object RegExp]\"``) {`\n\n    `throw` `new` `Error(``\"options.exclude should be RegExp.\"``);`\n\n  `}`\n\n  `return` `file.match(reg) !==` `null``;`\n\n`};`\n\n`const postcssGapToMargin = (opts) => {`\n\n  `return` `{`\n\n    `postcssPlugin:` `\"postcss-gap-to-margin\"``,`\n\n    `Once(css, { result }) {`\n\n      `css.walkRules((rule) => {`\n\n        `const file = rule.source?.input.file ||` `\"\"``;`\n\n        `if` `(opts.exclude && file) {`\n\n          `if` `(`\n\n            `Object.prototype.toString.call(opts.exclude) ===` `\"[object RegExp]\"`\n\n          `) {`\n\n            `if` `(isExclude(opts.exclude, file))` `return``;`\n\n          `}` `else` `if` `(`\n\n            `// Object.prototype.toString.call(opts.exclude) === '[object Array]' &&`\n\n            `opts.exclude` `instanceof` `Array`\n\n          `) {`\n\n            `for` `(let i = 0; i < opts.exclude.length; i++) {`\n\n              `if` `(isExclude(opts.exclude[i], file))` `return``;`\n\n            `}`\n\n          `}` `else` `{`\n\n            `throw` `new` `Error(``\"options.exclude should be RegExp or Array.\"``);`\n\n          `}`\n\n        `}`\n\n        `// 检查该元素的 display 是否为 'flex'`\n\n        `let isFlex =` `false``;`\n\n        `// 是否有gap属性值`\n\n        `let hasGap =` `false``;`\n\n        `let gapValue = 0;`\n\n        `let classname =` `\"\"``;`\n\n        `let execute = () => {};`\n\n        `rule.walkDecls((decl) => {`\n\n          `if` `(decl.prop ===` `\"gap\"``) {`\n\n            `hasGap =` `true``;`\n\n            `gapValue = decl.value;`\n\n            `execute = () => {`\n\n              `decl.remove();`\n\n            `};`\n\n            `classname = decl.parent.selector;`\n\n          `}` `else` `if` `(`\n\n            `decl.prop ===` `\"display\"` `&&`\n\n            `[``\"flex\"``,` `\"inline-flex\"``].includes(decl.value)`\n\n          `) {`\n\n            `isFlex =` `true``;`\n\n          `}`\n\n        `});`\n\n        `if` `(isFlex && hasGap) {`\n\n          `const newRule = postcss.rule({`\n\n            ``selector: `${classname} > *:not(:last-child), ${classname} > *:only-child`,``\n\n            `raw: { semicolon:` `true` `},`\n\n          `});`\n\n          `execute();`\n\n          `newRule.append({`\n\n            `prop:` `\"margin-right\"``,`\n\n            `value: gapValue,`\n\n          `});`\n\n          `rule.after(newRule);`\n\n        `}`\n\n      `});`\n\n    `},`\n\n    `// Declaration(decl) {`\n\n    `//     console.log('Declaration', decl)`\n\n    `// }`\n\n  `};`\n\n`};`\n\n`export` `default` `postcssGapToMargin;`\n\n原理是将带有flex/inline-flex的父节点下面的子节点(除最后一个)增加margin-right\n\n* * *\n\n这个插件的工作流程如下：\n\n1.  遍历所有的 CSS 规则。\n2.  对于每个规则，检查是否有 `exclude` 选项，并且该选项是否匹配当前文件。如果匹配，则跳过此规则。\n3.  检查规则是否包含 `gap` 属性和 `display` 属性（值为 `flex` 或 `inline-flex`）。如果都有，那么就会创建一个新的规则，将 `gap` 属性转换为 `margin-right` 属性，并将新规则添加到当前规则之后。\n\n注意，这个插件只处理 `flex` 和 `inline-flex` 的元素，因为 `gap` 属性在这些元素中才有意义。\n\n  \n\n热知识\n---\n\nPostCSS 的 `Once` 方法是一个特殊的插件方法，它只会在 PostCSS 解析完整个 CSS 文件并生成了 CSS 抽象语法树（AST）后被调用一次。这个方法接收一个 `root` 参数，这个参数就是生成的 AST。\n\n这个方法通常用于执行需要遍历整个 CSS 文件的操作。例如，你可能想要找出所有的颜色值并替换它们，或者你可能想要检查所有的规则并删除那些未使用的规则。\n\n  \n\n  \n\n使用方式\n====\n\n**vite.config.ts**\n\n[?](#)\n\n`import ppgtm from` `'./plugins/postcss-gap-to-margin'`\n\n`export` `default` `defineConfig( ({ mode, command }) => {`\n\n`// ...`\n\n`return` `{`\n\n`// ...`\n\n    `css: {`\n\n       `postcss:{`\n\n          `ppgtm({`\n\n            `exclude: [/node_modules/]`\n\n          `})`\n\n       `}`\n\n    `}`\n\n`}`\n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}