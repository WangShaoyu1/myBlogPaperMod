{
	"title": "AzureIoTEdge模块间通讯sample",
	"author": "王宇",
	"publishTime": "六月24,2024",
	"readTime": "12s",
	"tags": "[\"赵吉山\"]",
	"description": "赵吉山",
	"article": "当涉及使用Azure IoT Edge在C++中进行模块间通信时\n\n### 模块1（发送消息）\n\n[?](#)\n\n`#include <iostream>`\n\n`#include <string>`\n\n`#include \"azure-iot-sdk-cpp/iothub_device_client_ll.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothub_message.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothub_module_client_ll.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothub_client_options.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothubtransportmqtt.h\"`\n\n`using` `namespace` `std;`\n\n`static` `const` `char``* connectionString =` `\"<module1-connection-string>\"``;` `// 替换为模块1的连接字符串`\n\n`static` `const` `char``* moduleId =` `\"module1\"``;`\n\n`static` `const` `char``* outputName =` `\"output1\"``;`\n\n`static` `IOTHUB_MODULE_CLIENT_LL_HANDLE moduleClient;`\n\n`// 消息发送的回调函数`\n\n`static` `void` `sendConfirmationCallback(IOTHUB_CLIENT_CONFIRMATION_RESULT result,` `void``* userContextCallback) {`\n\n    `if` `(result == IOTHUB_CLIENT_CONFIRMATION_OK) {`\n\n        `cout <<` `\"Message sent to module2.\"` `<< endl;`\n\n    `}` `else` `{`\n\n        `cout <<` `\"Failed to send message to module2.\"` `<< endl;`\n\n    `}`\n\n`}`\n\n`int` `main() {`\n\n    `// 初始化 IoT Hub SDK`\n\n    `if` `(IoTHub_Init() != 0) {`\n\n        `cout <<` `\"Failed to initialize the IoT Hub SDK.\"` `<< endl;`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 创建 IoT Hub 模块客户端`\n\n    `moduleClient = IoTHubModuleClient_LL_CreateFromEnvironment(MQTT_Protocol);`\n\n    `if` `(moduleClient == nullptr) {`\n\n        `cout <<` `\"Failed to create IoT Hub module client.\"` `<< endl;`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 打开 IoT Hub 模块客户端连接`\n\n    `if` `(IoTHubModuleClient_LL_SetOption(moduleClient,` `\"moduleId\"``, moduleId) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to set module ID.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 设置连接状态回调函数（此处未设置，留待后续扩展）`\n\n    `if` `(IoTHubModuleClient_LL_SetConnectionStatusCallback(moduleClient, nullptr, nullptr) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to set connection status callback.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 设置输入消息回调函数（此处未设置，留待后续扩展）`\n\n    `if` `(IoTHubModuleClient_LL_SetMessageCallback(moduleClient, nullptr, nullptr) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to set message callback.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 打开 IoT Hub 模块客户端连接`\n\n    `if` `(IoTHubModuleClient_LL_Open(moduleClient, nullptr) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to open IoT Hub module client.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 模拟发送消息给 module2`\n\n    `string messageText =` `\"Hello from module1\"``;`\n\n    `IOTHUB_MESSAGE_HANDLE messageHandle = IoTHubMessage_CreateFromString(messageText.c_str());`\n\n    `if` `(messageHandle == nullptr) {`\n\n        `cout <<` `\"Failed to create IoT Hub message.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 发送消息到输出端口（output1）`\n\n    `if` `(IoTHubModuleClient_LL_SendEventAsync(moduleClient, messageHandle, sendConfirmationCallback, nullptr) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to send message asynchronously.\"` `<< endl;`\n\n        `IoTHubMessage_Destroy(messageHandle);`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `IoTHubMessage_Destroy(messageHandle);`\n\n    `// 等待一段时间以确保消息发送完成`\n\n    `cout <<` `\"Message sent asynchronously to module2.\"` `<< endl;`\n\n    `this_thread::sleep_for(chrono::seconds(5));`\n\n    `// 关闭 IoT Hub 模块客户端`\n\n    `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n    `IoTHub_Deinit();`\n\n    `return` `0;`\n\n`}`\n\n### 模块2（接收消息）\n\n[?](#)\n\n`#include <iostream>`\n\n`#include \"azure-iot-sdk-cpp/iothub_device_client_ll.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothub_message.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothub_module_client_ll.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothub_client_options.h\"`\n\n`#include \"azure-iot-sdk-cpp/iothubtransportmqtt.h\"`\n\n`using` `namespace` `std;`\n\n`static` `const` `char``* connectionString =` `\"<module2-connection-string>\"``;` `// 替换为模块2的连接字符串`\n\n`static` `const` `char``* moduleId =` `\"module2\"``;`\n\n`static` `IOTHUB_MODULE_CLIENT_LL_HANDLE moduleClient;`\n\n`// 消息接收的回调函数`\n\n`static` `IOTHUBMESSAGE_DISPOSITION_RESULT receiveMessageCallback(IOTHUB_MESSAGE_HANDLE message,` `void``* userContextCallback) {`\n\n    `const` `char``* messageString;`\n\n    `size_t` `messageSize;`\n\n    `// 从消息中获取数据`\n\n    `if` `(IoTHubMessage_GetByteArray(message,` `reinterpret_cast``<``const` `unsigned` `char``**>(&messageString), &messageSize) != IOTHUB_MESSAGE_OK) {`\n\n        `cout <<` `\"Failed to get message data.\"` `<< endl;`\n\n        `return` `IOTHUBMESSAGE_REJECTED;`\n\n    `}`\n\n    `// 输出接收到的消息内容`\n\n    `cout <<` `\"Received message from module1: \"` `<< messageString << endl;`\n\n    `// 确认接收消息`\n\n    `IoTHubModuleClient_LL_SendMessageDisposition(moduleClient, message, IOTHUBMESSAGE_ACCEPTED);`\n\n    `return` `IOTHUBMESSAGE_ACCEPTED;`\n\n`}`\n\n`int` `main() {`\n\n    `// 初始化 IoT Hub SDK`\n\n    `if` `(IoTHub_Init() != 0) {`\n\n        `cout <<` `\"Failed to initialize the IoT Hub SDK.\"` `<< endl;`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 创建 IoT Hub 模块客户端`\n\n    `moduleClient = IoTHubModuleClient_LL_CreateFromEnvironment(MQTT_Protocol);`\n\n    `if` `(moduleClient == nullptr) {`\n\n        `cout <<` `\"Failed to create IoT Hub module client.\"` `<< endl;`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 设置模块 ID`\n\n    `if` `(IoTHubModuleClient_LL_SetOption(moduleClient,` `\"moduleId\"``, moduleId) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to set module ID.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 设置连接状态回调函数（此处未设置，留待后续扩展）`\n\n    `if` `(IoTHubModuleClient_LL_SetConnectionStatusCallback(moduleClient, nullptr, nullptr) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to set connection status callback.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 设置输入消息回调函数`\n\n    `if` `(IoTHubModuleClient_LL_SetInputMessageCallback(moduleClient,` `\"input1\"``, receiveMessageCallback, nullptr) != IOTHUB_CLIENT_OK) {`\n\n        `cout <<` `\"Failed to set message callback.\"` `<< endl;`\n\n        `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n        `IoTHub_Deinit();`\n\n        `return` `-1;`\n\n    `}`\n\n    `// 输出模块等待消息`\n\n    `cout <<` `\"Waiting for messages from module1...\"` `<< endl;`\n\n    `// 保持运行状态`\n\n    `while` `(``true``) {`\n\n        `IoTHubModuleClient_LL_DoWork(moduleClient);`\n\n        `this_thread::sleep_for(chrono::seconds(1));`\n\n    `}`\n\n    `// 关闭 IoT Hub 模块客户端`\n\n    `IoTHubModuleClient_LL_Destroy(moduleClient);`\n\n    `IoTHub_Deinit();`\n\n    `return` `0;`\n\n`}`\n\n### 代码注释说明\n\n*   **IoT Hub 初始化**：初始化 IoT Hub SDK，确保能够正确使用 Azure IoT Edge 相关的功能。\n*   **模块客户端创建**：使用 `IoTHubModuleClient_LL_CreateFromEnvironment` 函数创建 IoT Hub 模块客户端。\n*   **连接设置和回调函数设置**：设置模块 ID、连接状态回调和消息接收回调函数，以便处理连接状态变化和接收到的消息。\n*   **消息发送和接收处理**：在模块1中，创建消息并通过 `IoTHubModuleClient_LL_SendEventAsync` 函数发送到模块2；在模块2中，使用 `IoTHubModuleClient_LL_SetInputMessageCallback` 函数监听来自模块1的消息。\n*   \\*\\*消息处理\n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}