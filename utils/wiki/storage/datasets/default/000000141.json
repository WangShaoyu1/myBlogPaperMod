{
	"title": "“平替”来了？",
	"author": "王宇",
	"publishTime": "四月11,2024",
	"readTime": "12s",
	"tags": "[\"GPT相关\"]",
	"description": "GPT相关",
	"article": "1\\. 概述     \n===========\n\n        目前公司研发中的虚拟数字人产品，定位成一个能和用户进行语音交互，能感知有限外部世界的，“住在屏幕里”的具有人形并是通过软件代码编写的“虚拟人物”。从这个定义来看，我们可以无限来拆解这些修饰词的概念，并结合当前时代的科学技术水平来给每一个因素做一个合理的限定。同时从技术角度来给每个部分做对应技术分析，以公开的技术、开源的代码做参考，对比每个技术的优缺点。在这个分析过程中，会涉及到技术选型分析、测试数据、效果测试等环节，技术层面会涉及到新知识、新概念，甚至知识盲区，故不会做过多细致的技术分析，以简洁描述为主。\n\n【也有整体的方案：[https://www.xfyun.cn/doc/tts/virtual\\_human/Web-SDK.html】](https://www.xfyun.cn/doc/tts/virtual_human/Web-SDK.html)\n\n【如何最简单、通俗地理解什么是NLP？[https://www.zhihu.com/question/433756594](https://www.zhihu.com/question/433756594)】\n\n1.1. 能和用户进行语音交互\n---------------\n\n     这个定义涉及到如下的概念：\n\n1.  耳朵听得见、听得清、听得懂\n2.  能给予合适的反馈，播报反馈内容\n\n“**耳朵，听得见**，指的是硬件麦克风，目前万得厨2.0上的麦克风模组是科大讯飞公司建议的双麦模组。补充一点是，麦克风选型和麦克风阵列构型对声学效果至关重要，要求较高。可参考：[智能硬件通用方案说明](https://www.xfyun.cn/doc/solutions/hardwareUniversal/hardwareUniversalreadme.html)、[讯飞软硬件产品接入](https://aiui-doc.xf-yun.com/project-1/doc-38/)\n\n“**听得清**”，指的是能够在外部有噪音情况下听得清用户语音内容，以及方言、不同语种（当前主打中文）、不同音色等等的语音表达，能够准确提炼出准确的文本内容。目前万得厨2.0采用的是科大讯飞提供的降噪算法，以及方言、语种、语音动态修正。\n\n“**懂得懂**”，指的是能够识别出用户的语音所要表达的对应文本，词语类包含行业内专有名词，语义类包含整句话所要表达的意思，词语类采用的是科大讯飞的热词方案，也可使用：[语音听写自训练平台](https://www.xfyun.cn/solutions/voicedication-train)，来实现专有词语的准确识别。语义理解采用的是虚拟人公司的发难，通过接口api形式调用。\n\n“**能给予合适的反馈，播报反馈内容**”，指的是在语义理解的基础上，识别出意图，给出语音反馈（从文本到语音），这一块技术难度系数最大，本质是对人类语言逻辑的一次响应，智能程度在此得到充分的表达。目前采用的是虚拟人公司提供的知识库方案，包含指令、问答。\n\n### 1.1.1. 分析\n\n**听得见、听得清**，目前采用的全是科大讯飞公司的方案，其方案整体实力在业内算是排在头部，平替方案为：采用其他公司的语音方案。\n\n**听得懂**，包含行业内专有名词的词语类采用的是科大讯飞公司方案，平替方案为：采用其他公司的语音方案。\n\n**听得懂，能给予合适的反馈，播报反馈内容，**“听得懂**”**中，整句话的语义理解，其实现技术为分词、文本分类，实体识别等等，平替方案如下所示。给予合适的反馈可以当做是“技能”，比作是AI时代的APP。可以是执行单一任务的弱智能，也可是能执行多任务、泛化问题的强智能。可使用问答系统、不同的大模型单独或者配合实现 。\n\n### 1.1.2. 指令实现平替方案\n\n    这个有几种常见的算法可以实现：余弦(cosine)相似度、逆文本频率(idf)与余弦(cosine)相结合、BM25 相关性评分、Jaccard 系数。\n\n    如果要做每种算法的效果对比的话，准备工作如下：\n\n*   step1：通过word2vec对txt文件进行向量训练，生成词向量文件\n*   step2：对训练出来的词，计算其在词料库中的idf词，生成idf.txt文件\n*   step3：统计词料库中存在的句子，生成flie\\_sentence.txt文件\n*   step4：运行程序，对设定好的输入的句子与文本，生成最相似的结果\n\n平替方案中选用余弦相似度与Jaccard系数做对比，需要step2和step4，具体步骤如下：\n\n1.  整理相似问文件、标准问文件；\n2.  作为输入，进行余弦相似度和Jaccard相似度计算\n\n核心代码如下：\n\n**test.py**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n`def` `test():`\n\n    `test_data``=``[u``'启动烹饪'``]`\n\n    `model_list``=``[``'cosine'``,``'jaccard'``,``'idf'``,``'bm25'``]`\n\n    `file_sentence``=``codecs.``open``(``'./data_1/file_sentence.txt'``,``'r'``,encoding``=``'utf-8'``)`\n\n    `train_data``=``file_sentence.readlines()`\n\n    `for` `model` `in` `model_list[:``1``]:`\n\n        `t1` `=` `time.time()`\n\n        `dataset``=``dict``()`\n\n        `result``=``dict``()`\n\n        `for` `s1` `in` `test_data[``0``:``1``]:`\n\n            `dataset[s1]``=``dict``()`\n\n            `for` `s2` `in` `train_data:`\n\n                `s2``=``s2.strip()`\n\n                `if` `s1!``=``s2:`\n\n                    `sim``=``similarity.ssim(s1,s2,model``=``model)`\n\n                    `dataset[s1][s2]``=``dataset[s1].get(s2,``0``)``+``sim`\n\n        `for` `r` `in` `dataset:`\n\n            `top``=``sorted``(dataset[r].items(),key``=``lambda` `x:x[``1``],reverse``=``True``)`\n\n            `result[r]``=``top[``0``:``10``]`\n\n        `with codecs.``open``(``'./data_1/test_result.txt'``,``'w'``,encoding``=``'utf-8'``) as f:`\n\n            `f.write(``'--------------The result of %s method------------------\\n '``%``model)`\n\n            `f.write(``'\\tThe computing cost %.3f seconds\\n'``%` `(time.time()` `-` `t1))`\n\n            `f.write(json.dumps(result, ensure_ascii``=``False``, indent``=``2``, sort_keys``=``False``))`\n\n            `f.write(``'\\n\\n'``)`\n\n    `file_sentence.close()`\n\n**similarity.py**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n`#encoding:utf-8`\n\n`from` `__future__` `import` `absolute_import`\n\n`import` `jieba`\n\n`import` `time`\n\n`from` `scipy` `import` `spatial`\n\n`import` `numpy as np`\n\n`from` `Utils.load_data` `import` `*`\n\n`file_voc``=``'./data_1/voc.txt'`\n\n`file_idf``=``'./data_1/idf.txt'`\n\n`file_userdict``=``'./data_1/medfw.txt'`\n\n`class` `SSIM(``object``):`\n\n    `def` `__init__(``self``):`\n\n        `t1` `=` `time.time()`\n\n        `self``.voc``=``load_voc(file_voc)`\n\n        `print``(``\"Loading  word2vec vector cost %.3f seconds...\\n\"` `%` `(time.time()` `-` `t1))`\n\n        `t1` `=` `time.time()`\n\n        `self``.idf``=``load_idf(file_idf)`\n\n        `print``(``\"Loading  idf data cost %.3f seconds...\\n\"` `%` `(time.time()` `-` `t1))`\n\n        `jieba.load_userdict(file_userdict)`\n\n    `def` `M_jaccard(``self``,s1, s2):`\n\n        `s1` `=` `set``(s1)`\n\n        `s2` `=` `set``(s2)`\n\n        `ret1` `=` `s1.intersection(s2)`\n\n        `ret2` `=` `s1.union(s2)`\n\n        `jaccard` `=` `1.0` `*` `len``(ret1)``/` `len``(ret2)`\n\n        `return` `jaccard`\n\n    `def` `ssim(``self``,s1,s2,model``=``'cosine'``):`\n\n        `if` `model``=``=``'idf'``:`\n\n            `f_ssim``=``self``.M_idf`\n\n        `elif` `model``=``=``'bm25'``:`\n\n            `f_ssim``=``self``.M_bm25`\n\n        `elif` `model``=``=``'jaccard'``:`\n\n            `f_ssim``=``self``.M_jaccard`\n\n        `else``:`\n\n            `f_ssim` `=` `self``.M_cosine`\n\n        `sim``=``f_ssim(s1,s2)`\n\n        `return` `sim`\n\n`sm``=``SSIM()`\n\n`ssim``=``sm.ssim`\n\n以“启动烹饪”为标准问，数字为相似度，取相似度前十的数据为：\n\n**result.json**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n`--------------The result of cosine method------------------`\n\n    `The computing cost 0.200 seconds`\n\n`{`\n\n  `\"启动烹饪\": [`\n\n    `[\"烹饪启动\",1.0],`\n\n    `[\"启动烹饪程序\",0.9998],`\n\n    `[\"启动微波烹饪\",0.9998],`\n\n    `[\"启动微博烹饪\",0.9998],`\n\n    `[\"启动微波炉烹饪\",0.9997],`\n\n    `[\"请启动烹饪\",0.9997],`\n\n    `[\"我想烹饪启动\",0.9997],`\n\n    `[\"查看DIY烹饪页面\",0.9996],`\n\n    `[\"启动烹饪功能\",0.9996],`\n\n    `[\"启动食品烹饪\",0.9996],`\n\n    `[\"请启动微波炉烹饪\",0.9996],`\n\n    `[\"停止烹饪\",0.9996],`\n\n    `[\"烹饪停止\",0.9996],`\n\n    `[\"跳转到我的烹饪记录页面\",0.9995],`\n\n    `[\"宝宝微热烹饪\",0.9995],`\n\n    `[\"打开DIY烹饪页面\",0.9995],`\n\n    `[\"开启DIY烹饪页面\",0.9995],`\n\n    `[\"调出DIY烹饪页面\",0.9995],`\n\n    `[\"查看DIY烹饪\",0.9995],`\n\n    `[\"开启一键烹饪页面\",0.9995],`\n\n    `[\"调出一键烹饪页面\",0.9995],`\n\n    `[\"查看一键烹饪页面\",0.9995],`\n\n    `[\"我想一键烹饪\",0.9995],`\n\n    `[\"我要查看一键烹饪页面\",0.9995],`\n\n    `[\"查看智能烹饪页面\",0.9995],`\n\n    `[\"查看智能烹饪\",0.9995],`\n\n    `[\"我要查看智能烹饪页面\",0.9995],`\n\n    `[\"开启烹饪\",0.9995],`\n\n    `[\"开启烹饪程序\",0.9995],`\n\n    `[\"烹饪开启\",0.9995`\n\n    `]`\n\n  `]`\n\n`}`\n\n`--------------The result of jaccard method------------------`\n\n    `The computing cost 0.010 seconds`\n\n`{`\n\n  `\"启动烹饪\": [`\n\n    `[\"烹饪启动\",1.0],`\n\n    `[\"请启动烹饪\",0.8],`\n\n    `[\"启动烹饪功能\",0.667],`\n\n    `[\"启动烹饪程序\",0.667],`\n\n    `[\"启动食品烹饪\",0.667],`\n\n    `[\"启动微波烹饪\",0.667],`\n\n    `[\"启动微博烹饪\",0.667],`\n\n    `[\"我想烹饪启动\",0.667],`\n\n    `[\"启动烹调\",0.6],`\n\n    `[\"开启烹饪\",0.6],`\n\n    `[\"烹调启动\",0.6],`\n\n    `[\"烹饪开启\",0.6],`\n\n    `[\"启动微波炉烹饪\",0.571],`\n\n    `[\"启动万得厨烹饪\",0.571],`\n\n    `[\"启动\",0.5],`\n\n    `[\"请启动微波炉烹饪\",0.5],`\n\n    `[\"开启一键烹饪\",0.429],`\n\n    `[\"开启智能烹饪\",0.429],`\n\n    `[\"启动烹调功能\",0.429],`\n\n    `[\"开启烹饪功能\",0.429],`\n\n    `[\"启动烹调程序\",0.429],`\n\n    `[\"开启烹饪程序\",0.429],`\n\n    `[\"启动食品烹调\",0.429],`\n\n    `[\"开启食品烹饪\",0.429],`\n\n    `[\"启动微波烹调\",0.429],`\n\n    `[\"启动微波炉烹调\",0.375],`\n\n    `[\"启动万得厨烹调\",0.375],`\n\n    `[\"开启DIY烹饪\",0.375],`\n\n    `[\"重新烹饪\",0.333],`\n\n    `[\"解冻烹饪\",0.333`\n\n    `]`\n\n  `]`\n\n`}`\n\n这其中能够看出，对于标准问与列出的相似问列表，其中的按照语义可按照两者之间相关性给出匹配，但这和目标要求的路径有点差距。举例子：\n\n1.  “开始烹饪”，\\[“烹饪启动”，“烹饪开启”\\]，两者之间有一定的语义相关性，但与“开始做菜”的语义相似度为0，相似问的目的就是将“开始做菜”这种Jaccard相似度低的，也能匹配的上，这里需要做一个转换、训练；\n2.  语义匹配度，相似问里面的语句应该都得是1，相似问的期望就是：在相似问里面的所有语句，匹配度都是1，当然也可设置一个阈值（一般90%以上）；\n3.  余弦（cosine）相似度方案有较明显的误识别情况，而Jaccard相似度方案又识别不了的情况（设置某一个阈值的情况），这个需要讲训练集（目前是相似问）需要做一些工程上的处理，提升准确度。\n\n### 1.1.3. 优化方案-----使用bert模型\n\n    模型名称为bert-base-chinese，其具体实现如下：\n\n**similarity.py**  展开源码\n\n[expand source](#)[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n`import` `json`\n\n`import` `time`\n\n`import` `numpy as np`\n\n`import` `pandas as pd`\n\n`from` `flask` `import` `Flask, request, jsonify`\n\n`from` `sentence_transformers` `import` `SentenceTransformer`\n\n`app` `=` `Flask(__name__)`\n\n`model` `=` `SentenceTransformer(r``'D:\\gitlab\\sentence-similarity\\model\\bert-base-chinese'``)`\n\n`model.``eval``()`\n\n`content` `=` `pd.read_table(``\"./data_1/bert_test_data.txt\"``, header``=``None``)[``0``].values.tolist()`\n\n`passage_embedding` `=` `model.encode(content, convert_to_numpy``=``True``)`\n\n`def` `cosine_similarity(x, y):`\n\n    `num` `=` `x.dot(y.T)`\n\n    `denom` `=` `np.linalg.norm(x)` `*` `np.linalg.norm(y, axis``=``1``)`\n\n    `return` `num` `/` `denom`\n\n`def` `sim(ask, level):`\n\n    `time1` `=` `time.time()`\n\n    `ask` `=` `model.encode([ask])`\n\n    `time2` `=` `time.time()`\n\n    `spend_time` `=` `time2` `-` `time1`\n\n    `print``(spend_time)`\n\n    `cos_matrix` `=` `cosine_similarity(ask, passage_embedding)[``0``]`\n\n    `index` `=` `np.argsort(``-``cos_matrix)[level]`\n\n    `return` `[content[index], cos_matrix[index]]`\n\n`@app``.route(``'/top_ask'``, methods``=``[``'GET'``,` `'POST'``])`\n\n`def` `get_synonyms():`\n\n    `json_data` `=` `request.get_data()`\n\n    `comment_json` `=` `json.loads(json_data)`\n\n    `ask` `=` `comment_json[``'ask'``]`\n\n    `json_data` `=` `sim2(ask,` `0``)`\n\n    `return` `jsonify({``\"text\"``:` `str``(json_data[``0``]),` `\"相似度\"``:` `str``(json_data[``1``])})`\n\n`if` `__name__` `=``=` `'__main__'``:`  `#`\n\n    `app.run(host``=``\"0.0.0.0\"``, port``=``1089``, debug``=``True``)`\n\n其中：\n\n*   bert\\_test\\_data在本例中是相似问集合，\n\n1.2. 具有人形并通过文本驱动动作\n------------------\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}