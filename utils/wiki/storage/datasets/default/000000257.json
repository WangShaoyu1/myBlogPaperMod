{
	"title": "业务知识检索方案",
	"author": "王宇",
	"publishTime": "七月04,2024",
	"readTime": "12s",
	"tags": "[\"唐玮\"]",
	"description": "唐玮",
	"article": "*   1[1\\. 业务知识检索方案分析](#id-业务知识检索方案-业务知识检索方案分析)\n*   2[2\\. DB\\_LLM](#id-业务知识检索方案-DB_LLM)\n    *   2.1[2.1. 指标含义](#id-业务知识检索方案-指标含义)\n    *   2.2[2.2. 通过修改SQL条件筛选方式为like，并配套相似度算法，则“SQL方向正确，同时匹配数据”能接近95.8%的准确率](#id-业务知识检索方案-通过修改SQL条件筛选方式为like，并配套相似度算法，则“SQL方向正确，同时匹配数据”能接近95.8%的准确率)\n    *   2.3[2.3. 模型输出SQL审核](#id-业务知识检索方案-模型输出SQL审核)\n    *   2.4[2.4. 其他问题](#id-业务知识检索方案-其他问题)\n\n1\\. 业务知识检索方案分析\n==============\n\n（1）知识检索召回、用户标签等高关联数据作为固定插入，？业务数据库（订单数据、实时商品食谱等业务数据）查询，将指令集中包含的每条各设置成一条函数通过function call选择调用，由大模型进行意图识别、任务规划、函数选择，应用层处理函数调用；\n\n  \n\n一个场景即是一个SQL\n\n 方案\n\n优\n\n劣\n\n 方案\n\n优\n\n劣\n\n遍历各个场景，每个场景编写成一个function，配套场景的描述。\n\n比较自由的改进function的输入输出，和运行流程。\n\n控制SQL的安全性，防止系统发生异常。\n\n1.  食谱18个字段，营养29个字段。场景多，编写困难。\n2.  场景多，可能会导致超出模型token限制。\n3.  场景多，可能会导致模型识别率下降\n\n遍历各个场景，每个场景编写成一个function，配套场景的描述。基于知识库，检索出合理数量的相关function。\n\n  \n\n  \n\n  \n\n如上的一个改进\n\n配一个 NL2SQL的function\n\n不用每个场景编写SQL。但是实际效果未知，或许可能需要采取合适的方法，如提示工程、RAG、微调等方式进一步优化准确率。或许可以引用邓丽辉的模型。\n\n安全性不是很好，需要花时间识别不良的SQL，禁止被执行或者修改为良好安全的SQL后，再执行。\n\n  \n\n  \n\n  \n\n采用合适的方法，提高安全性\n\n1.  设置大模型使用的数据库连接账户的权限范围为“SELECT\"，并且只能看到特定表。每次查询自动加上LIMIT限制语句。\n\n![](/download/thumbnails/129177965/image2024-7-2_15-35-35.png?version=1&modificationDate=1719905735511&api=v2)\n\n  \n\n（1）知识检索召回、用户标签等高关联数据作为固定插入，？业务数据库（订单数据、实时商品食谱等业务数据）查询，将指令集中包含的每条各设置成一条函数通过function call选择调用，由大模型进行意图识别、任务规划、函数选择，应用层处理函数调用；\n\n知识的拼接。需要定期拼接知识并更新向量库。\n\n需要考虑除了单条知识外。一些需要计算、排序类的知识需要挑出来，编写单条程序进行拼接。营养类的数据，目前只有我们虚拟人的数据库有。只能引用我们的数据库。\n\n  \n\n2\\. DB\\_LLM\n===========\n\n使用Langchain 的dbllm模块，接入食谱营养表。并用20240619表格问答120条测试用例测试。模型使用”ERNIE-4.0-Turbo-8K“。结果如下\n\n[表格问答测试0619【llm】.xlsx](/download/attachments/129177965/%E8%A1%A8%E6%A0%BC%E9%97%AE%E7%AD%94%E6%B5%8B%E8%AF%950619%E3%80%90llm%E3%80%91.xlsx?version=1&modificationDate=1719992696143&api=v2)\n\n  \n\n正确数\n\n比例\n\n  \n\n正确数\n\n比例\n\nSQL方向正确，无匹配数据\n\n115\n\n95.8%\n\nSQL方向正确，同时匹配数据\n\n89\n\n74.2%\n\n2.1. 指标含义\n---------\n\n**SQL方向正确，无匹配数据，是指场景识别是对的，只是条件值没匹配到数据。**例如下面这个SQL是对的，只是实际食谱的名称是“豉汁带鱼，拿走不谢~”，名称没有对上。这时候属于“SQL方向正确”。\n\n问题：做豉汁带鱼需要什么料子  \nSQL：SELECT materials\\_list FROM recipe\\_knowledge\\_nutrition\\_test WHERE title = '豉汁带鱼' LIMIT 1;  \n返回：None\n\n**SQL方向正确，同时匹配数据。是指场景识别正确，同时条件值匹配到数据。**\n\n问题：有哪些推荐的带鱼菜谱  \nSQL：SELECT title, introduce FROM recipe\\_knowledge\\_nutrition\\_test WHERE materials\\_list LIKE '%带鱼%' LIMIT 5;  \n返回：\\[('香煎带鱼，一定要试试?', ''), ('豉汁带鱼，拿走不谢~', ''), ('?醋烧带鱼，老少咸宜', ''), ('红烧带鱼?入味好吃', ''), ('清蒸带鱼', '鲜嫩多汁，简单快手。')\\]\n\n2.2. 通过修改SQL条件筛选方式为like，并配套相似度算法，则“SQL方向正确，同时匹配数据”能接近95.8%的准确率\n--------------------------------------------------------------\n\n用户实际体会到的准确率是”SQL方向正确，同时匹配数据“的74.2%的准确。但是这个准确率低基本是 条件值和数据库的值不一致 导致的。\n\n解决这个问题，看似可以更改title = '豉汁带鱼'  为 title like '%豉汁带鱼%'，就匹配到。但是这种方式也不完全解决问题。因为实际用户的提问可能千变万化，同时食谱名称也千变万化。比较典型的是很多食谱包含特殊符号、宣传词、语气词。例如：“红烧藕丁~比红烧肉还好吃的下饭菜”、“甜里裹酸的手撕包菜，熟悉的味道(^\\_^\\*”、“小白菜蛋汤，老好喝！?”、“烹牛排（冷鲜）”\n\n这种情况下用like 也不完全解决。\n\n可能其中一种看上去比较好的方式，是使用相似度。即计算'豉汁带鱼'与各个食谱名称的相似度。若相似度比较高，则匹配。而匹配逻辑，可以设置为：like匹配→相似度匹配。即若like匹配不到，则用相似度匹配。若相似度也匹配不上，那就算了。\n\n若使用上面方法理论上”SQL方向正确，无匹配数据“这个指标值应该非常接近”SQL方向正确，同时匹配数据“的值的。\n\n2.3. 模型输出SQL审核\n--------------\n\n模型虽能输出SQL，本次测试估计有1/4~1/5的输出，并不符合SQL规范，导致SQL无法被数据库执行。下面是经历的一些情况和解决方案。基本添加几行代码就能解决本次测试的问题，但是实际生产可能情况更多。\n\n[?](#)\n\n`chain` `=` `create_sql_query_chain(llm, db)`\n\n`# question = \"白灼秋葵的食材有哪些？\"`\n\n`response` `=` `chain.invoke({``\"question\"``: question})`\n\n`try``:`\n\n    `query` `=` `re.search(``\"SELECT.*[;；]\"``, response.replace(``'\\n'``,` `' '``).replace(```'`'```, '')).group(``0``)`\n\n`except``:`\n\n    `query` `=` `re.search(``\"SELECT.*[;；]\"``, response.replace(``'\\n'``,` `' '``).replace(```'`'```, '')` `+` `\";\"``).group(``0``)`\n\n`if` `\"LIMIT\"` `not` `in` `query:`\n\n    `query` `=` `query.replace(``\";\"``,` `\" LIMIT 10;\"``)`\n\n①附带除SQL外的其他文本。使用正则匹配。\n\n<SQL>SELECT materials\\_list FROM recipe\\_knowledge\\_nutrition\\_test WHERE title = '豉汁带鱼' LIMIT 1;<SQL>\n\n②有\\\\n符号。使用replace清除\n\nSELECT\\\\n materials\\_list \\\\nFROM\\\\n recipe\\_knowledge\\_nutrition\\_test \\\\nWHERE title = '豉汁带鱼' LIMIT 1;\n\n③\\`\\`\\` 符号。replace清除\n\n\\`\\`\\`SELECT materials\\_list FROM recipe\\_knowledge\\_nutrition\\_test WHERE title = '豉汁带鱼' LIMIT 1;\\`\\`\\`\n\n④没有; 号。识别添加\n\nSELECT materials\\_list FROM recipe\\_knowledge\\_nutrition\\_test WHERE title = '豉汁带鱼' LIMIT 1\n\n⑤没有LIMIT，导致超出token限制\n\nSELECT \"title\" FROM recipe\\_knowledge\\_nutrition\\_test WHERE \"classify\\_taste\" = '甜' AND \"classify\\_ingredient\" = '肉类';\n\n2.4. 其他问题\n---------\n\n**1. 输出值太固定，可能与用户需求不符。**\n\nSQL的执行是按表中数据的顺序给出的。不同用户问”推荐辣的食谱“，或者任意时间问，结果都会给出固定的那几个食谱。这种结果可能不是用户想要的。\n\n**2\\. 需要给db\\_llm配置单独的用户，权限只包含特定表的select权限**\n\n3. \n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}