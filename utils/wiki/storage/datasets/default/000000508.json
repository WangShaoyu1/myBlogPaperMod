{
	"title": "离线a+文件自动生成方案",
	"author": "王宇",
	"publishTime": "七月02,2024",
	"readTime": "12s",
	"tags": "[\"十七、前端管理\"]",
	"description": "十七、前端管理",
	"article": "现状\n--\n\n使用一个离线a+需要以下步骤\n\n1.  .登录ftt后台，复制所需a+的ID\n2.  到项目sdk里执行talk执行一次，复制返回的json数据\n3.  .在当前项目里新建一个json文件，复制刚刚的json文件\n4.  .调用这个项目本地文件\n\n  \n\n不足\n--\n\n1.  重复工作量很多\n2.  容易出错\n3.  手动的流程无法在后台配置化实现后工作\n\n  \n\n  \n\n分析\n--\n\n经过尝试，每个请求都需要header带上鉴权信息，那这个值在哪里获取？\n\n![](/download/attachments/129174469/image2024-7-2_16-25-58.png?version=1&modificationDate=1719908758842&api=v2)\n\n  \n\n当然是登录接口![(微笑)](/s/-vky9ok/8401/008d09724398b50e93468e30a239d4f6d750af9b/_/images/icons/emoticons/smile.svg)\n\n![](/download/attachments/129174469/image2024-7-2_16-27-26.png?version=1&modificationDate=1719908846978&api=v2)\n\n  \n\n动手\n--\n\n通过先请求login接口获取token，带上后面所有请求的header上\n\n[?](#)\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n`const axios = require(``\"axios\"``);`\n\n`const path = require(``'path'``);`\n\n`const fs = require(``\"fs\"``);`\n\n`let token;`\n\n`const login = async () => {`\n\n  `const p = await axios.post(`\n\n    `\"[https://vdh-open.test.yingzi.com/haiadmin/api/v1/login](https://vdh-open.test.yingzi.com/haiadmin/api/v1/login)\"``,`\n\n    `{`\n\n      `username:` `\"xxx\"``,` `// 自己的用户名`\n\n      `password:` `\"xxx\"``,` `// 自己的密码`\n\n    `}`\n\n  `);`\n\n  `token = await p.data.data.accessToken;`\n\n  `return` `token;`\n\n`};`\n\n`const getList = async () => {`\n\n  `try` `{`\n\n    `const ax = await axios.post(`\n\n      `\"[https://vdh-open.test.yingzi.com/haiadmin/api/v1/getAvatarArichInfoList](https://vdh-open.test.yingzi.com/haiadmin/api/v1/getAvatarArichInfoList)\"``,`\n\n      `{`\n\n        `language:` `\"cn\"``,`\n\n        `pageNo: 1,`\n\n        `pageSize: 5,`\n\n        `avatarId:` `\"11100090000932790000000000000000\"``,`\n\n        `name:` `\"\"``,`\n\n        `type: 1,`\n\n        `arichId:` `\"\"``,`\n\n        `domainId:` `\"70\"``,`\n\n      `},`\n\n      `{`\n\n        `headers: {`\n\n          `Authorization: token,`\n\n        `},`\n\n      `}`\n\n    `);`\n\n    `const res = ax.data.data.ArichInfoList;`\n\n    `return` `res`\n\n  `}` `catch` `(error) {`\n\n    `if` `(error.response.status === 401) {`\n\n      `console.log(``\"token expired\"``);`\n\n    `}`\n\n  `}`\n\n`};`\n\n`function` `writeFile(filePath, data) {`\n\n    `fs.writeFile(filePath, JSON.stringify(data,` `null``, 2), (err) => {`\n\n      `if` `(err) {`\n\n        `console.error(``'Failed to write file'``, err);`\n\n      `}` `else` `{`\n\n        `console.log(``'File written successfully'``);`\n\n      `}`\n\n    `});`\n\n  `}`\n\n`const getAplus = async (item) => {`\n\n    `const response = await axios.post(``'[https://vdh-api.test.yingzi.com/haigate/api/v1/haiApid2Anim'](https://vdh-api.test.yingzi.com/haigate/api/v1/haiApid2Anim')``, {`\n\n        `text:` `\"1718713042592633360hfuqn\"``,`\n\n        `reqId:` `\"1719221125498\"``,`\n\n        `sdkVer:` `\"v6.0.0\"``,`\n\n        `avatarId:` `\"11100090000932790000000000000000\"``,`\n\n        `lang:` `\"cn\"``,`\n\n        `aplusId: item.arichId,`\n\n    `})`\n\n    `const filePath = path.join(__dirname,` `'public'```, `${item.name}.json`)``\n\n    `fs.exists(item.name, exs => {`\n\n        `if` `(exs) {`\n\n            `fs.unlink(filePath, error => {`\n\n                `if` `(error) {`\n\n                    `console.error(``'Failed to delete the file'``, error)`\n\n                    `return`\n\n                `}`\n\n                `writeFile(filePath, response.data)`\n\n            `})`\n\n        `}` `else` `{`\n\n          `writeFile(filePath, response.data)`\n\n        `}`\n\n    `})`\n\n`}`\n\n`const start = async () => {`\n\n  `await login();`\n\n  `const res = await getList();`\n\n  `const promises = res.map(item => getAplus(item));`\n\n  `await Promise.all(promises)`\n\n      `.then(() => console.log(``\"All data has been written successfully.\"``))`\n\n      `.``catch``(error => console.error(``\"An error occurred:\"``, error));`\n\n`};`\n\n`start();`\n\n  \n\n效果拔群！\n\n  \n\n![](/download/thumbnails/129174469/image2024-7-2_16-30-38.png?version=1&modificationDate=1719909038984&api=v2)\n\n  \n\n  \n\nCopilot对我的代码解释\n--------------\n\n这段JavaScript代码主要执行以下操作：\n\n1.  **引入依赖**：使用`require`引入`axios`（用于HTTP请求）、`path`（用于处理文件路径）和`fs`（用于文件系统操作）模块。\n    \n2.  **登录操作** (`login`函数)：\n    \n    *   使用`axios.post`向指定的登录URL发送POST请求，包含用户名和密码。\n    *   从响应中获取`accessToken`并保存在`token`变量中。\n3.  **获取列表** (`getList`函数)：\n    \n    *   使用`axios.post`向指定的URL发送POST请求，请求头中包含步骤2中获取的`token`。\n    *   从响应中提取列表信息并返回。\n4.  **写入文件** (`writeFile`函数)：\n    \n    *   使用`fs.writeFile`将传入的数据写入到指定的文件路径。数据在写入前会被转换为JSON格式。\n5.  **获取并处理数据** (`getAplus`函数)：\n    \n    *   对于`getList`函数返回的每个列表项，使用`axios.post`发送请求获取更多信息。\n    *   检查目标文件是否存在，如果存在则先删除，然后调用`writeFile`函数将获取的数据写入文件。\n6.  **启动程序** (`start`函数)：\n    \n    *   首先调用`login`函数进行登录。\n    *   然后调用`getList`函数获取列表。\n    *   对于列表中的每一项，调用`getAplus`函数处理并写入文件。\n    *   使用`Promise.all`等待所有的`getAplus`调用完成。\n7.  **执行**：在文件的最后，调用`start`函数开始执行上述流程。\n    \n\n整个脚本的目的是登录到一个API，获取一系列数据，对每项数据进行进一步的请求，然后将结果保存到本地文件系统中。\n\n* * *\n\n  \n\n  \n\n  \n\n[Filter table data](#)[Create a pivot table](#)[Create a chart from data series](#)\n\n[Configure buttons visibility](/users/tfac-settings.action)"
}