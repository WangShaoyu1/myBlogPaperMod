{
	"title": "「Vue源码学习(三)」你不知道的-初次渲染原理",
	"author": "Sunshine_Lin",
	"publishTime": "2021-06-05",
	"readTime": "阅读3分钟",
	"tags": "[\"源码中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 上一节我们讲到了「Vue源码学习(二)」你不知道的-模板编译原理，也就是讲到了把模板转换成了render函数所需格式，那么今天，我就给大家讲一下，Vue是怎么拿着这个东西，去生成真实DOM并展示",
	"article": "前言\n--\n\n上一节我们讲到了[「Vue源码学习(二)」你不知道的-模板编译原理](https://juejin.cn/post/6969563640416436232 \"https://juejin.cn/post/6969563640416436232\")，也就是讲到了把模板转换成了`render函数所需格式`，那么今天，我就给大家讲一下，Vue是怎么拿着这个东西，去生成真实DOM并展示到页面的。\n\n代码\n--\n\n### 1\\. 步骤\n\n$mount\n\nmountComponent\n\n\\_render执行获得虚拟DOM\n\n\\_update执行将虚拟DOM转真实DOM并渲染\n\n### 2\\. 初始化Vue\n\n```js\nconst { initMixin } = require('./init')\nconst { lifecycleMixin } = require('./lifecycle')\nconst { renderMixin } = require(\"./render\")\n\n    function Vue(options) {\n    this._init(options)\n}\n\ninitMixin(Vue)\nrenderMixin(Vue)\nlifecycleMixin(Vue)\n```\n\n### 3\\. mountComponent函数（渲染的入口函数）\n\n```js\n// lifecycle.js\n\n\nconst { patch } = require('./vdom/patch')\n\n    function mountComponent (vm, el) {\n    vm.$el = el;\n    \n    // 上一节讲到把模板编译成render函数渲染所需格式\n    // 那么这一节就需要执行_render函数，来调用render函数生成虚拟DOM\n    // 然后接收返回值虚拟DOM，调用_update函数把虚拟DOM转为真实DOM并渲染\n    vm._update(vm._render())\n    \n    return vm\n}\n\n    function lifecycleMixin(Vue) {\n    // 将_update挂在Vue原型上\n        Vue.prototype._update = function (vnode) {\n        const vm = this\n        \n        // 执行patch函数，patch函数在下面有讲\n        vm.$el = patch(vm.$el, vnode) || vm.$el\n    }\n}\n\n    module.exports = {\n    mountComponent,\n    lifecycleMixin\n}\n\n```\n\n### 4\\. \\_render函数（执行render函数，获得虚拟DOM）\n\n```js\n// render.js\n\n\nconst { createElement, createTextNode } = require('./vdom/index')\n\n    function renderMixin(Vue) {\n    // 将_render函数挂在Vue原型上\n        Vue.prototype._render = function() {\n        const vm = this\n        \n        // 把上一节生成的render函数取出来\n        const { render } = vm.$options\n        \n        // 执行render函数并获得虚拟DOM\n        const vnode = render.call(vm)\n        \n        return vnode\n    }\n    \n    // 创建元素节点虚拟DOM\n        Vue.prototype._c = function(...args) {\n        return createElement(...args)\n    }\n    \n    // 创建文本节点虚拟DOM\n        Vue.prototype._v = function (text) {\n        return createTextNode(text)\n    }\n    \n    // 对象的情况，把对象转成字符串\n        Vue.prototype._s = function (val) {\n        return val === null ? '' : typeof val === 'object' ? JSON.stringify(val) : val\n    }\n}\n\n    module.exports = {\n    renderMixin\n}\n```\n\n> 下面是创建虚拟DOM的具体所需函数以及类\n\n```js\n// vdom/index.js\n\n\n// 创建某一个节点的虚拟DOM\n    class Vnode {\n        constructor(tag, data, key, children, text) {\n        this.tag = tag\n        this.data = data\n        this.key = key\n        this.children = children\n        this.text = text\n    }\n}\n\n// 创建元素节点虚拟DOM\n    function createElement(tag, data= {}, ...children) {\n    const key = data.key\n    return new Vnode(tag, data, key, children)\n}\n\n// 创建文本节点虚拟DOM\n    function createTextNode(text) {\n    return new Vnode(undefined, undefined, undefined, undefined, text)\n}\n\n    module.exports = {\n    createElement,\n    createTextNode\n}\n```\n\n### 5\\. patch函数（将虚拟DOM转真实DOM并渲染）\n\n```js\n// vdom/patch.js\n\n\n    function patch(oldVnode, vnode) {\n    // 本节只讲初次渲染\n    // 初次渲染时oldVnode就是el节点，以后非初次渲染时，oldVnode就是上一次的虚拟DOM\n    \n    // 判断oldVnode的类型\n    const isRealElement = oldVnode.nodeType\n        if (isRealElement) {\n        // 初次渲染\n        const oldElm = oldVnode\n        const parentElm = oldElm.parentNode\n        \n        // 生成真实DOM对象\n        const el = createElm(vnode)\n        \n        // 将生成的真实DOM。插入到el的下一个节点的前面\n        // 也就是插到el的后面\n        // 不直接appendChild是因为可能页面中有其他el同级节点，不能破坏顺序\n        parentElm.insertBefore(el, oldElm.nextSibling)\n        \n        // 删除老el节点\n        parentElm.removeChild(oldVnode)\n        \n        return el\n    }\n}\n\n// 虚拟DOM生成真实DOM\n    function createElm(vnode) {\n    const { tag, data, key, children, text } = vnode\n    \n    // 判断是元素节点还是文本节点\n        if (typeof tag === 'string') {\n        // 创建标签\n        vnode.el = document.createElement(tag)\n        \n        // 解析虚拟DOM属性\n        updateProperties(vnode)\n        \n        // 递归，将子节点也生成真实DOM\n            children.forEach(child => {\n            return vnode.el.appendChild(createElm(child))\n            })\n                } else {\n                // 文本节点直接创建\n                vnode.el = document.createTextNode(text)\n            }\n            \n            return vnode.el\n        }\n        \n        // 解析虚拟DOM的属性\n            function updateProperties(vnode) {\n        const newProps = vnode.data || {}\n        const el = vnode.el\n            for(let key in newProps) {\n                if (key === 'style') {\n                // style的处理\n                    for (let styleName in newProps.style) {\n                el.style[styleName] = newProps.style[styleName]\n            }\n                } else if (key === 'class') {\n                // class的处理\n                el.className = newProps.class\n                    } else {\n                    // 调用dom的setAttribute进行属性设置\n                    el.setAttribute(key, newProps[key])\n                }\n            }\n        }\n        \n            module.exports = {\n            patch\n        }\n```\n\n### 6\\. 具体流程图\n\n![image.png](/images/jueJin/f662df7792d4414.png)\n\n结语\n--\n\n> 我也不知道会不会有人看，反正，写就完事了！！！加油！！！\n\n*   [你想知道Vuex的实现原理吗？](https://juejin.cn/post/6952473110377414686 \"https://juejin.cn/post/6952473110377414686\")\n*   [你真的知道插槽Slot是怎么“插”的吗](https://juejin.cn/post/6949848530781470733 \"https://juejin.cn/post/6949848530781470733\")\n*   [「Vue源码学习(一)」你不知道的-数据响应式原理](https://juejin.cn/post/6968732684247892005 \"https://juejin.cn/post/6968732684247892005\")\n*   [「Vue源码学习(二)」你不知道的-模板编译原理](https://juejin.cn/post/6969563640416436232 \"https://juejin.cn/post/6969563640416436232\")\n*   [「Vue源码学习(三)」你不知道的-初次渲染原理](https://link.juejin.cn?target=s \"s\")\n\n学习群，摸鱼群，进来谈笑风生吧嘿嘿\n-----------------\n\n请点击这里 [链接](https://juejin.cn/pin/6969565162885873701 \"https://juejin.cn/pin/6969565162885873701\")",
	"selfDefined": "likes:86,comments:5,collects:38,likes:8398"
}