{
	"title": "不废话，代码实践带你掌握 强缓存、协商缓存！",
	"author": "Sunshine_Lin",
	"publishTime": "2022-02-18",
	"readTime": "阅读4分钟",
	"tags": "[\"前端\",\"JavaScript\",\"HTTP中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心 背景 无论是开发中或者是面试中，HTTP缓存都是非常重要的，这体现在了两个方面： 开发中：合理利用HT",
	"article": "前言\n--\n\n大家好，我是林三心，**用最通俗易懂的话讲最难的知识点**是我的座右铭，**基础是进阶的前提**是我的初心\n\n背景\n--\n\n无论是开发中或者是面试中，**HTTP缓存**都是非常重要的，这体现在了两个方面：\n\n*   **开发中**：合理利用`HTTP缓存`可以提高前端页面的性能\n*   **面试中**：`HTTP缓存`是面试中的高频问点\n\n所以本篇文章，我不讲废话，我就通过`Nodejs`的简单实践，给大家讲最通俗易懂的**HTTP缓存**，大家通过这篇文章一定能了解掌握它！！！\n\n前置准备\n----\n\n### 准备\n\n*   创建文件夹`cache-study`，并准备环境\n\n```js\nnpm init\n```\n\n*   安装`Koa、nodemon`\n\n```js\nnpm i koa -D\nnpm i nodemon -g\n```\n\n*   创建`index.js、index.html、static文件夹`\n*   `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Document</title>\n<link rel=\"stylesheet\" href=\"./static/css/index.css\">\n</head>\n<body>\n<div class=\"box\">\n\n</div>\n</body>\n</html>\n```\n\n*   `static/css/index.css`\n\n```js\n    .box {\n    width: 500px;\n    height: 300px;\n    background-image: url('../image/guang.jpg');\n    background-size: 100% 100%;\n    color: #000;\n    \n}\n```\n\n*   `static/image/guang.jpg`\n\n![](/images/jueJin/c86327f33c83406.png)\n\n*   `index.js`\n\n```js\nconst Koa = require('koa')\nconst fs = require('fs')\nconst path = require('path')\n    const mimes = {\n    css: 'text/css',\n    less: 'text/css',\n    gif: 'image/gif',\n    html: 'text/html',\n    ico: 'image/x-icon',\n    jpeg: 'image/jpeg',\n    jpg: 'image/jpeg',\n    js: 'text/javascript',\n    json: 'application/json',\n    pdf: 'application/pdf',\n    png: 'image/png',\n    svg: 'image/svg+xml',\n    swf: 'application/x-shockwave-flash',\n    tiff: 'image/tiff',\n    txt: 'text/plain',\n    wav: 'audio/x-wav',\n    wma: 'audio/x-ms-wma',\n    wmv: 'video/x-ms-wmv',\n    xml: 'text/xml',\n}\n\n// 获取文件的类型\n    function parseMime(url) {\n    // path.extname获取路径中文件的后缀名\n    let extName = path.extname(url)\n    extName = extName ? extName.slice(1) : 'unknown'\nreturn mimes[extName]\n}\n\n// 将文件转成传输所需格式\n    const parseStatic = (dir) => {\n        return new Promise((resolve) => {\n        resolve(fs.readFileSync(dir), 'binary')\n        })\n    }\n    \n    const app = new Koa()\n    \n        app.use(async (ctx) => {\n        const url = ctx.request.url\n            if (url === '/') {\n            // 访问根路径返回index.html\n            ctx.set('Content-Type', 'text/html')\n            ctx.body = await parseStatic('./index.html')\n                } else {\n                const filePath = path.resolve(__dirname, `.${url}`)\n                // 设置类型\n                ctx.set('Content-Type', parseMime(url))\n                // 设置传输\n                ctx.body = await parseStatic(filePath)\n            }\n            })\n            \n                app.listen(9898, () => {\n                console.log('start at port 9898')\n                })\n```\n\n### 启动页面\n\n现在你可以在终端中输入`nodemon index`，看到下方的显示，则代表成功启动了服务\n\n![](/images/jueJin/48f6bda68d7b42d.png)\n\n此时你可以在浏览器链接里输入`http://localhost:9898/`，打开看到如下页面，则代表页面访问成功！！！\n\n![](/images/jueJin/a77671d137b3461.png)\n\nHTTP缓存种类\n--------\n\n`HTTP缓存`常见的有两类：\n\n*   `强缓存`：可以由这两个字段其中一个决定\n    *   `expires`\n    *   `cache-control(优先级更高)`\n*   `协商缓存`：可以由这两对字段中的一对决定\n    *   `Last-Modified，If-Modified-Since`\n    *   `Etag，If-None-Match(优先级更高)`\n\n强缓存\n---\n\n接下来我们就开始讲**强缓存**\n\n### expires\n\n我们只需设置响应头里`expires`的时间为`当前时间 + 30s`就行了\n\n```js\n    app.use(async (ctx) => {\n    const url = ctx.request.url\n        if (url === '/') {\n        // 访问根路径返回index.html\n        ctx.set('Content-Type', 'text/html')\n        ctx.body = await parseStatic('./index.html')\n            } else {\n            const filePath = path.resolve(__dirname, `.${url}`)\n            // 设置类型\n            ctx.set('Content-Type', parseMime(url))\n            // 设置 Expires 响应头\n            const time = new Date(Date.now() + 30000).toUTCString()\n            ctx.set('Expires', time)\n            // 设置传输\n            ctx.body = await parseStatic(filePath)\n        }\n        })\n```\n\n然后我们在前端页面刷新，我们可以看到请求的资源的响应头里多了一个`expires`的字段\n\n![](/images/jueJin/e43e2b365de54e7.png)\n\n并且，在30s内，我们刷新之后，看到请求都是走`memory`，这意味着，通过`expires`设置强缓存的时效是30s，这30s之内，资源都会走本地缓存，而不会重新请求\n\n![](/images/jueJin/7b1b088b04b14ab.png)\n\n> 注意点：有时候你Nodejs代码更新了时效时间，但是发现前端页面还是在走上一次代码的时效，这个时候，你可以把这个`Disabled cache`打钩，然后刷新一下，再取消打钩\n\n![](/images/jueJin/c41cb59f50b74b0.png)\n\n### cache-control\n\n其实`cache-control`跟`expires`效果差不多，只不过这两个字段设置的值不一样而已，前者设置的是`秒数`，后者设置的是`毫秒数`\n\n```js\n    app.use(async (ctx) => {\n    const url = ctx.request.url\n        if (url === '/') {\n        // 访问根路径返回index.html\n        ctx.set('Content-Type', 'text/html')\n        ctx.body = await parseStatic('./index.html')\n            } else {\n            const filePath = path.resolve(__dirname, `.${url}`)\n            // 设置类型\n            ctx.set('Content-Type', parseMime(url))\n            // 设置 Cache-Control 响应头\n            ctx.set('Cache-Control', 'max-age=30')\n            // 设置传输\n            ctx.body = await parseStatic(filePath)\n        }\n        })\n```\n\n前端页面响应头多了`cache-control`这个字段，且30s内都走本地缓存，不会去请求服务端\n\n![](/images/jueJin/0ad5f4a1d0254cd.png)\n\n协商缓存\n----\n\n与`强缓存`不同的是，`强缓存`是在时效时间内，不走服务端，只走本地缓存；而`协商缓存`是要走服务端的，如果请求某个资源，去请求服务端时，发现`命中缓存`则返回`304`，否则则返回所请求的资源，那怎么才算`命中缓存`呢？接下来讲讲\n\n### Last-Modified，If-Modified-Since\n\n简单来说就是:\n\n*   第一次请求资源时，服务端会把所请求的资源的`最后一次修改时间`当成响应头中`Last-Modified`的值发到浏览器并在浏览器存起来\n*   第二次请求资源时，浏览器会把刚刚存储的时间当成请求头中`If-Modified-Since`的值，传到服务端，服务端拿到这个时间跟所请求的资源的最后修改时间进行比对\n*   比对结果如果两个时间相同，则说明此资源没修改过，那就是`命中缓存`，那就返回`304`，如果不相同，则说明此资源修改过了，则`没命中缓存`，则返回修改过后的新资源\n\n```js\n// 获取文件信息\n    const getFileStat = (path) => {\n        return new Promise((resolve) => {\n            fs.stat(path, (_, stat) => {\n            resolve(stat)\n            })\n            })\n        }\n        \n            app.use(async (ctx) => {\n            const url = ctx.request.url\n                if (url === '/') {\n                // 访问根路径返回index.html\n                ctx.set('Content-Type', 'text/html')\n                ctx.body = await parseStatic('./index.html')\n                    } else {\n                    const filePath = path.resolve(__dirname, `.${url}`)\n                const ifModifiedSince = ctx.request.header['if-modified-since']\n                const fileStat = await getFileStat(filePath)\n                console.log(new Date(fileStat.mtime).getTime())\n                ctx.set('Cache-Control', 'no-cache')\n                ctx.set('Content-Type', parseMime(url))\n                // 比对时间，mtime为文件最后修改时间\n                    if (ifModifiedSince === fileStat.mtime.toGMTString()) {\n                    ctx.status = 304\n                        } else {\n                        ctx.set('Last-Modified', fileStat.mtime.toGMTString())\n                        ctx.body = await parseStatic(filePath)\n                    }\n                }\n                })\n```\n\n第一次请求时，响应头中：\n\n![](/images/jueJin/e5a3007eb8a5489.png)\n\n第二次请求时，请求头中：\n\n![](/images/jueJin/34c4e6264d3145c.png)\n\n由于资源并没修改，则命中缓存，返回304：\n\n![](/images/jueJin/b046807972ae47d.png)\n\n此时我们修改一下`index.css`\n\n```js\n    .box {\n    width: 500px;\n    height: 300px;\n    background-image: url('../image/guang.jpg');\n    background-size: 100% 100%;\n    /* 修改这里 */\n    color: #333;\n}\n```\n\n然后我们刷新一下页面，`index.css`变了，所以会`没命中缓存`，返回200和新资源，而`guang.jpg`并没有修改，则`命中缓存`返回304：\n\n![](/images/jueJin/bea7a74c7fdb49e.png)\n\n### Etag，If-None-Match\n\n其实`Etag，If-None-Match`跟`Last-Modified，If-Modified-Since`大体一样，区别在于：\n\n*   后者是对比资源最后一次修改时间，来确定资源是否修改了\n*   前者是对比资源内容，来确定资源是否修改\n\n那我们要怎么比对资源内容呢？我们只需要读取资源内容，转成hash值，前后进行比对就行了！！\n\n```js\nconst crypto = require('crypto')\n\n    app.use(async (ctx) => {\n    const url = ctx.request.url\n        if (url === '/') {\n        // 访问根路径返回index.html\n        ctx.set('Content-Type', 'text/html')\n        ctx.body = await parseStatic('./index.html')\n            } else {\n            const filePath = path.resolve(__dirname, `.${url}`)\n            const fileBuffer = await parseStatic(filePath)\n        const ifNoneMatch = ctx.request.header['if-none-match']\n        // 生产内容hash值\n        const hash = crypto.createHash('md5')\n        hash.update(fileBuffer)\n        const etag = `\"${hash.digest('hex')}\"`\n        ctx.set('Cache-Control', 'no-cache')\n        ctx.set('Content-Type', parseMime(url))\n        // 对比hash值\n            if (ifNoneMatch === etag) {\n            ctx.status = 304\n                } else {\n                ctx.set('etag', etag)\n                ctx.body = fileBuffer\n            }\n        }\n        })\n```\n\n验证方式跟刚刚`Last-Modified，If-Modified-Since`的一样，这里就不重复说明了。。。\n\n总结\n--\n\n![](/images/jueJin/9130c2a31bde41d.png)\n\n参考资料\n----\n\n*   [blog.csdn.net/qq\\_32438227…](https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Fqq_32438227%2Farticle%2Fdetails%2F115125382 \"https://blog.csdn.net/qq_32438227/article/details/115125382\")\n\n结语\n--\n\n我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，摸鱼群，点这个 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/80e2d6e382de45e.png)",
	"selfDefined": "likes:238,comments:28,collects:344,likes:12921"
}