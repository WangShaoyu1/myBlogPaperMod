{
	"title": "Threejs 动效方案",
	"author": "",
	"publishTime": "2020-03-17",
	"readTime": "阅读13分钟",
	"tags": "[\"WebGL\",\"three.js中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "Threejs（下面简称 Three） 作为一个 3D 库，不仅减少了我们学习 OpenGL 和 WebGL 的成本，还大大提升了前端在可视化上给用户带来更多的真实、沉浸式的体验。众所周知，Three 更多的是用 3D 模型 + 投影相机 + 用户交互的方式来构建一个「3D …",
	"article": "> 本文作者 陈舒仪\n\n> 图片来源 Pixabay，作者 Arek Socha\n\n背景\n--\n\nThree.js（下面简称 Three） 作为一个 3D 库，不仅减少了我们学习 OpenGL 和 WebGL 的成本，还大大提升了前端在可视化上给用户带来更多的真实、沉浸式的体验。众所周知，Three 更多的是用 3D 模型 + 投影相机 + 用户交互的方式来构建一个「3D 世界」。\n\n[这张专辑，用眼睛去“听”](https://link.juejin.cn?target=https%3A%2F%2Fmusic.163.com%2Fst%2Fstoneplan-album%3Fnm_style%3Dsbt \"https://music.163.com/st/stoneplan-album?nm_style=sbt\") 活动中，在视觉在只能提供「2D 切图」的情况下，需要营造「3D 效果」。为了获得最好视觉体验，仅仅通过贴图很难做到，所以借此机会探索了 Three 的动效方案。\n\n运动往往是相对的，运动的本质可能是「物体动」或「相机动」，本文将从**对象动画**和**相机动画**上阐述对 Three 的动效探索。\n\nThree 基础\n--------\n\n### Camera 相机\n\nThree 提供多种相机，其中应用最广的就是投影相机 (PerspectiveCamera) ，通过投影相机可以模拟人眼所看见的效果。\n\n```\nconst camera = THREE.PerspectiveCamera(fov, aspect, near, far);\n```\n\n参数\n\n含义\n\n默认值\n\nfov\n\nfov 是视景体竖直方向上（非水平！）的张角，人类有接近180度的视角大小。该值可根据具体场景所需要的视角设置。\n\n45\n\naspect            \n\n指定渲染结果的横向尺寸和纵向尺寸的比值。该值通常设置为窗口大小的宽高比。\n\nwindow.innerWidth / window.innerHeight\n\nnear\n\n表示可以看到多近的物体。这个值通常很小。\n\n0.1\n\nfar\n\n表示可以看到多远的物体。这个看情况设置，过大会导致渲染过多；太小可能又会看不到。\n\n1000\n\n**ps:** 在 Three 中是没有「长度单位」这个概念的，它的数值都是根据比例计算得出，因此这里提到的 0.1 或 1000 都没有具体的含义，而是一种相对长度。\n\n![相机](/images/jueJin/170e6024db89a3c.png)\n\n可以看到，通过配置透视相机的相关参数，最终被渲染到屏幕上的，是在 `near` 到 `far` 之间，根据 `fov` 的值和物体远近 `d` 确定渲染高度，再通过 `aspect` 值来确定渲染宽度的。\n\n### Scene 场景\n\n有了相机，我们还要有场景，场景是为了让我们设置我们的空间内「有什么」和「放在哪」的。我们可以在场景中放置物体，光源还有相机。\n\n```\nconst scene = new THREE.Scene();\n```\n\n是的，创建场景就是这么简单。\n\n#### Group\n\n为了以群的维度去区分场景中的物体，我们还可以在场景中添加 Group。有了 Group，可以更方便地操作一类物体。  \n比如创建一个 `stoneGroup`，并添加到场景中：\n\n```\nconst stoneGroup = new THREE.Group();\nstoneGroup.name = 'stoneGroup';\n\nscene.add(stoneGroup);\n```\n\n为 Group 命名，允许我们通过 name 来获取到对应的 Group：\n\n```\nconst group = scene.getObjectByName(name);\n```\n\n### Geometry 几何体\n\nThree 提供了多种类型的几何体，可以分为二维网格和三维网格。二维网格顾名思义只有两个维度，可以通过这种几何体创建简单的二维平面；三维网格允许你定义三维物体；在 Three 中定义一个几何体十分简单，只需要选择需要的几何体并传入相应参数创建即可。\n\n[查看Three提供的几何体](https://link.juejin.cn?target=https%3A%2F%2Fthreejs.org%2Fdocs%2Findex.html%23api%2Fen%2Fgeometries%2FBoxBufferGeometry \"https://threejs.org/docs/index.html#api/en/geometries/BoxBufferGeometry\")\n\n如果看到 Three 提供的几何体，可以看到有的几何体中它分别提供 `Geometery` 和 `BufferGeometery` 版本，关于这两个的区别，可以看这里 [回答](https://link.juejin.cn?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F54673268%2Fdifference-between-buffer-geometry-and-geometry%2F54673459 \"https://stackoverflow.com/questions/54673268/difference-between-buffer-geometry-and-geometry/54673459\")\n\n大致意思就是使用 Buffer 版本的几何体相较于普通的几何体会将描述物体的数据存放在缓冲区中，减少内存消耗和 CPU 循环。通过它们提供的方法来看，使用 geometry 无疑是对新手友好的。\n\n创建几何体：\n\n```\n// 创建立方体，传入长、宽和高\nvar cubeGeometry = new THREE.CubeGeometry(40, 40, 40);\n// 创建球体，传入半径、宽片段数量和高片段数量\nvar sphereGeometry = new THREE.SphereGeometry(20, 100, 100);\n```\n\n### Material 材质\n\n定义材质可以帮助我们决定一个物体在各种环境情况下的具体表现。同样 Three 也提供了多种材质。下面列举几个常用的材质。\n\n名称\n\n描述\n\nMeshBasicMaterial\n\n基础材质，用它定义几何体上的简单颜色或线框\n\nMeshPhongMaterial\n\n受光照影响，用来创建光亮的物体\n\nMeshLambertMaterial\n\n受光照影响，用来创建不光亮的物体\n\nMeshDepthMaterial\n\n根据相机远近来决定如何给网格染色\n\n创建材质：\n\n```\nvar basicMaterial = new THREE.MeshBasicMaterial({ color: 0x666666 });\nvar lambertMaterial = new THREE.MeshLambertMaterial({ color: 0x666666 });\nvar phongMaterial = new THREE.MeshPhongMaterial({ color: 0x666666 });\nvar wireMaterial = new THREE.MeshBasicMaterial({ wireframe: true, color: 0x666666 });\n```\n\n![material](/images/jueJin/170e6024f486707.png)\n\n更多材质和相关信息，可以查看 [材质](https://link.juejin.cn?target=https%3A%2F%2Fthreejs.org%2Fdocs%2F%23api%2Fen%2Fmaterials%2FLineBasicMaterial \"https://threejs.org/docs/#api/en/materials/LineBasicMaterial\")\n\n### Mesh网格对象\n\n需要添加到场景中，还需要依赖 Mesh。Mesh 是用来定义材质和几何体之间是如何粘合的，创建网格对象可以应用一个或多个材质和几何体。\n\n创建几何体相同材质不同的网格对象：\n\n```\nvar cube = new THREE.Mesh(cubeGeometry, basicMaterial);\nvar cubePhong = new THREE.Mesh(cubeGeometry, phongMaterial);\nscene.add(cube, cubePhong);\n```\n\n创建材质相同几何体不同的网格对象：\n\n```\nvar cube = new THREE.Mesh(cubeGeometry, basicMaterial);\nvar sphere = new THREE.Mesh(sphereGeometry, basicMaterial);\nscene.add(cube, sphere);\n```\n\n创建拥有多个材质几何体的网格对象：\n\n```\nvar phongMaterial = new THREE.MeshPhongMaterial({ color: 0x666666 });\nvar cubeMeshPhong = new THREE.Mesh(cubeGeometry, cubePhongMaterial);\nvar cubeMeshWire = new THREE.Mesh(cubeGeometry, wireMaterial);\n// 网格对象新增材质\ncubeMeshPhong.add(cubeMeshWire);\nscene.add(cubeMeshPhong);\n```\n\n### Renderer 渲染器\n\n有了场景和相机，我们还需要渲染器把对应的场景用对应的相机可见渲染出来，因此渲染器需要传入场景和相机参数。\n\n```\n// 抗锯齿、canvas 是否支持 alpha 透明度、preserveDrawingBuffer 是否保存 BUFFER 直到手动清除\n    const renderer = new THREE.WebGLRenderer({\n    antialias: true, alpha: true, preserveDrawingBuffer: true\n    });\n    renderer.setSize(this.width, this.height);\n    renderer.autoClear = true;\n    // 清除颜色，第二个参数为 0 表示完全透明，适用于需要透出背景的场景\n    renderer.setClearColor(0x000000, 0);\n    renderer.setPixelRatio(window.devicePixelRatio);\n```\n\n为了在相机更新后所看见的场景，需要在循环渲染中加上\n\n```\nrenderer.render(scene, camera);\n```\n\n有了相机场景和渲染器，我们已经可以看到初步的效果了。但3D世界里，静止的物体多无趣啊。于是我们尝试加入动画效果。\n\n物体动画\n----\n\n### Animations\n\nThree为动画提供了一系列方法。\n\n参数\n\n含义\n\n`AnimationMixer`\n\n作为特定对象的动画混合器，可以管理该对象的所有动画\n\n`AnimationAction`            \n\n为播放器指定对应的片段存储一系列行为，用来指定动画快慢，循环类型等\n\n`AnimationClip`\n\n表示**可重用的**动画行为片段，用来指定一个动画的动画效果（放大缩小、上下移动等）\n\n`KeyframeTrack`\n\n与时间相关的帧序列，传入时间和值，应用在指定对象的属性上。目前有 `BooleanKeyframeTrack` `VectorKeyframeTrack` 等。\n\n那么如何创建一个动画呢？下面这个例子给大家解释如何让网格对象进行简单的上下移动。\n\n创建特定对象的动画混合器：\n\n```\n// 创建纹理\nconst texture = new THREE.TextureLoader().load(img.src);\n// 使用纹理创建贴图\nconst material = new THREE.SpriteMaterial({ map: texture, color: 0x666666 });\n// 使用贴图创建贴图对象\nconst stone = new THREE.Sprite(material);\n// 为贴图对象创建动画混合器\nconst mixer = new THREE.AnimationMixer(stone);\n```\n\n创建动画行为片段：\n\n```\n    const getClip = (pos = [0, 0, 0]) => {\n    const [x, y, z] = pos;\n    const times = [0, 1]; // 关键帧时间数组，离散的时间点序列\n    const values = [x, y, z, x, y + 3, z]; // 与时间点对应的值组成的数组\n    // 创建位置关键帧对象：0时刻对应位置0, 0, 0   10时刻对应位置150, 0, 0\n    const posTrack = new THREE.VectorKeyframeTrack('stone.position', times, values);\n    const duration = 1;\n    return new THREE.AnimationClip('stonePosClip', duration, [posTrack]);\n    };\n```\n\n创建动画播放器，确定动画的表现：\n\n```\nconst action = mixer.clipAction(getClip([x, y, z]));\naction.timeScale = 1; // 动画播放一个周期的时间\naction.loop = THREE.LoopPingPong; // 动画循环类型\naction.play(); // 播放\n```\n\n在循环绘制中更新混合器，保证动画的执行：\n\n```\n    animate() {\n    // 更新动画\n    const delta = this.clock.getDelta();\n    mixer.update(delta);\n    \n        requestAnimationFrame(() => {\n        animate();\n        });\n    }\n```\n\n![image](/images/jueJin/170e602509a38d3.png)\n\n[codepen](https://link.juejin.cn?target=https%3A%2F%2Fcodepen.io%2Fchenshuyi%2Fpen%2FjOEwEBW \"https://codepen.io/chenshuyi/pen/jOEwEBW\")\n\n### 贴图动画\n\n有了 Animation 我们可以很简单地对物体的一些属性进行操作。但一些贴图相关的动画就很难用 Animation 来实现了，比如：\n\n![箭头动图](/images/jueJin/170e60250d759dc.png)\n\n上图这种，无法通过改变物体的位置、大小等属性实现。于是，还有一种方案 —— 贴图动画。\n\n类似在 CSS3 中对序列图片使用 `transform` 属性改变位置来达到的动画效果，实际上在 Three 中也可以使用贴图位移的方式实现。\n\n首先，我们要有一个序列图：\n\n![箭头序列图](/images/jueJin/170e60247a8a782.png)\n\n作为纹理加载，并且增加到场景中：\n\n```\nconst arrowTexture = new THREE.TextureLoader().load(Arrow);\nconst material = new THREE.SpriteMaterial({ map: arrowTexture, color: 0xffffff });\nconst arrow = new THREE.Sprite(material);\nscene.add(arrow);\n```\n\n声明 `TextAnimator` 对象，实现纹理的位移：\n\n```\n    function TextureAnimator(texture, tilesHoriz, tilesVert, numTiles, tileDispDuration) {\n    // 纹理对象通过引用传入，之后可以直接使用update方法更新纹理位置\n    this.tilesHorizontal = tilesHoriz;\n    this.tilesVertical = tilesVert;\n    // 序列图中的帧数\n    this.numberOfTiles = numTiles;\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(1 / this.tilesHorizontal, 1 / this.tilesVertical);\n    \n    // 每一帧停留时长\n    this.tileDisplayDuration = tileDispDuration;\n    \n    // 当前帧停留时长\n    this.currentDisplayTime = 0;\n    \n    // 当前帧\n    this.currentTile = 0;\n    \n    // 更新函数，通过这个函数对纹理位移进行更新\n        this.update = (milliSec) => {\n        this.currentDisplayTime += milliSec;\n            while (this.currentDisplayTime > this.tileDisplayDuration) {\n            this.currentDisplayTime -= this.tileDisplayDuration;\n            this.currentTile++;\n        if (this.currentTile === this.numberOfTiles) { this.currentTile = 0; }\n        const currentColumn = this.currentTile % this.tilesHorizontal;\n        texture.offset.x = currentColumn / this.tilesHorizontal;\n        const currentRow = Math.floor(this.currentTile / this.tilesHorizontal);\n        texture.offset.y = currentRow / this.tilesVertical;\n    }\n    };\n}\n``````\n// 传入一个一行里有 13 帧的序列图，每张序列图停留 75ms\nconst arrowAni = new TextureAnimator(arrowTexture, 13, 1, 13, 75);\n```\n\n在循环绘制中更新，保证动画的执行：\n\n```\narrowAni.update(delta);\n```\n\n作为引用传入后，对贴图的修改会直接体现在使用该贴图的材质上。\n\n[codepen](https://link.juejin.cn?target=https%3A%2F%2Fcodepen.io%2Fchenshuyi%2Fpen%2FYzPQPYd \"https://codepen.io/chenshuyi/pen/YzPQPYd\")\n\n### 粒子动画\n\nThree 中还提供了酷炫的粒子动画，使用继承自 Object3D 的 `Points` 类实现。有了 Points 类我们可以很方便地把一个几何体渲染成一组粒子，并对它们进行控制。\n\n#### 创建粒子\n\n创建粒子我们首先需要创建粒子的材质，可以使用 `PointsMaterial` 创建粒子材质。\n\n```\nconst texture = new THREE.TextureLoader().load('https://p1.music.126.net/jgzbZtWZhDet2jWzED8BTw==/109951164579600342.png');\n\n    material = new THREE.PointsMaterial({\n    color: 0xffffff,\n    // 映射到材质上的贴图\n    map: texture,\n    size: 2,\n    // 粒子的大小是否和其与摄像机的距离有关，默认值 true\n    sizeAttenuation: true,\n    });\n    \n    // 开启透明度测试，透明度低于0.5的片段会被丢弃，解决贴图边缘感问题\n    material.alphaTest = 0.5;\n```\n\n有了粒子材质后，我们可以应用同一个材质批量创建一组粒子，只需要传入一个简单的几何体。\n\n```\nvar particles = new THREE.Points( geometry, material );\n```\n\n如果你传入的是 `BoxGeometry` 你可能会得到这样的一组粒子\n\n![cube粒子](/images/jueJin/170e60249cd6b2d.png)\n\n还可以根据传入的 `Shape` 得到这样一组粒子\n\n![fish粒子](/images/jueJin/170e6024cb21f83.png)\n\n#### 粒子运动\n\n但有趣的粒子绝不是静止的，而是有活动、有过程的。但如果自己动手实现一个粒子的运动又很复杂，因此希望借助一些**第三方库**实现粒子动画的缓动过程。\n\n##### tween.js\n\ntween.js 是一个小型的 JS 库，我们可以使用它为我们的动画声明变化。使用 tween.js 我们不需要关心运动的中间状态，只需要关注粒子的：\n\n*   起始位置\n*   最终位置\n*   缓动效果\n\n```\n// srcPosition, targetPosition;\ntweens.push(new TWEEN.Tween(srcPosition).easing(TWEEN.Easing.Exponential.In));\n// tweens最终位置、缓动时间\ntweens[0].to(targetPosition, 5000);\ntweens[0].start();、\n```\n\n![](/images/jueJin/170e60253b1f8e1.png)\n\n[codepen](https://link.juejin.cn?target=https%3A%2F%2Fcodepen.io%2Fchenshuyi%2Fpen%2FbGNRmPY \"https://codepen.io/chenshuyi/pen/bGNRmPY\")\n\n其实粒子动画的场景还有很多，我们可以用他们创造雪花飘散、穿梭效果，本质都是粒子的位置变化。\n\n相机动画\n----\n\n相机在 3D 空间中充当人的眼睛，因此自然的相机动线可以保证交互的自然流畅。\n\n### Controls\n\nThree 提供了一系列相机控件来控制场景中的相机轨迹，这些控件适用于大部分场景。使用 Controls 开发者可以不再需要去关心用户交互和相机移动的问题。\n\n活动中也涉及到 `OrbitControls` 的使用，他提供了环绕物体旋转、平移和缩放的方法，但由于对使用二维贴图的情况下，旋转和缩放都容易穿帮，需要被禁止。\n\n```\n// 创建轨迹\nconst controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\ncontrols.enabled = !0;\ncontrols.target = new THREE.Vector3();\ncontrols.minDistance = 0;\ncontrols.maxDistance = 2000;\ncontrols.minPolarAngle = Math.PI / 2;\ncontrols.maxPolarAngle = Math.PI / 2;\n// 禁用缩放\ncontrols.enableZoom = !1;\n// 禁用旋转\ncontrols.enableRotate !1;\ncontrols.panSpeed = 2;\n\n// 修改控件的默认触摸选项，设置为单指双指都为平移操作\n    controls.touches = {\n    ONE: THREE.TOUCH.PAN,\n    TWO: THREE.TOUCH.PAN,\n    };\n    \n    this.scene.add(this.camera);\n```\n\nOrbitControl 还允许我们设置阻尼，设置该值表现为数值越接近 1 越难拖动，开启阻尼后需要我们手动 update 控件。\n\n```\ncontrols.enableDamping = !0;\ncontrols.dampingFactor = 0.2;\n```\n\n查看源码可以看到，阻尼的实现就是依赖滑动时的 offset 乘上一个权重，在通过后续的update不断为 panOffset 乘上一个权重实现滑动难，撒手后再滑动一点距离。\n\n```\n// this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = function () {\n    \n    // ...\n    \n        return function update() {\n        \n        // ...\n        \n        // 平移\n        \n            if ( scope.enableDamping === true ) {\n            // 开启阻尼后会在原本的位移上乘上一个权重\n            scope.target.addScaledVector( panOffset, scope.dampingFactor );\n            \n                } else {\n                \n                scope.target.add( panOffset );\n                \n            }\n            \n            // ...\n            \n                if ( scope.enableDamping === true ) {\n                \n                sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n                \n                // 如果没有人为操作，随着时间推移，panOffset会越来越小\n                panOffset.multiplyScalar( 1 - scope.dampingFactor );\n                \n                    } else {\n                    \n                    sphericalDelta.set( 0, 0, 0 );\n                    \n                    panOffset.set( 0, 0, 0 );\n                    \n                }\n                \n                // ...\n                \n                };\n                \n                }();\n```\n\n官方也提供了 Controls 的 [例子](https://link.juejin.cn?target=https%3A%2F%2Fthreejs.org%2Fexamples%2F%3Fq%3Dorbit%23misc_controls_orbit \"https://threejs.org/examples/?q=orbit#misc_controls_orbit\") 供大家参考。\n\n### 相机动线\n\n如果不使用 Controls，仅仅是相机从一个点移动到另一个点，为了更平滑自然的相机轨迹，推荐使用贝塞尔曲线。\n\n贝塞尔曲线是一个由起点、终点和控制点决定的一条时间相关的变化曲线。这里以二阶贝塞尔曲线为例，实现相机的曲线移动。（三维的点有点难说明白，这里用二维坐标来解释）\n\n![二阶贝塞尔曲线](/images/jueJin/170e6024feb9d44.png)\n\n上图中小黑点的移动轨迹可以看做相机移动的曲线。\n\n![贝塞尔公式](/images/jueJin/170e60252e0c45c.png)\n\n从该公式来看，只需要确定 p0、p1 和 p2 三个点，在单位时间下我们可以获得一条确定的曲线。\n\n但是，换成坐标点要怎么做呢？\n\n```\n// 获得贝塞尔曲线\n    function getBezier(p1, p2) {\n    // 在指定范围内随机生成一个控制点\n        const cp = {\n        x: p1.x + Math.random() * 100 + 200,\n        z: p2.z + Math.random() * 200,\n        };\n        \n        let t = 0;\n        // 贝塞尔曲线公式，根据时间确定点的位置\n            return (deltat) => {\n            if (t >= 1) return [p2.x, p2.y];\n            t += deltat;\n            if (t > 1) t = 1;\n            \n            const { x: x1, z: z1 } = p1;\n            const { x: cx, z: cz } = cp;\n            const { x: x2, z: z2 } = p2;\n            const x = (1 - t) * (1 - t) * x1 + 2 * t * (1 - t) * cx + t * t * x2;\n            const z = (1 - t) * (1 - t) * z1\n            + 2 * t * (1 - t) * cz + t * t * z2;\n            \n            return [x, z];\n            };\n        }\n``````\nconst bezier = getBezier(p1, p2);\n```\n\n为了从简，这里只实现了二维坐标的轨迹变化，但三维也是同理。\n\n因为贝塞尔曲线是时间相关曲线，在每一次循环渲染中要传入时间来更新相机位置。\n\n```\n    animation() {\n    const [x, z] = bezier(clock.getDelta());\n    camera.position.x = x;\n    camera.position.z = z;\n    \n        requestAnimationFrame(() => {\n        animate();\n        });\n    }\n    \n```\n\n小结\n--\n\n没赶上 Three 的热潮，只能趁着活动需求给自己补补课了。在三维空间中，动画能够让空间中的物体更加生动，而相机的移动带给用户更强的空间感。\n\n本文介绍了基于 `Animation` 实现物体的简单运动、 `Texture` 实现贴图动画以及使用 `Points` 粒子化的物体动画方案；基于 `Controls` 和贝塞尔曲线的相机动画方案。\n\n对 Three 有兴趣的朋友，可以通过 [官方文档](https://link.juejin.cn?target=https%3A%2F%2Fthreejs.org%2Fdocs%2Findex.html%23manual%2Fen%2Fintroduction%2FCreating-a-scene \"https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene\") 来学习，里面提供的例子覆盖了大部分场景。\n\n以上是我在活动中涉及到的一些动画方案，难免会出现理解偏差和表达错误，如果有更多的动效方案欢迎一起探讨~\n\n参考资料\n----\n\n*   [Three.js文档](https://link.juejin.cn?target=https%3A%2F%2Fthreejs.org%2Fdocs%2Findex.html%23manual%2Fen%2Fintroduction%2FCreating-a-scene \"https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene\")\n*   [Three.js开发指南](https://link.juejin.cn?target=https%3A%2F%2Fitem.jd.com%2F12113317.html \"https://item.jd.com/12113317.html\")\n*   [Threejs现学现卖](https://link.juejin.cn?target=https%3A%2F%2Faotu.io%2Fnotes%2F2017%2F08%2F28%2Fgetting-started-with-threejs%2Findex.html \"https://aotu.io/notes/2017/08/28/getting-started-with-threejs/index.html\")\n*   [一起炫起来 -- 3D粒子动画篇](https://juejin.cn/post/6844903517652516871 \"https://juejin.cn/post/6844903517652516871\")\n*   [贝塞尔曲线算法之JS获取点](https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000018597975 \"https://segmentfault.com/a/1190000018597975\")\n\n> 本文发布自 [网易云音乐前端团队](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fx-orpheus \"https://github.com/x-orpheus\")，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 [加入我们](mailto:grp.music-fe@corp.netease.com \"mailto:grp.music-fe@corp.netease.com\")！",
	"selfDefined": "likes:207,comments:12,collects:332,likes:22635"
}