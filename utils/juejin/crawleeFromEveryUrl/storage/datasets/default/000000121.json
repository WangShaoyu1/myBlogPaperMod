{
	"title": "React、Vue我全都要！React Hook 实现 Vue 的11个基本功能",
	"author": "Sunshine_Lin",
	"publishTime": "2021-12-02",
	"readTime": "阅读7分钟",
	"tags": "[\"前端\",\"React.js\",\"Vue.js中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，因为工作项目的需要，在上个月，我开始在项目中使用React去开发，到了今天，差不多一个月了，想跟大家分享一下我在React中是怎么去实现以前Vue中的一些功能的。 由于本菜鸟",
	"article": "前言\n--\n\n大家好，我是林三心，因为工作项目的需要，在上个月，我开始在项目中使用**React**去开发，到了今天，差不多一个月了，想跟大家分享一下我在**React**中是怎么去实现以前**Vue**中的一些功能的。\n\n由于本菜鸟使用**React**不久，有不妥之处还请大家之处\n\n> 注明：本文中所指 Vue 的版本是**Vue2**， React 的版本是 **React17**\n\n![image.png](/images/jueJin/4838048155544bb.png)\n\n1、JSX和template\n--------------\n\n在Vue2中是使用`template`的，这点使用 Vue 的同学们都知道，而在 React 中使用的是`JSX`，`JSX`是一个看起来很像 XML 的 JavaScript 语法扩展。\n\n它有以下优点：\n\n*   JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。\n*   它是类型安全的，在编译过程中就能发现错误。\n*   使用 JSX 编写模板更加简单快速。\n\n`JSX`的例子：使用ReactDOM.render函数，将DOM渲染到对应到id为app的节点下\n\n```js\n// 使用ReactDOM.render函数，将DOM渲染到对应到id为app的节点下\nReactDOM.render(\n<div>\n<h1>我是林三心</h1>\n<h2>我是菜鸟</h2>\n<p>React是一个很不错的 JavaScript 库!</p>\n</div>\n,\ndocument.getElementById('app')\n);\n\n```\n\n2、React 中给元素设置 style\n--------------------\n\nReact 使用内联样式。我们可以使用 **驼峰法** 语法来设置内联样式. React 会在指定元素数字后自动添加 **px** 。以下实例演示了为 **h1** 元素添加 **myStyle** 内联样式：\n\n```js\n    function Demo() {\n    \n        var myStyle = {\n        fontSize: 100, // 驼峰法\n        color: '#FF0000'\n    }\n    \n    return <h1 style={myStyle}>林三心是菜鸟</h1>\n}\n```\n\n3、React 中给元素设置 class\n--------------------\n\n由于 JSX 就是 JavaScript，一些标识符像 `class` 不建议作为 XML 属性名。作为替代，使用 `className`来做对应的属性。\n\n```js\n    function Demo() {\n    \n    const classes = 'haha heihei xixi'\n    \n    return (\n    <div>\n    <h1 className='haha'>林三心是菜鸟</h1> // 单个\n    <h1 className='haha heihei'>林三心是菜鸟</h1> // 多个\n    <h1 className={classes}>林三心是菜鸟</h1> // 使用值来当做class\n    </div>\n    )\n}\n```\n\n4、React 中的点击事件\n--------------\n\n在`Vue`中的点击事件使用的是`@click`来触发的，而在`JSX`中使用的是`onClick`\n\n```js\n    function Demo() {\n        const handleClick = () => {\n        console.log('林三心是菜鸟')\n    }\n    \n    return (\n    <button onClick={handleClick}>点我</button>\n    )\n}\n```\n\n5、React 中修改值触发DOM更新\n-------------------\n\n我使用的是`React hook`其中的`useState`，这一个hook在修改常量的时候比较简单，但是在修改引用`对象`或者`数组`的时候就需要先进行`浅拷贝`再进行覆盖修改\n\n```js\nimport { useState } from 'react'\n\n    function Demo() {\n    const [msg, setMsg] = useState('我是菜鸟')\n        const [obj, setObj] = useState({\n        name: '林三心',\n        food: '泡面'\n        })\n            const [arr, setArr] = useState([\n            { message: '林三心啊', id: 1 },\n            { message: '林三心啊啊', id: 2 },\n        { message: '林三心啊啊啊', id: 3 }\n        ])\n            const handleClick = (type: number) => {\n                switch (type) {\n                case 1:\n                setMsg('林三心是菜鸟') // 直接赋值\n                break;\n                case 2:\n                setObj({ ...obj, food: '牛肉丸', }) // 浅拷贝\n                break;\n                case 3:\n                setArr([...arr, { message: '林三心啊啊啊啊', id: 4}]) // 浅拷贝实现push效果\n                break;\n            }\n        }\n        \n        return (\n        <div>\n        <button onClick={() => handleClick(1)}>修改msg</button>\n        <button onClick={() => handleClick(2)}>修改obj的food</button>\n        <button onClick={() => handleClick(3)}>arr添加一项</button>\n        <h1>{msg}</h1>\n        <p>{`我是${obj.name}我喜欢吃${obj.food}`}</p>\n        <ul>\n            {\n                arr.map(({ message, id }) => {\n                return <li key={id}>{message}</li>\n                })\n            }\n            </ul >\n            </div>\n            )\n        }\n        \n```\n\n6、生命周期\n------\n\n使用React的hook——`useEffect`\n\n```js\nimport { useState, useEffect } from 'react'\n    function App() {\n    const [num, setNum] = useState(1)\n    const [count, setCount] = useState(1)\n        useEffect(() => {\n        console.log('哈哈哈哈')\n        })\n        return (\n        <div>\n        <button onClick={() => setNum(num + 1)}>点我修改num</button>\n        <button onClick={() => setCount(count + 1)}>点我count</button>\n        </div>\n        )\n    }\n```\n\n### 第二个参数不传\n\n```js\n    useEffect(() => {\n    console.log('哈哈哈哈')\n    })\n```\n\n当`useEffect`第二个参数不传时，`页面初始`和`数据更新`的时候，第一个参数函数都会执行，所以此时初始页面时会输出一次`哈哈哈哈`，然后无论你点修改num或者修改count的按钮时，也都会输出`哈哈哈哈`\n\n### 第二个参数传空数组\n\n```js\n    useEffect(() => {\n    console.log('哈哈哈哈')\n    }, [])\n```\n\n当`useEffect`第二个参数传`[]`时，那么第一个参数函数只有在`页面初始`的时候才会执行，也就是只执行一次，无论你点修改num或者修改count的按钮，都不会执行这个函数\n\n### 第二个参数传非空数组\n\n```js\n// ①\n    useEffect(() => {\n    console.log('哈哈哈哈')\n    }, [num])\n    \n    // ②\n        useEffect(() => {\n        console.log('哈哈哈哈')\n        }, [count])\n        \n        // ③\n            useEffect(() => {\n            console.log('哈哈哈哈')\n            }, [num, count])\n```\n\n当`useEffect`第二个参数传非空数组时，`页面初始`和`依赖的数据发生更新`的时候，第一个参数函数都会执行。比如上方例子：\n\n*   ①、只有按修改num按钮时，才会再次输出`哈哈哈哈`\n*   ②、只有按修改count按钮时，才会再次输出`哈哈哈哈`\n*   ③、无论按哪个按钮都会再次输出`哈哈哈哈`\n\n### return清除操作\n\n```js\n    useEffect(() => {\n    const timeId = setTimeout(() => console.log('我是定时器'), 1000)\n    return () => clearTimeout(timeId)\n    })\n```\n\nReact 会在组件卸载的时候执行清除操作。effect 在每次渲染的时候都会执行。React 会在执行当前 effect 之前对上一个 effect 进行清除。\n\n是在还不理解的同学，可以疯狂点击按钮，看看`我是定时器`这句话会输出多遍还是只输出一遍，就恍然大悟了\n\n7、React 中实现 v-if & v-else\n-------------------------\n\n### Vue 中的 v-if & v-else\n\n`v-if` 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 true 值的时候被渲染。\n\n```js\n<h1 v-if=\"show\">林三心是菜鸟</h1>\n```\n\n也可以用 `v-else` 添加一个“else 块”：\n\n```js\n<h1 v-if=\"show\">林三心是菜鸟</h1>\n<h1 v-else>Oh no 😢</h1>\n```\n\n### React中实现\n\n如果单单只想实现`v-if`的话，可以借助`&&`逻辑运算符\n\n```js\nimport { useState } from 'react'\n    function Demo() {\n    \n    const [show, setShow] = useState(false)\n        const changeShow = () => {\n        setShow(!show)\n    }\n    \n    return (\n    <div>\n{show && <h1>林三心是菜鸟</h1>}\n<button onClick={changeShow}>点我</button>\n</div>\n)\n}\n```\n\n如果想实现`v-if`和`v-else`的话，可以借助`三元运算符`\n\n```js\nimport { useState } from 'react'\n    function Demo() {\n    \n    const [show, setShow] = useState(false)\n        const changeShow = () => {\n        setShow(!show)\n    }\n    \n    return (\n    <div>\n{show ? <h1>林三心是菜鸟</h1> : <h1>菜鸟是林三心</h1>}\n<button onClick={changeShow}>点我</button>\n</div>\n)\n}\n```\n\n8、React 中实现 v-show\n------------------\n\n### Vue 中的 v-show\n\n另一个用于根据条件展示元素的选项是 `v-show` 指令。用法大致一样：\n\n```ini\n<h1 v-show=\"show\">林三心是菜鸟</h1>\n```\n\n不同的是带有 `v-show` 的元素始终会被渲染并保留在 DOM 中。`v-show` 只是简单地切换元素的 CSS property `display`。\n\n### React中实现\n\n其实就是改变元素的`display`这个样式来实现效果\n\n```js\n    function Demo() {\n    \n    // ...一样的代码\n    \n    return (\n    <div>\n    <h1 style={{display: show ? 'block': 'none'}}>林三心是菜鸟</h1>\n    <button onClick={changeShow}>点我</button>\n    </div>\n    )\n}\n```\n\n9、React 中实现 v-for\n-----------------\n\n我们可以用 `v-for` 指令基于一个数组来渲染一个列表。`v-for` 指令需要使用 `item in items` 形式的特殊语法，其中 `items` 是源数据数组，而 `item` 则是被迭代的数组元素的**别名**。\n\n### Vue 中的 v-for\n\n```js\n<ul>\n<li v-for=\"item in items\" :key=\"item.message\">\n{{ item.message }}\n</li>\n</ul>\n```\n\n### React中实现\n\nJSX 允许在模板中插入数组，数组会自动展开所有成员：\n\n```js\n    function Demo() {\n    \n        const arr = [\n        <li key={1}>林三心啊</li>,\n        <li key={2}>林三心啊啊</li>,\n        <li key={3}>林三心啊啊啊</li>,\n    ]\n    \n    return (\n    <ul>\n{arr}\n</ul >\n)\n}\n\n```\n\n但是我大多数情况会使用数组的`map`方法来协助渲染\n\n```js\n    function Demo() {\n    \n        const arr = [\n        { message: '林三心啊', id: 1 },\n        { message: '林三心啊啊', id: 2 },\n    { message: '林三心啊啊啊', id: 3 }\n]\n\nreturn (\n<ul>\n    {\n        arr.map(({ message, id }) => {\n        return <li key={id}>{message}</li>\n        })\n    }\n    </ul >\n    )\n}\n\n```\n\n10、React 中实现 computed\n---------------------\n\n### Vue 中的 computed\n\n只要`name`或者`food`改变，`mag`会更新成相应的值\n\n```js\n<h1>{{msg}}</h1>\n\ncomputed: { msg() { return `我是${this.name}，我爱吃${this.food}` } }\n```\n\n### React中实现\n\n在 React 中需要通过`useMemo`这个 hook 来来实现`computed`的效果\n\n```js\nimport { useState, useMemo } from 'react'\n    function Demo() {\n    const [name, setName] = useState('林三心')\n    const [food, setFood] = useState('泡面')\n    \n    // 实现computed的功能\n    const msg = useMemo(() => `我是${name}，我爱吃${food}`, [name, food]) // 监听name和food这两个变量\n    \n        const handleClick = (type: number) => {\n            if (type === 1) {\n            setName('大菜鸟')\n                } else if (type === 2) {\n                setFood('牛肉丸')\n            }\n        }\n        \n        return (\n        <div>\n        <button onClick={() => handleClick(1)}>修改name</button>\n        <button onClick={() => handleClick(2)}>修改food</button>\n        <h1>{msg}</h1>\n        </div>\n        )\n    }\n```\n\n11、React 中实现 watch\n------------------\n\n```js\n// useWatch.ts\nimport { useEffect, useRef } from 'react'\n\ntype Callback<T> = (prev?: T) => void\n    interface Config {\n    immdiate: Boolean\n}\n\n    const useWatch = <T>(data: T, callback: Callback<T>, config: Config = { immdiate: false }) => {\n    const prev = useRef<T>()\n    const { immdiate } = config\n    const inited = useRef(false)\n    const stop = useRef(false)\n        useEffect(() => {\n        const execute = () => callback(prev.current)\n            if (!stop.current) {\n                if (!inited.current) {\n                inited.current = true\n                immdiate && execute()\n                    } else {\n                    execute()\n                }\n                prev.current = data\n            }\n            }, [data])\n            \n            return () => stop.current = true\n        }\n        \n        export default useWatch\n```\n\n使用\n\n```js\nimport { useState } from 'react'\nimport useWatch from '/@/hooks/web/useWatch'\n    function App() {\n    const [num, setNum] = useState(1)\n    useWatch(num, (pre) => console.log(pre, num), { immdiate: true })\n    return (\n    <div>\n    <div style={{ color: '#fff' }}>{num}</div>\n    <button onClick={() => setNum(num + 1)}>点我</button>\n    </div>\n    )\n}\n\n```\n\n结语\n--\n\n![image.png](/images/jueJin/fab596381256459.png)\n\n今年快结束了，希望大家身体健康，万事如意\n\n我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，**或者你有合适的前端岗位机会，可以让我试试的**，那可以加我的wx --> `meron857287645`",
	"selfDefined": "likes:148,comments:0,collects:184,likes:10730"
}