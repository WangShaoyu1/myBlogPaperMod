{
	"title": "springboot的项目如何既要用jar包启动，同时还可以为不同的机房设置不同的配置文件",
	"author": "京东云开发者",
	"publishTime": "2024-10-17",
	"readTime": "阅读1分钟",
	"tags": "[\"后端中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "作者：京东科技 李意文 1、首先先把配置文件从jar中抽离 示例代码： 2、把抽离的配置文件，放到conf目录下 利用maven-assembly-plugin，抽取配置文件到conf目录下， 示例代",
	"article": "作者：京东科技 李意文\n\n1、首先先把配置文件从jar中抽离\n-----------------\n\n示例代码：\n\n```xml\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-jar-plugin</artifactId>\n<version>3.2.0</version>\n<configuration>\n<excludes>\n<exclude>**/spring-xxx.xml</exclude>\n</excludes>\n</configuration>\n</plugin>\n```\n\n2、把抽离的配置文件，放到conf目录下\n--------------------\n\n利用maven-assembly-plugin，抽取配置文件到conf目录下，\n\n示例代码：\n\n```xml\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-assembly-plugin</artifactId>\n<version>3.3.0</version>\n<configuration>\n<descriptors>\n<descriptor>src/main/assembly/assembly.xml</descriptor>\n</descriptors>\n</configuration>\n<executions>\n<execution>\n<id>make-assembly</id>\n<phase>package</phase>\n<goals>\n<goal>single</goal>\n</goals>\n</execution>\n</executions>\n</plugin>\n```\n\n```xml\nassembly.xml内容如下：\n<assembly>\n<id>assembly</id>\n<formats>\n<format>zip</format>\n<format>dir</format>\n</formats>\n<includeBaseDirectory>false</includeBaseDirectory>\n<fileSets>\n<fileSet>\n<directory>${basedir}/src/bin</directory>\n<outputDirectory>bin</outputDirectory>\n<fileMode>0755</fileMode>\n</fileSet>\n</fileSets>\n<files>\n<file>\n<source>${project.build.directory}/${project.build.finalName}.jar</source>\n<outputDirectory>lib</outputDirectory>\n</file>\n<file>\n<source>${basedir}/../xxx/target/classes/spring/spring-xxx.xml</source>\n<outputDirectory>conf</outputDirectory>\n</file>\n<file>\n<source>${basedir}/../xxx/target/classes/spring/spring-xxx.xml</source>\n<outputDirectory>conf</outputDirectory>\n</file>\n</files>\n\n</assembly>\n```\n\n最终效果如下：\n\n![](/images/jueJin/2d25e1cb809445e.png)\n\n3、修改maven打包配置将conf加入到classpath中\n-------------------------------\n\n示例代码如下：\n\n```xml\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-jar-plugin</artifactId>\n<version>3.2.0</version>\n<configuration>\n<archive>\n<manifestEntries>\n<Class-Path>../conf/</Class-Path>\n</manifestEntries>\n</archive>\n</configuration>\n</plugin>\n```\n\n最终达到的效果是：\n\n将springboot的jar包解压后，可以看到.MF文件中加了一个类路径 ../conf\n\n![](/images/jueJin/f3e4139a4ae5448.png)\n\n特别注意：\n\njava -jar XX\n\n使用-jar启动java进程的，-classpath不会生效了，如果要加类路径，只能通过改maven的打包参数，从而使得.MF文件加了Class-Path属性后，才可以！！！！\n\n4、到部署平台上新建conf文件夹，将要覆盖的配置文件加入进去\n-------------------------------\n\n这样，部署平台的配置就会覆盖maven打包出来的配置文件\n\n5、测试是否生效\n--------\n\n在部署平台上，将部署平台上的配置文件里的，rpc框架的服务别名设置为：xxx\n\n代码里的服务别名是yyy,然后通过测试发现生效的别名是xxx。\n\n因为，springboot启动后，使用的是conf下配置文件，然后conf下的配置文件会被部署平台上新建的配置文件覆盖，\n\n这样为不同的机房新建不同的配置文件，这样也就实现了springboot的项目如何既要用jar包启动，同时还可以为不同的机房设置不同的配置文件",
	"selfDefined": "likes:1,comments:0,collects:5,likes:110"
}