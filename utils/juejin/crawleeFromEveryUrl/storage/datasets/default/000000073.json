{
	"title": "为什么要在Vue3中多使用Hooks？好处是啥？",
	"author": "Sunshine_Lin",
	"publishTime": "2023-08-08",
	"readTime": "阅读6分钟",
	"tags": "[\"前端中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。最近几年，“拥抱 Hooks” 的口号呼声非常高，一开始是 ` React `，自动 ` Vue3 setu",
	"article": "大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。\n\n![](/images/jueJin/83cbc5fcef644d5.png)\n\n拥抱 Hooks！\n---------\n\n最近几年，“拥抱 Hooks” 的口号呼声非常高，一开始是 `React`，自动 `Vue3 setup script` 语法的推出之后，现在写 `Vue3` 时也越来越离不开 `Hooks` 了\n\n但是还是有很多人不解，没 Hooks 之前我们也能完成代码需求啊？所以 `Hooks` 到底好在哪呢？对我们的代码开发到底有什么好处呢？\n\nHooks 的概念？\n----------\n\n其实很多人对于 `Hooks`的概念很模糊，包括我自己，在查阅了一些资料后，我说说我自己的浅见，`Hooks` 就是 `钩子` 的意思，所以 `Hook functions` 也叫 `钩子函数`，我理解的 `钩子函数`的意思是：\n\n**在特定的时机会执行的函数**\n\n比如我们在开发中遇到的：\n\n*   **点击函数：** 点击时才会执行的函数\n*   **定时器函数：** 时间到了就会执行的函数\n*   **生命周期函数：** 在组件各个时间点执行的函数\n*   **拦截器事件：** 请求和响应时执行的函数\n*   **某个值改变而执行的函数：** 例如 React Hooks/Vue Hooks\n*   **github钩子：** 例如 husky 的代码提交前代码检验，github ci 的监听代码提交进行构建\n\nVue Hooks\n---------\n\n### 先来聊聊 mixins\n\n在 Vue2 时代，`mixins`是一个为了提高代码复用性而推出的功能，但是官方不推荐使用，这是为啥呢？我们来看一个例子，你就知道使用 `mixins` 有多难受\n\n```js\n// mixin1\n    export default {\n        created() {\n        console.log('我是ikun一号')\n        },\n            method: {\n                sayKunkun() {\n                console.log('kunkun好帅~')\n            }\n        }\n    }\n    \n    // mixin2\n        export default {\n            method: {\n                say() {\n                this.sayKunkun();\n            }\n        }\n    }\n    \n    // index.vue\n        export default {\n        mixins: [mixin1, mixin2],\n            created() {\n            this.say()\n            this.love()\n            },\n                method: {\n                    say() {\n                    console.log('index.vue ikun')\n                    },\n                        love() {\n                        this.sayKunkun()\n                    }\n                }\n            }\n```\n\n上面有两个 `mixins` 混入了 index.vue ，我来看看最终的输出结果是怎么样的~\n\n```js\n我是ikun一号\nindex.vue ikun\nkunkun好帅~\n```\n\n通过这三个输出，我们可以发现三个现象：\n\n*   mixin的 craeted 和 index.vue 的 created 合并执行了\n*   index.vue 的 say 函数顶掉了 mixin 的 say 函数\n*   mixin2 居然能访问到 mixin1 的 sayKunkun 函数\n\n上面三个现象都是 mixins 的正常现象，但是这样有很多隐患，当你使用 mixins 去提取公用代码时，若是一个 mixins 文件，那还好说，怎样都行；当 mixins 文件达到多个，去维护修改时就会不知道这个方法、属性来自那个mixins 文件；更不用说，若是每个 mixins 文件功能不独立，mixins 之间相互调用，那就真的是一团乱麻了，就算自己写的，过两天来看，也是一脸懵逼，那时就是 开发一时爽，维护火葬场了\n\n### Hooks 取代 Mixins\n\n再来一个例子，我想要维护一套显隐变量，如果使用 mixins 我需要这么做\n\n```js\n// mixin\n    export default {\n        data() {\n            return {\n            loading: false\n        }\n        },\n            method: {\n                show() {\n                this.loading = true\n                },\n                    hiden() {\n                    this.loading = false\n                }\n            }\n        }\n        \n        // index.vue\n        <table loading=\"loading\"></table>\n        \n            export default {\n            mixins: [mixin],\n                method: {\n                    handleHiden() {\n                    this.hiden()\n                    },\n                        handleShow() {\n                        this.show()\n                    }\n                }\n            }\n```\n\n而我们使用 Hooks 来做的话，需要封装一个以 `use` 开头的函数，自定义 Hooks 有一个潜规则，就是要 `use` 开头\n\n```js\n// useLoading.ts\nimport { ref } from 'vue'\n    export useLoading = () => {\n    const loading = ref(false)\n        const show = () => {\n        loading.value = true\n    }\n        const hiden = () => {\n        loading.value = false\n    }\n    \n        return {\n        loading,\n        hiden,\n        show\n    }\n}\n\n// index.vue\n<table loading=\"loading\"></table>\n\n<script setup lang=\"ts\">\nimport { useLoading } from './hooks/useLoading.ts'\n\n    const {\n    loading,\n    hiden,\n    show\n    } = useLoading()\n    </script>\n```\n\n以上就是一简单的 `自定义 Hooks` 的实践，其实 `自定义 Hooks` 本质还是为了提高代码的可复用性~\n\n但是这个时候可能就会有朋友说了，这个 `useLoading` 其实不就相当于一个函数吗？这就涉及到了 `utils` 和 `Vue 自定义Hooks`的区别：\n\n*   utils函数：不涉及响应式的函数\n*   Vue 自定义Hooks：涉及 Vue 的一些响应式api，比如 ref/reactive/computed/watch/onMounted\n\nVue3 Hooks 应用场景\n---------------\n\n接下来就介绍一些常用的 Hooks，以及场景，我一般把 Hooks 分为两种类型\n\n*   业务 Hooks：迎合业务封装的，复用性比较低\n*   工具 Hooks：方便整个项目的开发，复用性比较高\n\n### 业务 Hooks\n\n#### 验证码发送完之后的读秒\n\n我们需要封装一个 计时器 Hooks\n\n```js\nimport { ref } from 'vue'\n\n    export function useCountDown() {\n    const countNum = ref(0)\n    const countInterval = ref(null)\n    \n        const startCountDown = num => {\n        countNum.value = Number(num)\n        clearCountDown()\n            countInterval.value = setInterval(() => {\n                if (countNum.value === 0) {\n                clearInterval(countInterval.value)\n                countInterval.value = null\n                return\n            }\n            countNum.value--\n            }, 1000)\n        }\n        \n            const clearCountDown = () => {\n                if (countInterval.value) {\n                clearInterval(countInterval.value)\n            }\n        }\n        \n    return { countNum, startCountDown, clearCountDown }\n}\n```\n\n#### 表格 Hooks 的封装\n\n我之前在 vben-admin 这个项目中看到了`useTable`这个 Hooks，发现封装的很好，只需要传入一些必要参数，就可以获取一些表格所需要的渲染数据，源码比较多，感兴趣的可以去看看这个项目[vue-vben-admin](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvbenjs%2Fvue-vben-admin \"https://github.com/vbenjs/vue-vben-admin\")\n\n```ts\ntype Props = Partial<DynamicProps<BasicTableProps>>;\n\n    type UseTableMethod = TableActionType & {\n    getForm: () => FormActionType;\n    };\n    \n        export function useTable(tableProps?: Props): [\n        (instance: TableActionType, formInstance: UseTableMethod) => void,\n            TableActionType & {\n            getForm: () => FormActionType;\n            },\n                ] {\n                const tableRef = ref<Nullable<TableActionType>>(null);\n                const loadedRef = ref<Nullable<boolean>>(false);\n                const formRef = ref<Nullable<UseTableMethod>>(null);\n                \n                let stopWatch: WatchStopHandle;\n                \n                    function register(instance: TableActionType, formInstance: UseTableMethod) {\n                    // ...\n                }\n                \n                    function getTableInstance(): TableActionType {\n                    // ...\n                }\n                \n                    const methods: TableActionType & {\n                    getForm: () => FormActionType;\n                        } = {\n                        // ...\n                        };\n                        \n                        return [register, methods];\n                    }\n                    \n```\n\n#### i18n 语言切换 Hooks\n\ni18n也是现在很多项目都必不可少的功能，所以封装一个Hooks很有必要\n\n```js\nimport { i18n } from '/@/locales/setupI18n';\n\n    type I18nGlobalTranslation = {\n    (key: string): string;\n    (key: string, locale: string): string;\n    (key: string, locale: string, list: unknown[]): string;\n    (key: string, locale: string, named: Record<string, unknown>): string;\n    (key: string, list: unknown[]): string;\n    (key: string, named: Record<string, unknown>): string;\n    };\n    \n    type I18nTranslationRestParameters = [string, any];\n    \n        function getKey(namespace: string | undefined, key: string) {\n            if (!namespace) {\n            return key;\n        }\n            if (key.startsWith(namespace)) {\n            return key;\n        }\n        return `${namespace}.${key}`;\n    }\n    \n        export function useI18n(namespace?: string): {\n        t: I18nGlobalTranslation;\n            } {\n                const normalFn = {\n                    t: (key: string) => {\n                    return getKey(namespace, key);\n                    },\n                    };\n                    \n                        if (!i18n) {\n                        return normalFn;\n                    }\n                    \n                    const { t, ...methods } = i18n.global;\n                    \n                        const tFn: I18nGlobalTranslation = (key: string, ...arg: any[]) => {\n                        if (!key) return '';\n                        if (!key.includes('.') && !namespace) return key;\n                        return t(getKey(namespace, key), ...(arg as I18nTranslationRestParameters));\n                        };\n                            return {\n                            ...methods,\n                            t: tFn,\n                            };\n                        }\n                        \n                        // Why write this function？\n                        // Mainly to configure the vscode i18nn ally plugin. This function is only used for routing and menus. Please use useI18n for other places\n                        \n                        // 为什么要编写此函数？\n                        // 主要用于配合vscode i18nn ally插件。此功能仅用于路由和菜单。请在其他地方使用useI18n\n                        export const t = (key: string) => key;\n                        \n```\n\n#### 还有很多业务 Hooks\n\nvben-admin 中还有很多封装的很好的业务 Hooks ，大家有兴趣可以去看看代码，学习学习\n\n![image.png](/images/jueJin/317b90cf1c2448e.png)\n\n### 工具 Hooks\n\n工具 Hooks ，是为了让项目整体的开发代码质量更加高，开发功能更加快捷，其实现在市面上已经有很多很多的 Hooks库 了，`Vueuse` 就是最牛的那个(在vue中)，[文档](https://link.juejin.cn?target=https%3A%2F%2Fwww.vueusejs.com%2F \"https://www.vueusejs.com/\")，他提供了很多 Hooks，比如：\n\n1.  `useLocalStorage`：提供在本地存储中保存和获取数据的功能。\n2.  `useMouse`：提供跟踪鼠标位置和鼠标按下状态的功能。\n3.  `useClipboard`：提供复制文本到剪贴板的功能。\n4.  `useDebounce`：提供防抖功能，用于延迟执行一个函数，直到一段时间内没有新的触发。\n5.  `useThrottle`：提供节流功能，用于在一段时间内限制函数的执行频率。\n6.  `useEventListener`：提供绑定和解绑事件监听器的功能。\n7.  `useFetch`：提供方便的处理基于 Fetch API 的网络请求的功能。\n8.  `useIntersectionObserver`：提供对元素是否可见进行观察的功能，可用于实现懒加载等效果。\n9.  `useRoute`：提供在 Vue Router 中获取当前路由信息的功能。\n\n结语 & 加学习群 & 摸鱼群\n---------------\n\n我是林三心\n\n*   一个待过**小型toG型外包公司、大型外包公司、小公司、潜力型创业公司、大公司**的作死型前端选手；\n*   一个偏前端的全干工程师；\n*   一个不正经的掘金作者；\n*   一个逗比的B站up主；\n*   一个不帅的小红书博主；\n*   一个喜欢打铁的篮球菜鸟；\n*   一个喜欢历史的乏味少年；\n*   一个喜欢rap的五音不全弱鸡\n\n如果你想一起学习前端，一起摸鱼，一起研究简历优化，一起研究面试进步，一起交流历史音乐篮球rap，可以来俺的摸鱼学习群哈哈，点这个，有7000多名前端小伙伴在等着一起学习哦 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/d1039c8ae469474.png)",
	"selfDefined": "likes:256,comments:46,collects:381,likes:18795"
}