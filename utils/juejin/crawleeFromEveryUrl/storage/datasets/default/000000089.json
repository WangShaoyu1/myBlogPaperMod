{
	"title": "你还在用sort进行排序？分享30个用的最频繁的lodash工具函数~",
	"author": "Sunshine_Lin",
	"publishTime": "2023-02-07",
	"readTime": "阅读5分钟",
	"tags": "[\"前端\",\"JavaScript中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。 事情起因是，有几个小伙伴在对一个数据进行排序，做了激烈的讨论，这组数据，想要根据num字段进行排序~",
	"article": "前言\n--\n\n大家好，我是林三心，**用最通俗易懂的话讲最难的知识点**是我的座右铭，**基础是进阶的前提**是我的初心。\n\n![](/images/jueJin/8ecd8f450757421.png)\n\n事情起因是，有几个小伙伴在对一个数据进行排序，做了激烈的讨论，这组数据，想要根据`num`字段进行排序~把我气的，你们就不能直接用`lodash的sortBy`吗？你们再怎么实现，能实现得比`lodash`好？\n\n```js\n    const arr = [\n    {num: 3,name: 'hh'},\n    {num: 1,name: 'xx'},\n{num: 2,name: 'aa'}\n]\n\n// 使用lodash\nconsole.log(_.sortBy(arr, ['num']))\n```\n\n所以，我觉得有必要跟各位小伙伴分享一下，我在项目中用的最多的**30个lodash工具方法**\n\n> 注：此文是总结一些常用的lodash方法，案例从文档拿的，介意的朋友请勿看~\n\n我要对数组进行一系列操作！\n-------------\n\n### 取「交集」!\n\n#### `intersection`\n\n返回一个包含所有传入数组交集元素的新数组。\n\n```js\n_.intersection([2, 1], [4, 2], [1, 2]);\n// => [2]\n```\n\n#### `intersectionBy`\n\n根据某个字段来进行计算交集\n\n```js\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```\n\n#### `intersectionWith`\n\n根据某个条件函数来计算交集，比如使用`isEqual`\n\n```js\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]\n```\n\n### 取「合集」!\n\n#### `union`\n\n返回一个新的联合数组。\n\n```js\n_.union([2], [1, 2]);\n// => [2, 1]\n```\n\n#### `unionBy`\n\n根据某个字段来计算合集\n\n```js\n_.unionBy([{ 'x': 1, 'y': 5 }], [{ 'x': 2, 'y': 3 }, { 'x': 1, 'y': 6 }], 'x');\n// => [{ 'x': 1, 'y': 5 }, { 'x': 2, 'y': 3 }]\n```\n\n#### `unionWith`\n\n根据某个条件函数来计算合集\n\n```js\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### 取「差集」!\n\n同上面两种工具函数，这里无需多言~\n\n*   `difference`\n*   `differenceBy`\n*   `differenceWith`\n\n### 取数组「总和」!\n\n#### `sum`\n\n返回总和。\n\n```js\n_.sum([4, 2, 8, 6]);\n// => 20\n```\n\n#### `sumBy`\n\n根据某个字段计算并返回总和。\n\n```js\nvar objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20\n```\n\n### 取「平均数」！\n\n#### `mean`\n\n计算平均数\n\n```js\n_.mean([4, 2, 8, 6]);\n// => 5\n```\n\n#### `meanBy`\n\n根据某个字段计算出平均值\n\n```js\nvar objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5\n```\n\n### 根据字段或条件「排序」！\n\n#### `sortBy`\n\n```js\n    var users = [\n    { 'user': 'fred', 'age': 48 },\n    { 'user': 'barney', 'age': 36 },\n    { 'user': 'fred', 'age': 40 },\n{ 'user': 'barney', 'age': 34 }\n];\n\n_.sortBy(users, function(o) { return o.user; });\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n\n    _.sortBy(users, 'user', function(o) {\n    return Math.floor(o.age / 10);\n    });\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n```\n\n超级实用的工具函数！\n----------\n\n### 我要「浅拷贝」！\n\n#### `clone`\n\n```js\nconst obj1 = [{a: 1 }]\n\nconst obj2 = _.clone(obj1)\n\nconsole.log(obj1 === obj2) // false\n\nconsole.log(obj1.a === obj2.a) // true\n```\n\n### 我要「深拷贝」！\n\n#### `cloneDeep`\n\n```js\nconst obj1 = [{a: 1 }]\n\nconst obj2 = _.cloneDeep(obj1)\n\nconsole.log(obj1 === obj2) // false\n\nconsole.log(obj1.a === obj2.a) // false\n```\n\n### `debounce` 我要「防抖」！\n\n#### 参数\n\n1.  `func`  _(Function)_ : 要防抖动的函数。\n2.  `[wait=0]`  _(number)_ : 需要延迟的毫秒数。\n3.  `[options=]`  _(Object)_ : 选项对象。\n4.  `[options.leading=false]`  _(boolean)_ : 指定在延迟开始前调用。\n5.  `[options.maxWait]`  _(number)_ : 设置 `func` 允许被延迟的最大值。\n6.  `[options.trailing=true]`  _(boolean)_ : 指定在延迟结束后调用。\n\n#### 返回\n\n_(Function)_ : 返回新的 debounced（防抖动）函数。\n\n#### 例子\n\n```dart\n// 避免窗口在变动时出现昂贵的计算开销。\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\n// 当点击时 `sendMail` 随后就被调用。\n    jQuery(element).on('click', _.debounce(sendMail, 300, {\n    'leading': true,\n    'trailing': false\n    }));\n    \n    // 确保 `batchLog` 调用1次之后，1秒内会被触发。\n    var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n    var source = new EventSource('/stream');\n    jQuery(source).on('message', debounced);\n    \n    // 取消一个 trailing 的防抖动调用\n    jQuery(window).on('popstate', debounced.cancel);\n```\n\n### `throttle` 我要「节流」！\n\n#### 参数\n\n1.  `func`  _(Function)_ : 要节流的函数。\n2.  `[wait=0]`  _(number)_ : 需要节流的毫秒。\n3.  `[options=]`  _(Object)_ : 选项对象。\n4.  `[options.leading=true]`  _(boolean)_ : 指定调用在节流开始前。\n5.  `[options.trailing=true]`  _(boolean)_ : 指定调用在节流结束后。\n\n#### 返回\n\n_(Function)_ : 返回节流的函数。\n\n#### 例子\n\n```dart\n// 避免在滚动时过分的更新定位\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\n// 点击后就调用 `renewToken`，但5分钟内超过1次。\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n\n// 取消一个 trailing 的节流调用。\njQuery(window).on('popstate', throttled.cancel);\n```\n\n### 我「获取」对象中的某几个字段！\n\n#### `pick`\n\n```js\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }\n```\n\n### 我要「剔除」掉对象中的某几个字段！\n\n### `omit`\n\n```js\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }\n```\n\n我要判断一个变量的类型！\n------------\n\n### `isUndefined`\n\n如果 `value` 是 `undefined` ，那么返回 `true`，否则返回 `false`\n\n```js\n_.isUndefined(undefined);\n// => true\n\n_.isUndefined(null);\n// => false\n```\n\n### `isNull`\n\n如果 `value` 为`null`，那么返回 `true`，否则返回 `false`。\n\n```js\n_.isNull(null);\n// => true\n\n_.isNull(undefined);\n// => false\n```\n\n### `isString`\n\n如果 `value` 为一个字符串，那么返回 `true`，否则返回 `false`。\n\n```js\n_.isString('abc');\n// => true\n\n_.isString(1);\n// => false\n```\n\n### `isPlainObject`\n\n如果 `value` 为一个普通对象，那么返回 `true`，否则返回 `false`。\n\n```js\n    function Foo() {\n    this.a = 1;\n}\n\n_.isPlainObject(new Foo);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true\n```\n\n### `isNumber`\n\n如果 `value` 为一个数值，那么返回 `true`，否则返回 `false`。\n\n```js\n_.isNumber(3);\n// => true\n\n_.isNumber(Number.MIN_VALUE);\n// => true\n\n_.isNumber(Infinity);\n// => true\n\n_.isNumber('3');\n// => false\n```\n\n### `isArray`\n\n如果`value`是一个数组返回 `true`，否则返回 `false`。\n\n```js\n_.isArray([1, 2, 3]);\n// => true\n\n_.isArray(document.body.children);\n// => false\n\n_.isArray('abc');\n// => false\n\n_.isArray(_.noop);\n// => false\n```\n\n### `isBoolean`\n\n如果 `value` 是一个布尔值，那么返回 `true`，否则返回 `false`。\n\n```js\n_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false\n```\n\n### `isFunction`\n\n如果 `value` 是一个函数，那么返回 `true`，否则返回 `false`。\n\n```js\n_.isFunction(function(){});\n// => true\n\n_.isFunction('');\n// => false\n```\n\n### `isNill`\n\n如果 `value` 为`null` 或 `undefined`，那么返回 `true`，否则返回 `false`。\n\n```js\n_.isNil(null);\n// => true\n\n_.isNil(void 0);\n// => true\n\n_.isNil(NaN);\n// => false\n```\n\n结语\n--\n\n我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，摸鱼群，点这个，有5000多名前端小伙伴在等着一起学习哦 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/fc3f3d434b7d489.png)",
	"selfDefined": "likes:86,comments:0,collects:157,likes:3990"
}