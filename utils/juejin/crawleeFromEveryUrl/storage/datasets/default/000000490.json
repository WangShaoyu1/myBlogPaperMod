{
	"title": "Spring Cloud OpenFeign：基于Ribbon和Hystrix的声明式服务调用",
	"author": "MacroZheng",
	"publishTime": "2019-10-08",
	"readTime": "阅读6分钟",
	"tags": "[\"Java中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "Spring Cloud OpenFeign 是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能，本文将对其用法进行详细介绍。 Feign是声明式的服务调用工具，我们只需创建一个接口并用注解的方式来配置它，就可以实现对某个服务接口的调用，简…",
	"article": "> SpringBoot实战电商项目mall（20k+star）地址：[github.com/macrozheng/…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmacrozheng%2Fmall \"https://github.com/macrozheng/mall\")\n\n摘要\n--\n\nSpring Cloud OpenFeign 是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能，本文将对其用法进行详细介绍。\n\nFeign简介\n-------\n\nFeign是声明式的服务调用工具，我们只需创建一个接口并用注解的方式来配置它，就可以实现对某个服务接口的调用，简化了直接使用RestTemplate来调用服务接口的开发量。Feign具备可插拔的注解支持，同时支持Feign注解、JAX-RS注解及SpringMvc注解。当使用Feign时，Spring Cloud集成了Ribbon和Eureka以提供负载均衡的服务调用及基于Hystrix的服务容错保护功能。\n\n创建一个feign-service模块\n-------------------\n\n> 这里我们创建一个feign-service模块来演示feign的常用功能。\n\n### 在pom.xml中添加相关依赖\n\n```\n<dependency>\n<groupId>org.springframework.cloud</groupId>\n<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n<dependency>\n<groupId>org.springframework.cloud</groupId>\n<artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n### 在application.yml中进行配置\n\n```\nserver:\nport: 8701\nspring:\napplication:\nname: feign-service\neureka:\nclient:\nregister-with-eureka: true\nfetch-registry: true\nservice-url:\ndefaultZone: http://localhost:8001/eureka/\n```\n\n### 在启动类上添加@EnableFeignClients注解来启用Feign的客户端功能\n\n```\n@EnableFeignClients\n@EnableDiscoveryClient\n@SpringBootApplication\n    public class FeignServiceApplication {\n    \n        public static void main(String[] args) {\n        SpringApplication.run(FeignServiceApplication.class, args);\n    }\n    \n}\n```\n\n### 添加UserService接口完成对user-service服务的接口绑定\n\n> 我们通过@FeignClient注解实现了一个Feign客户端，其中的value为user-service表示这是对user-service服务的接口调用客户端。我们可以回想下user-service中的UserController，只需将其改为接口，保留原来的SpringMvc注释即可。\n\n```\n/**\n* Created by macro on 2019/9/5.\n*/\n@FeignClient(value = \"user-service\")\n    public interface UserService {\n    @PostMapping(\"/user/create\")\n    CommonResult create(@RequestBody User user);\n    \n    @GetMapping(\"/user/{id}\")\n    CommonResult<User> getUser(@PathVariable Long id);\n    \n    @GetMapping(\"/user/getByUsername\")\n    CommonResult<User> getByUsername(@RequestParam String username);\n    \n    @PostMapping(\"/user/update\")\n    CommonResult update(@RequestBody User user);\n    \n    @PostMapping(\"/user/delete/{id}\")\n    CommonResult delete(@PathVariable Long id);\n}\n```\n\n### 添加UserFeignController调用UserService实现服务调用\n\n```\n/**\n* Created by macro on 2019/8/29.\n*/\n@RestController\n@RequestMapping(\"/user\")\n    public class UserFeignController {\n    @Autowired\n    private UserService userService;\n    \n    @GetMapping(\"/{id}\")\n        public CommonResult getUser(@PathVariable Long id) {\n        return userService.getUser(id);\n    }\n    \n    @GetMapping(\"/getByUsername\")\n        public CommonResult getByUsername(@RequestParam String username) {\n        return userService.getByUsername(username);\n    }\n    \n    @PostMapping(\"/create\")\n        public CommonResult create(@RequestBody User user) {\n        return userService.create(user);\n    }\n    \n    @PostMapping(\"/update\")\n        public CommonResult update(@RequestBody User user) {\n        return userService.update(user);\n    }\n    \n    @PostMapping(\"/delete/{id}\")\n        public CommonResult delete(@PathVariable Long id) {\n        return userService.delete(id);\n    }\n}\n```\n\n负载均衡功能演示\n--------\n\n*   启动eureka-service，两个user-service，feign-service服务，启动后注册中心显示如下：\n\n![](/images/jueJin/16dab6a6c4ab539.png)\n\n*   多次调用[http://localhost:8701/user/1](https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A8701%2Fuser%2F1 \"http://localhost:8701/user/1\")进行测试，可以发现运行在8201和8202的user-service服务交替打印如下信息：\n\n```\n2019-10-04 15:15:34.829  INFO 9236 --- [nio-8201-exec-5] c.macro.cloud.controller.UserController  : 根据id获取用户信息，用户名称为：macro\n2019-10-04 15:15:35.492  INFO 9236 --- [io-8201-exec-10] c.macro.cloud.controller.UserController  : 根据id获取用户信息，用户名称为：macro\n2019-10-04 15:15:35.825  INFO 9236 --- [nio-8201-exec-9] c.macro.cloud.controller.UserController  : 根据id获取用户信息，用户名称为：macro\n```\n\nFeign中的服务降级\n-----------\n\n> Feign中的服务降级使用起来非常方便，只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可，下面我们为UserService接口添加一个服务降级实现类。\n\n### 添加服务降级实现类UserFallbackService\n\n> 需要注意的是它实现了UserService接口，并且对接口中的每个实现方法进行了服务降级逻辑的实现。\n\n```\n/**\n* Created by macro on 2019/9/5.\n*/\n@Component\n    public class UserFallbackService implements UserService {\n    @Override\n        public CommonResult create(User user) {\n        User defaultUser = new User(-1L, \"defaultUser\", \"123456\");\n        return new CommonResult<>(defaultUser);\n    }\n    \n    @Override\n        public CommonResult<User> getUser(Long id) {\n        User defaultUser = new User(-1L, \"defaultUser\", \"123456\");\n        return new CommonResult<>(defaultUser);\n    }\n    \n    @Override\n        public CommonResult<User> getByUsername(String username) {\n        User defaultUser = new User(-1L, \"defaultUser\", \"123456\");\n        return new CommonResult<>(defaultUser);\n    }\n    \n    @Override\n        public CommonResult update(User user) {\n        return new CommonResult(\"调用失败，服务被降级\",500);\n    }\n    \n    @Override\n        public CommonResult delete(Long id) {\n        return new CommonResult(\"调用失败，服务被降级\",500);\n    }\n}\n```\n\n### 修改UserService接口，设置服务降级处理类为UserFallbackService\n\n> 修改@FeignClient注解中的参数，设置fallback为UserFallbackService.class即可。\n\n```\n@FeignClient(value = \"user-service\",fallback = UserFallbackService.class)\n    public interface UserService {\n}\n```\n\n### 修改application.yml，开启Hystrix功能\n\n```\nfeign:\nhystrix:\nenabled: true #在Feign中开启Hystrix\n```\n\n服务降级功能演示\n--------\n\n*   关闭两个user-service服务，重新启动feign-service;\n    \n*   调用[http://localhost:8701/user/1](https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A8701%2Fuser%2F1 \"http://localhost:8701/user/1\")进行测试，可以发现返回了服务降级信息。\n    \n\n![](/images/jueJin/16dab6a6c536b33.png)\n\n日志打印功能\n------\n\n> Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。\n\n### 日志级别\n\n*   NONE：默认的，不显示任何日志；\n*   BASIC：仅记录请求方法、URL、响应状态码及执行时间；\n*   HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息；\n*   FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。\n\n### 通过配置开启更为详细的日志\n\n> 我们通过java配置来使Feign打印最详细的Http请求日志信息。\n\n```\n/**\n* Created by macro on 2019/9/5.\n*/\n@Configuration\n    public class FeignConfig {\n    @Bean\n        Logger.Level feignLoggerLevel() {\n        return Logger.Level.FULL;\n    }\n}\n```\n\n### 在application.yml中配置需要开启日志的Feign客户端\n\n> 配置UserService的日志级别为debug。\n\n```\nlogging:\nlevel:\ncom.macro.cloud.service.UserService: debug\n```\n\n### 查看日志\n\n> 调用[http://localhost:8701/user/1](https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A8701%2Fuser%2F1 \"http://localhost:8701/user/1\")进行测试，可以看到以下日志。\n\n```\n2019-10-04 15:44:03.248 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] ---> GET http://user-service/user/1 HTTP/1.1\n2019-10-04 15:44:03.248 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] ---> END HTTP (0-byte body)\n2019-10-04 15:44:03.257 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] <--- HTTP/1.1 200 (9ms)\n2019-10-04 15:44:03.257 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] content-type: application/json;charset=UTF-8\n2019-10-04 15:44:03.258 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] date: Fri, 04 Oct 2019 07:44:03 GMT\n2019-10-04 15:44:03.258 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] transfer-encoding: chunked\n2019-10-04 15:44:03.258 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser]\n2019-10-04 15:44:03.258 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] {\"data\":{\"id\":1,\"username\":\"macro\",\"password\":\"123456\"},\"message\":\"操作成功\",\"code\":200}\n2019-10-04 15:44:03.258 DEBUG 5204 --- [-user-service-2] com.macro.cloud.service.UserService      : [UserService#getUser] <--- END HTTP (92-byte body)\n```\n\nFeign的常用配置\n----------\n\n### Feign自己的配置\n\n```\nfeign:\nhystrix:\nenabled: true #在Feign中开启Hystrix\ncompression:\nrequest:\nenabled: false #是否对请求进行GZIP压缩\nmime-types: text/xml,application/xml,application/json #指定压缩的请求数据类型\nmin-request-size: 2048 #超过该大小的请求会被压缩\nresponse:\nenabled: false #是否对响应进行GZIP压缩\nlogging:\nlevel: #修改日志级别\ncom.macro.cloud.service.UserService: debug\n```\n\n### Feign中的Ribbon配置\n\n在Feign中配置Ribbon可以直接使用Ribbon的配置，具体可以参考[Spring Cloud Ribbon：负载均衡的服务调用](https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuKteoRrFjUbbl08NG522YQ \"https://mp.weixin.qq.com/s/uKteoRrFjUbbl08NG522YQ\")。\n\n### Feign中的Hystrix配置\n\n在Feign中配置Hystrix可以直接使用Hystrix的配置，具体可以参考[Spring Cloud Hystrix：服务容错保护](https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FlEjojtuH7XOM9emXkd0TkQ \"https://mp.weixin.qq.com/s/lEjojtuH7XOM9emXkd0TkQ\")。\n\n使用到的模块\n------\n\n```\nspringcloud-learning\n├── eureka-server -- eureka注册中心\n├── user-service -- 提供User对象CRUD接口的服务\n└── feign-service -- feign服务调用测试服务\n```\n\n项目源码地址\n------\n\n[github.com/macrozheng/…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmacrozheng%2Fspringcloud-learning \"https://github.com/macrozheng/springcloud-learning\")\n\n公众号\n---\n\n[mall项目](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmacrozheng%2Fmall \"https://github.com/macrozheng/mall\")全套学习教程连载中，**关注公众号**第一时间获取。\n\n![公众号图片](/images/jueJin/16dab6b792c8ced.png)",
	"selfDefined": "likes:19,comments:3,collects:31,likes:12286"
}