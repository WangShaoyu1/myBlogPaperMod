{
	"title": "Vite为什么快呢？快在哪？说一下我自己的理解吧",
	"author": "Sunshine_Lin",
	"publishTime": "2021-12-12",
	"readTime": "阅读4分钟",
	"tags": "[\"前端\",\"Vite\",\"Webpack中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。 由于这几个月使用了Vue3 + TS + Vite进行开发，并且是真的被Vite强力吸粉了！！！Vi",
	"article": "前言\n--\n\n大家好，我是林三心，**用最通俗易懂的话讲最难的知识点**是我的座右铭，**基础是进阶的前提**是我的初心。\n\n由于这几个月使用了`Vue3 + TS + Vite`进行开发，并且是真的被`Vite`强力吸粉了！！！Vite最大的优点就是：快！！！非常快！！！\n\n说实话，使用`Vite`开发之后，我都有点不想回到以前`Webpack`的项目开发了，因为之前的项目启动项目需要`30s`以上，修改代码更新也需要`2s`以上，但是现在使用`Vite`，差不多启动项目只需要`1s`，而修改代码更新也是超级快！！！\n\n那到底是为什么`Vite`可以做到这么快呢？官方给的解释，真的很官方。。所以今天我想用比较通俗易懂的话来讲讲，希望大家能看一遍就懂。\n\n![image.png](/images/jueJin/184add9e6c41424.png)\n\n问题现状\n----\n\n### ES模块化支持的问题\n\n咱们都知道，以前的浏览器是不支持`ES module`的，比如：\n\n```js\n// index.js\n\nimport { add } from './add.js'\nimport { sub } from './sub.js'\nconsole.log(add(1, 2))\nconsole.log(sub(1, 2))\n\n// add.js\nexport const add = (a, b) => a + b\n\n// sub.js\nexport const sub = (a, b) => a - b\n```\n\n你觉得这样的一段代码，放到浏览器能直接运行吗？答案是不行的哦。那怎么解决呢？这时候打包工具出场了，他将`index.js、add.js、sub.js`这三个文件打包在一个`bundle.js`文件里，然后在项目`index.html`中直接引入`bundle.js`，从而达到代码效果。一些打包工具，都是这么做的，例如`webpack、Rollup、Parcel`\n\n### 项目启动与代码更新的问题\n\n这个不用说，大家都懂：\n\n*   项目启动：随着项目越来越大，启动个项目可能要几分钟\n*   代码更新：随着项目越来越大，修改一小段代码，保存后都要等几秒才更新\n\n解决问题\n----\n\n### 解决启动项目缓慢\n\n`Vite`在打包的时候，将模块分成两个区域`依赖`和`源码`：\n\n*   `依赖`：一般是那种在开发中不会改变的JavaScript，比如组件库，或者一些较大的依赖（可能有上百个模块的库），这一部分使用`esbuild`来进行`预构建依赖`,`esbuild`使用的是 Go 进行编写，比 JavaScript 编写的打包器预构建依赖快 10-100倍\n*   `源码`：一般是哪种好修改几率比较大的文件，例如`JSX、CSS、vue`这些需要转换且时常会被修改编辑的文件。同时，这些文件并不是一股脑全部加载，而是可以按需加载（例如路由懒加载）。`Vite`会将文件转换后，以`es module`的方式直接交给浏览器，因为现在的浏览器大多数都直接支持`es module`，这使性能提高了很多，为什么呢？咱们看下面两张图：\n\n第一张图，是以前的打包模式，就像之前举的`index.js、add.js、sub.js`的例子，项目启动时，需要先将所有文件打包成一个文件`bundle.js`，然后在`html`引入，这个`多文件 -> bundle.js`的过程是非常耗时间的。\n\n![image.png](/images/jueJin/a1d2df8227ed464.png)\n\n第二张图，是`Vite`的打包方式，刚刚说了，`Vite`是直接把转换后的`es module`的JavaScript代码，扔给`支持es module的浏览器`，让浏览器自己去加载依赖，也就是把压力丢给了`浏览器`，从而达到了项目启动速度快的效果。\n\n![image.png](/images/jueJin/3f56ff49a870458.png)\n\n### 解决更新缓慢\n\n刚刚说了，项目启动时，将模块分成`依赖`和`源码`，当你更新代码时，`依赖`就不需要重新加载，只需要精准地找到是哪个`源码`的文件更新了，更新相对应的文件就行了。这样做使得更新速度非常快。\n\n`Vite` 同时利用 `HTTP` 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 `304 Not Modified` 进行协商缓存，而依赖模块请求则会通过 `Cache-Control: max-age=31536000,immutable` 进行强缓存，因此一旦被缓存它们将不需要再次请求。\n\n生产环境\n----\n\n刚刚咱们说的都是`开发环境`，也说了，`Vite`在是直接把转化后的`es module`的JavaScript，扔给浏览器，让浏览器根据依赖关系，自己去加载依赖。\n\n那有人就会说了，那放到`生产环境`时，是不是可以不打包，直接在开个`Vite`服务就行，反正浏览器会自己去根据依赖关系去自己加载依赖。答案是不行的，为啥呢：\n\n*   1、你代码是放在服务器的，过多的浏览器加载依赖肯定会引起更多的网络请求\n*   2、为了在生产环境中获得最佳的加载性能，最好还是将代码进行 `tree-shaking、懒加载和 chunk 分割、CSS处理`，这些优化操作，目前`esbuild`还不怎么完善\n\n所以`Vite`最后的打包是使用了`Rollup`\n\n结语\n--\n\n我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，摸鱼群，点这个 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/f61112ed37314d3.png)",
	"selfDefined": "likes:118,comments:33,collects:97,likes:17201"
}