{
	"title": "一文搞懂5种内存溢出案例，内含完整源码",
	"author": "华为云开发者联盟",
	"publishTime": "2024-06-05",
	"readTime": "阅读2分钟",
	"tags": "[\"Java\",\"JVM\",\"敏捷开发中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "本文分享自华为云社区《10分钟搞懂各种内存溢出案例！！（含完整源码，建议收藏）》，在开发中需要尽量避免出现内存溢出，导致程序出现异常。",
	"article": "本文分享自华为云社区《[10分钟搞懂各种内存溢出案例！！（含完整源码，建议收藏）](https://link.juejin.cn?target=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F428360%3Futm_source%3Djuejin%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent \"https://bbs.huaweicloud.com/blogs/428360?utm_source=juejin&utm_medium=bbs-ex&utm_campaign=other&utm_content=content\")》，作者：冰 河。\n\n作为程序员，多多少少都会遇到一些内存溢出的场景，如果你还没遇到，说明你工作的年限可能比较短，或者你根本就是个假程序员！哈哈，开个玩笑。今天，我们就以Java代码的方式来列举几个典型的内存溢出案例，希望大家在日常工作中，尽量避免写这些low水平的代码。\n\n我们先来看看今天要介绍哪些内存溢出案例，冰河这里总结了一张图，如下所示。\n\n![20210527082738369.png](/images/jueJin/e143870565ce490.png)\n\n定义主类结构\n------\n\n首先，我们创建一个名称为BlowUpJVM的类，之后所有的案例实验都是基于这个类进行。如下所示。\n\n```kotlin\n    public class BlowUpJVM {\n}\n```\n\n栈深度溢出\n-----\n\n```csharp\n    public static void  testStackOverFlow(){\n    BlowUpJVM.testStackOverFlow();\n}\n```\n\n栈不断递归，而且没有处理，所以虚拟机栈就不断深入不断深入，栈深度就这样溢出了。\n\n永久代内存溢出\n-------\n\n```typescript\n    public static void testPergemOutOfMemory1(){\n    //方法一失败\n    List<String> list = new ArrayList<String>();\n        while(true){\n        list.add(UUID.randomUUID().toString().intern());\n    }\n}\n```\n\n打算把String常量池堆满，没想到失败了，JDK1.7后常量池放到了堆里，也能进行垃圾回收了。\n\n然后换种方式，使用cglib，用Class把老年代取堆满\n\n```typescript\n    public static void testPergemOutOfMemory2(){\n        try {\n            while (true) {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(OOM.class);\n            enhancer.setUseCache(false);\n                enhancer.setCallback(new MethodInterceptor() {\n                @Override\n                    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                    return proxy.invokeSuper(obj, args);\n                }\n                });\n                enhancer.create();\n            }\n        }\n            catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n```\n\n虚拟机成功内存溢出了，那JDK动态代理产生的类能不能溢出呢？\n\n```scss\n    public static void testPergemOutOfMemory3(){\n        while(true){\n        final OOM oom = new OOM();\n            Proxy.newProxyInstance(oom.getClass().getClassLoader(), oom.getClass().getInterfaces(), new InvocationHandler() {\n                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result = method.invoke(oom, args);\n                return result;\n            }\n            });\n        }\n    }\n```\n\n事实表明，JDK动态代理差生的类不会造成内存溢出，原因是：JDK动态代理产生的类信息，不会放到永久代中，而是放在堆中。\n\n本地方法栈溢出\n-------\n\n```csharp\n    public static void testNativeMethodOutOfMemory(){\n    int j = 0;\n        while(true){\n        Printer.println(j++);\n        ExecutorService executors = Executors.newFixedThreadPool(50);\n        int i=0;\n            while(i++<10){\n                executors.submit(new Runnable() {\n                    public void run() {\n                }\n                });\n            }\n        }\n    }\n```\n\n这个的原理就是不断创建线程池，而每个线程池都创建10个线程，这些线程池都是在本地方法区的，久而久之，本地方法区就溢出了。\n\nJVM栈内存溢出\n--------\n\n```csharp\n    public static void testStackOutOfMemory(){\n        while (true) {\n            Thread thread = new Thread(new Runnable() {\n                public void run() {\n                    while(true){\n                }\n            }\n            });\n            thread.start();\n        }\n    }\n```\n\n线程的创建会直接在JVM栈中创建，但是本例子中，没看到内存溢出，主机先挂了，不是JVM挂了，真的是主机挂了，无论在mac还是在windows，都挂了。\n\n**温馨提示，这个真的会死机的。**\n\n堆溢出\n---\n\n```scss\n    public static void testOutOfHeapMemory(){\n    List<StringBuffer> list = new ArrayList<StringBuffer>();\n        while(true){\n        StringBuffer B = new StringBuffer();\n            for(int i = 0 ; i < 10000 ; i++){\n            B.append(i);\n        }\n        list.add(B);\n    }\n}\n```\n\n不断往堆中塞新增的StringBuffer对象，堆满了就直接溢出了。\n\n测试案例完整代码\n--------\n\n```scss\n    public class BlowUpJVM {\n    //栈深度溢出\n        public static void  testStackOverFlow(){\n        BlowUpJVM.testStackOverFlow();\n    }\n    \n    //不能引起永久代溢出\n        public static void testPergemOutOfMemory1(){\n        //方法一失败\n        List<String> list = new ArrayList<String>();\n            while(true){\n            list.add(UUID.randomUUID().toString().intern());\n        }\n    }\n    \n    //永久代溢出\n        public static void testPergemOutOfMemory2(){\n            try {\n                while (true) {\n                Enhancer enhancer = new Enhancer();\n                enhancer.setSuperclass(OOM.class);\n                enhancer.setUseCache(false);\n                    enhancer.setCallback(new MethodInterceptor() {\n                    @Override\n                        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                        return proxy.invokeSuper(obj, args);\n                    }\n                    });\n                    enhancer.create();\n                }\n            }\n                catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        \n        //不会引起永久代溢出\n            public static void testPergemOutOfMemory3(){\n                while(true){\n                final OOM oom = new OOM();\n                    Proxy.newProxyInstance(oom.getClass().getClassLoader(), oom.getClass().getInterfaces(), new InvocationHandler() {\n                        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        Object result = method.invoke(oom, args);\n                        return result;\n                    }\n                    });\n                }\n            }\n            \n            //本地方法栈溢出\n                public static void testNativeMethodOutOfMemory(){\n                int j = 0;\n                    while(true){\n                    Printer.println(j++);\n                    ExecutorService executors = Executors.newFixedThreadPool(50);\n                    int i=0;\n                        while(i++<10){\n                            executors.submit(new Runnable() {\n                                public void run() {\n                            }\n                            });\n                        }\n                    }\n                }\n                \n                //JVM内存溢出\n                    public static void testStackOutOfMemory(){\n                        while (true) {\n                            Thread thread = new Thread(new Runnable() {\n                                public void run() {\n                                    while(true){\n                                }\n                            }\n                            });\n                            thread.start();\n                        }\n                    }\n                    \n                    //堆溢出\n                        public static void testOutOfHeapMemory(){\n                        List<StringBuffer> list = new ArrayList<StringBuffer>();\n                            while(true){\n                            StringBuffer B = new StringBuffer();\n                                for(int i = 0 ; i < 10000 ; i++){\n                                B.append(i);\n                            }\n                            list.add(B);\n                        }\n                    }\n                }\n```\n\n[**点击关注，第一时间了解华为云新鲜技术~**](https://link.juejin.cn?target=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Djuejin%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent \"https://bbs.huaweicloud.com/blogs?utm_source=juejin&utm_medium=bbs-ex&utm_campaign=other&utm_content=content\")",
	"selfDefined": "likes:2,comments:0,collects:3,likes:703"
}