{
	"title": "从零搭建中后台框架的核心流程",
	"author": "",
	"publishTime": "2020-04-17",
	"readTime": "阅读13分钟",
	"tags": "[\"React.js中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "随着 React 生态的快速发展，社区基于 React 的状态管理方案层出不穷，这意味着很多方案开发者依然要做很多选择，没有约定的团队，沟通成本和跨团队协作成本，以及长期的维护是非常高的，这时候统一一套开发模式就显得尤为重要。 本文将介绍如何从零开始搭建一个高可复用的后台框架，…",
	"article": "> 本文作者：鲍观霞\n\n背景\n--\n\n随着 React 生态的快速发展，社区基于 React 的状态管理方案层出不穷，这意味着很多方案开发者依然要做很多选择，没有约定的团队，沟通成本和跨团队协作成本，以及长期的维护是非常高的，这时候统一一套开发模式就显得尤为重要。\n\n本文将介绍如何从零开始搭建一个高可复用的后台框架，让每一个人都能轻松搭出自己的后台，深入了解自己的框架。\n\n亲手实践一套项目框架有诸多好处：  \n1、业务可定制性强（比如，你们团队有一套业务定制型强的 UI 组件库；你们团队有一套自己的状态管理最佳实践；你们团队有一套复杂的权限管理流程等等）\n\n> PS: 当然你完全可以找个第三方框架改造成自己想要的样子，但是入手成本、后续的维护成本、技术更新成本都会很高\n\n2、收敛技术栈、屏蔽底层差异、统一开发体验，帮助团队降低开发和维护成本  \n3、成为框架掌控者，技术升级、底层改造随心所欲\n\n写在前面\n----\n\n本文拟讲述从零搭建 React 后台开发框架的核心技术和搭建流程，涉及到的技术并非唯一可选技术栈，你可以随时用你熟悉的技术栈代替它。同时我会尽量降低阅读本文的难度，降低前端开发的门槛，但是还是有一些需要具备的知识：\n\n```\n- React Hooks\n- React-Redux\n- React Router 5.0\n- Ant Design 4.x\n```\n\n该项目基本搭建了一个企业级管理系统的骨架结构，提供通用功能及扩展需求，不涉及业务逻辑开发，不涉及数据请求，所有数据均为 mock。\n\n开始搭建\n----\n\n### 基础结构及配置\n\n1、 创建基本项目目录和结构  \n推荐 Create React App 创建基本项目结构。网上很多相关初始化流程，这里不再赘述。官方教程在[这里](https://link.juejin.cn?target=https%3A%2F%2Fwww.html.cn%2Fcreate-react-app%2Fdocs%2Fgetting-started%2F \"https://www.html.cn/create-react-app/docs/getting-started/\")。\n\n> Create React App 是 React 官方推出的构建 React 单页面应用的脚手架工具。它本身集成了 Webpack，并配置了一系列内置的 loader 和基础的 npm 的脚本，可以很轻松的实现零配置就可以快速开发 React 的应用。\n\n默认的项目目录结构如下:\n\n```\n├── package.json\n├── public                  # 静态目录\n│   ├── favicon.ico\n│   ├── index.html          # 最终的html的基础模板【默认是单页面应】\n│   └── manifest.json\n├── src\n│   ├── App.css             # App根组件的css\n│   ├── App.js              # App组件代码\n│   ├── App.test.js\n│   ├── index.css           # 启动文件样式\n│   ├── index.js            # 启动的文件（执行入口）\n│   ├── logo.svg\n│   └── serviceWorker.js\n└── yarn.lock\n```\n\n2、执行命令\n\n```\nnpm start\n# or\nyarn start\n```\n\n打开 [http://localhost:3000](https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000 \"http://localhost:3000\") 在浏览器中查看它。\n\n至此，一个简易的 React 项目就成了。\n\n项目进阶\n----\n\n### React Router\n\n##### 为什么选动态化路由\n\n大多数人习惯了配置式路由的开发方式，包括像 Angular，Express, Ember 等，近一点的 包括 Ant Design Pro 和 Umi 框架，都是静态路由配置。React Router V4 之前也沿用了这一方式，但是在 React Router V4 版本做了一次不向前兼容的重构升级。 那 React Router V3 配置式路由的痛点在哪里？为何要动态化？  \n我理解这块的 React Router V3 的痛点有以下几点：\n\n> 为了方便介绍，React Router V3 以下简称 V3；React Router V4 以下简称 V4；\n\n*   V3 脱离了 React 组件化思想。V3 虽然形式上是 React 组件，但是其实它与 UI 没有任何关系，只是提供了一条配置项而已。  \n    这一点可以从相关源码追溯\n\n```\n    const Route = createReactClass({\n    // 无关代码\n    \n    /* istanbul ignore next: sanity check */\n        render() {\n        invariant(\n        false,\n        '<Route> elements are for router configuration only and should not be rendered'\n        )\n    }\n    });\n```\n\n这里 Route 的 render 方法中，没有做任何 UI 渲染相关的工作，不是一个正宗的组件。\n\n*   V3 路由写法需要满足约定的格式，比如不能将 Route 脱离 Router 使用，这与 React 倡导的“可以声明式灵活性进行组件组装”的理念相违背。\n*   V3 提供了很多类似生命周期的方法，如：onEnter, onUpdate, onLeave 等用来为处于不同阶段的路由提供钩子方法。但是 React 本身有一套完善的生命周期方法。V3 路由方式的问题在于，它在 React 组件思想之外，设计了一套独立的 API，这有侵入性。\n*   集中式路由层层嵌套，在配置中你需要关心路由所属的祖先层级，页面展示由顶级路由来决定，无法体现动态路由的灵活性。\n\n当然，V4 版本已经解决了这些问题。在 V4 版本中，抛弃了传统的路由概念，Route 回归组件化。\n\nV4 开始采用单代码仓库模型结构，每个仓库负责不同的功能场景，他们分别相互独立。\n\n*   react-router 路由基础库\n*   react-router-dom 浏览器中使用的封装\n*   react-router-native React native 封装\n\n本文我们只需要用到 react-router-dom 这个仓库，如果你不明白为什么，看[这里](https://link.juejin.cn?target=https%3A%2F%2Fitbilu.com%2Fnodejs%2Fnpm%2Freact-router.html \"https://itbilu.com/nodejs/npm/react-router.html\")；\n\n你需要掌握 react-router-dom 这些组件：\n\n*   BrowserRouter\n*   Route\n*   Switch\n*   Link\n\n你需要掌握 react-router-dom 这些对象及其方法:\n\n*   history\n*   location\n*   match\n\nReact Router 从 4.0 开始完全移除中心化配置，不再主张集中式路由，让 React 回归组件化开发，它本身只是提供了导航功能的组件。 这里我们根据推荐的动态化思路设计路由，入口只设计一级菜单，业务管理各自子路由。\n\n篇幅问题，这里只列举二级路由的情况，多级路由同理。\n\n1、安装依赖\n\n```\nnpm install --save react-router-dom\ncd src\ntouch router.js  // 构造我们的一级路由\n```\n\n2、构造 src 目录（你可以灵活定制），我希望它是这样的\n\n```\n.\n├── src\n│   ├── index.js                      // 入口文件\n│   ├── pages\n│   │   ├── demo1                     // 一级菜单A\n│   │   │   ├── index.js\n│   │   │   ├── page1                 // A下面的二级页面a\n│   │   │   │   └── index.js\n│   │   │   └── page2                 // A下面的二级页面b\n│   │   │       └── index.js\n│   │   └── demo2                     // 一级菜单B\n│   │       ├── index.js\n│   │       ├── page1                 // B下面的二级页面a\n│   │       │   └── index.js\n│   │       └── page2                 // B下面的二级页面b\n│   │           └── index.js\n│   └── router.js\n```\n\n3、构造一级路由\n\n> router.js\n\n```\nimport { Switch, Route } from 'react-router-dom';\n\n// 一级菜单\nimport demo1 from './pages/demo1';\nimport demo2 from './pages/demo2';\n\nconst router = (\n    <Route render={() => {\n    return (\n    <Switch>\n    <Route path=\"/demo1\" component={demo1}></Route>\n    <Route path=\"/demo2\" component={demo2}></Route>\n    </Switch>\n    )\n    }}></Route>\n    );\n```\n\n4、让一级路由去管理我们的二级路由\n\n> pages/demo1/index.js（同级页面类似）\n\n```\nimport { Switch, Route } from 'react-router-dom';\n\nimport page1 from './page1';\nimport page2 from './page2';\n\nconst Router = ({ match }) => (\n<Switch>\n<Route path={`${match.path}`} exact component={page1} />\n<Route path={`${match.path}/page1`} component={page1} />\n<Route path={`${match.path}/page2`} component={page2} />\n</Switch>\n);\n\n```\n\nSwitch 中包含 Route，只渲染第一个匹配的路由。因此主路由匹配加上 exact 去精确匹配，不会拦截后面的匹配。\n\n5、入口文件加入路由\n\n> src/index.js\n\n```\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport { BrowserRouter as Router  } from 'react-router-dom';\n\nimport routeChildren from './router';\n\nReactDom.render(\n<Router>\n{routeChildren}\n</Router>,\ndocument.getElementById('app')\n);\n```\n\n这里我们用的是 BrowserRouter 组件，打开 BrowserRouter 文件可以看到它声明了实例属性 history 对象，history 对象的创建来自 history 包的 createBrowserHistory 方法。\n\n```\nimport { createBrowserHistory as createHistory } from \"history\";\n\n    class BrowserRouter extends React.Component {\n    \n    history = createHistory(this.props);\n    \n        render() {\n        return <Router history={this.history} children={this.props.children} />;\n    }\n}\n\n```\n\nhistory 对象上拥有许多的属性和方法，这些将在后面给我们提供很大的便利，如果你想了解更多关于 history 的访问，看[这里](https://link.juejin.cn?target=https%3A%2F%2Fmedium.com%2F%40pshrmn%2Fa-little-bit-of-history-f245306f48dd \"https://medium.com/@pshrmn/a-little-bit-of-history-f245306f48dd\")。\n\n6、修改我们的业务页面\n\n> pages/demo1/page1/index.js（同级页面类似）\n\n```\nimport React from 'react';\n\n    const Page1 = history => {\n    return (\n    <div>demo2 page1</div>\n    );\n    };\n    \n    export default Page1;\n```\n\n至此，我们的路由设计就完成了。\n\n现在，npm run start 跑起来看看~\n\n![运行结果](/images/jueJin/17185c9f2cb894c.png)\n\n项目路由基本配置结束。\n\n### 配置式菜单管理\n\n后台项目中，路由和菜单是组织起一个应用的关键骨架。设计完路由，接下来我们考虑导航菜单管理。  \n这一步，我们开始搭建框架核心能力： 菜单配置，UI 集成，状态管理，用户登陆，路由鉴权。\n\n> 导航应集成在 Layout 结构中，和业务逻辑解耦，为了不让开发者菜单耦合到业务逻辑中，这里采用配置式菜单管理，开发者只需要关心菜单配置。  \n> 为了方便理解，UI 组件库选用 Ant Design。\n\n1、 菜单配置 & UI 集成\n\n> 既然打算做配置式菜单，那么我们设计一个菜单配置，根据配置生成菜单。\n\n```\ncd src\ntouch menuConfig.js\n```\n\nmenuConfig.js\n\n```\n    const menu = [\n        {\n        path: 'demo1',\n        name: '一级菜单A',\n            children: [{\n            name: 'subnav1',\n            path: 'page1'\n            },\n                {\n                name: 'subnav2',\n                path: 'page2'\n            }]\n            },\n                {\n                path: 'demo2',\n                name: '一级菜单B'\n                    children: [{\n                    name: '测试',\n                    path: 'page2'\n                }]\n            }\n            ];\n```\n\n当然，你可以在配置中加入任意元素来丰富你的配置，比如 icon，redirect 等等；\n\n2、生成菜单配置\n\n> 接下来需要根据这份配置，构造我们的导航，看一下 Ant Design 提供的 Menu 组件需要哪些数据？ 官方给的 demo 是：\n\n```\n<Menu\ntheme=\"dark\"\nmode=\"inline\"\ndefaultSelectedKeys={['2']}>\n<Menu.Item key=\"1\">nav1</Menu.Item>\n<Menu.Item key=\"2\">nav2</Menu.Item>\n</Menu>\n\n```\n\n为了让我们的配置能很方便的生成 Menu 组件，我们需要写个方法把我们的菜单转成平铺形式。用 path 作为 key，可以很方便的解析 selectKey。  \n我们希望我们的菜单可以根据 path 选中或切换，我们需要根据 MenuConfig 构造这样一份结构：\n\n```\n    {\n    \"selectMainMenu\": {    // 当前访问一级菜单信息【用于标记一级菜单选中】\n    \"path\": \"demo1\",\n    \"name\": \"一级菜单A\"\n    },\n    \"mainMenu\": [          // 当前所有一级菜单信息【用于渲染一级导航】\n        {\n        \"path\": \"demo1\",\n        \"name\": \"一级菜单A\"\n        },\n            {\n            \"path\": \"demo2\",\n            \"name\": \"一级菜单B\"\n        }\n        ],\n        \"subMenu\": [           // 当前一级菜单下的所有子菜单【用于渲染子导航】\n            {\n            \"name\": \"subnav1\",\n            \"path\": \"page1\",\n                {\n                \"name\": \"subnav2\",\n                \"path\": \"page2\"\n            }\n            ],\n                \"paths\": [\n                    {\n                    \"name\": \"一级菜单A\",\n                    \"path\": \"/demo1\"\n                }\n                ],\n                \"prePath\": \"/demo1\"   // 一级路由+二级路由作为子菜单唯一 key【标识二级菜单状态】\n            }\n```\n\n生成的 HeadMenu 组件：\n\n```\n<Menu theme=\"dark\"\nmode=\"horizontal\"\nselectedKeys={[selectMainMenu.path]} >\n    {\n        mainMenu.map(item => {\n        <Menu.Item key={item.path}>\n        <Link to={item.path === '/' ? '/' : `/${item.path}`}>{item.name}</Link>\n        </Menu.Item>\n        })\n    }\n    </Menu>\n```\n\n生成的 SideMenu 组件：\n\n```\n<Menu theme=\"dark\"\nmode=\"horizontal\"\nselectedKeys={[currentPath]} >\n    {\n        subMenu.map(item => {\n        <Menu.Item key={`${prePath}/${item.path}`}>\n        <Link to={item.path === '/' ? '/' : `${prePath}/${item.path}`}>\n        <span>{item.name}</span>\n        </Link>\n        </Menu.Item>\n        })\n    }\n    </Menu>\n```\n\n> 这一步转换并不复杂，自行实现。主要提供根据路由 path 标记菜单状态的思路。\n\n3、Layout 集成 Menu 组件\n\n```\n    const BaseLayout = ({ location, children }) => {\n    const { pathname } = location;\n    \n    const [menuInfo, setMenuInfo] = useState({});\n    \n    // 菜单信息随着路径变化\n        useEffect(() => {\n        const newInfo = pathChange(pathname, menuConfig);\n        setMenuInfo(newInfo);\n        }, [pathname]);\n        \n        return (\n        <Layout>\n        <Header className=\"header\" >\n        <div className=\"logo\" />\n        <HeadMenu menuInfo={menuInfo}></HeadMenu>\n        </Header>\n        <Content>\n        <Layout>\n        <Sider width={200}>\n        <SideMenu menuInfo={menuInfo}></SideMenu>\n        </Sider>\n        <Content>{children}</Content>\n        </Layout>\n        </Content>\n        </Layout>\n        )\n    }\n    \n```\n\n4、将 Layout 应用于所有路由\n\n> 改造一下我们的路由入口（加上 Layout 布局结构）：\n\n```\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport BaseLayout from './layouts';\n\n// 各个一级路由\nimport demo1 from './pages/demo1';\nimport demo2 from './pages/demo2';\n\nconst router = (\n    <Route render={(props) => {\n    return (\n    <BaseLayout {...props}>\n    <Switch>\n    <Route path=\"/demo1\" component={demo1}></Route>\n    <Route path=\"/demo2\" component={demo2}></Route>\n    </Switch>\n    </BaseLayout>\n    )\n    }}></Route>\n    );\n    \n    export default router;\n```\n\n我们的配置式菜单就完成了，它看起来是这样的：\n\n![菜单](/images/jueJin/17185c9f335fcda.png)\n\n#### 路由鉴权\n\ntoB 项目最大不同于 toC 的逻辑就在于权限控制，这也几乎是后台框架集成最复杂的部分。\n\n在一个大型系统中，一个误操作产生的后果可能是非常严重的，权限管理是不可或缺的一个环节。\n\n权限系统的存在最大程度上避免了这类问题 — 只要是界面上出现的功能，都是可以操作或不会产生严重后果的。 每个帐号登陆后只能看到和自己有关的信息，可以更快速地理解自己工作范围内的业务。\n\n##### _后台权限的基本构成_\n\n权限设计主要由三个要素构成：帐号，角色，权限。\n\n```\n- 帐号：登录系统的唯一身份识别，一个账号代表一个用户；\n\n- 角色：为账号批量分配权限。在一个系统中，不可能为每个帐号订制权限，所以给同一类帐号赋予一个“角色”，以达到批量分配权限的目的；\n\n- 权限：对于前端来说，权限又分为页面权限和操作权限；其中页面权限分为菜单权限和路由权限；\n```\n\n设计基本思路为：\n\n![](/images/jueJin/17185c9f2c918f3.png)\n\n1、登陆实现\n\nlogin.js\n\n```\nimport { connect } from 'react-redux';\n\n    const Login = ({\n    loginStatus,\n    location,\n    setLoginInfo,\n    history\n        }) => {\n        let { redirectUrl = '/' } = location.state || {};\n        \n        // 获取登录信息伪代码\n            const onFinish = values => {\n            /**** 此处去获取登录信息并存放在全局 Store ****/\n                setLoginInfo({\n                username: '小A',\n                role: 1\n                });\n                history.push(redirectUrl);\n                };\n                \n                return (\n                <div className=\"login layer\">\n                <Form\n                name=\"basic\"\n                onFinish={onFinish} >\n                <Form.Item\n                label=\"用户名\"\n                name=\"username\"\n                rules={[{ required: true, message: '输入用户名' }]} >\n                <Input />\n                </Form.Item>\n                <Form.Item\n                label=\"密码\"\n                name=\"password\"\n                rules={[{ required: true, message: '输入密码' }]} >\n                <Input.Password />\n                </Form.Item>\n                <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">登陆</Button>\n                </Form.Item>\n                </Form>\n                </div>\n                );\n                };\n                \n                    const mapStateToProps = state => ({\n                    loginStatus: state.login.loginStatus\n                    });\n                    \n                        const mapDispatchToProps = dispatch => ({\n                        setLoginInfo: (...args) => dispatch(setLoginInfo(...args))\n                        });\n                        \n                        export default connect(\n                        mapStateToProps,\n                        mapDispatchToProps\n                        )(Login);\n```\n\nconnect() 的作用是将 Store 和 Component 连接起来。connect负责从 Redux state 树中读取部分数据，并通过 Props 来把这些数据提供给要渲染的组件。也传递 action 函数到 Props。  \nconnect 函数接收两个参数，一个 mapStateToProps，把 Redux 的 state，转为组件的 Props；还有一个参数是 mapDispatchToprops, 把发射 actions 的方法，转为 Props 属性函数。\n\n2、用户状态管理  \nstore/login.js存储\n\n```\n// 设置state初始值\n    const initState = {\n    loginStatus: false,\n        userInfo: {\n        username: '',\n        role: -1  // 用户权限标识\n    }\n    };\n    \n    const SET_LOGIN = 'SET_LOGIN';\n    \n    // action\n        export const setLoginInfo = (payload) => {\n            return {\n            payload,\n            type: SET_LOGIN\n            };\n            };\n            \n            // reducer\n                export const loginReducer = (state = initState, action) => {\n                    switch (action.type) {\n                    case SET_LOGIN:\n                        return {\n                        ...state,\n                        loginStatus: true,\n                        userInfo: action.payload\n                        };\n                        default:\n                        return state;\n                    }\n                    };\n```\n\nstore/index.js\n\n```\nimport { createStore, combineReducers } from 'redux';\nimport { loginReducer } from './login';\n\n    const allReducers = {\n    login: loginReducer\n    };\n    \n    const reducers = combineReducers(allReducers);\n    \n    const store = createStore(reducers);\n    \n    export default store;\n```\n\n入口 index.js 增加 Provider 下发 Store\n\n```\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux';\nimport routeChildren from './router';\n\nReactDom.render(\n<Provider store={store}>\n<Router>\n{routeChildren}\n</Router>\n</Provider>,\ndocument.getElementById('app')\n);\n```\n\nProvider 的作用是让 Store 在整个 App 中可用。\n\n3、登陆校验\n\n> 我们需要在所有页面访问之前，校验用户登录状态，以免发生重复登陆； 我们的 Layout 管理着所有页面入口，需要改造 layout.js\n\nlayout.js 增加如下逻辑：\n\n```\nconst loginPath = '/login';\nconst { pathname } = location;\nconst redirectUrl = pathname === loginPath ? '/' : pathname;\n\n    useEffect(() => {\n    <!--校验是否登陆-->\n        if (loginStatus) {\n        history.push(redirectUrl);\n            } else {\n                history.push('/login', {\n                redirectUrl\n                });\n            }\n            }, []);\n            \n                if (pathname === '/login') {\n                return <div>{children}</div>;\n            }\n```\n\n这一步需要把当前页面作为 redirectUrl 带到登陆页，登陆后需返回原路径。\n\n为了看演示效果，我们需要稍微调整我们的样式，样式效果自行添加。\n\n![登陆拦截](/images/jueJin/17185c9f36c3e98.png)\n\n3、用户鉴权\n\n> 后台系统鉴权是个复杂且差异化很大的话题，本文只做抛砖引玉，为了方便理解思路，只介绍一种简单的权限方案。\n\n我们设定，权限标识越小，拥有的权限越高，逐级之间为包含关系。  \n构造权限思路如下：\n\n![](/images/jueJin/17185c9f2d243cc.png)\n\n根据这份权限方案，menuConfig.js 需要增加权限标识：\n\n```\n    const menu = [\n        {\n        path: 'demo1',\n        name: '一级菜单A',\n        role: [4],   // demo1 权限标识\n            children: [{\n            name: 'subnav1',\n            path: 'page1',\n            role: [2]     // demo1/page1 权限标识\n            },\n                {\n                name: 'subnav2',\n                path: 'page2',\n                role: [2]    // demo1/page2 权限标识\n                },\n                    {\n                    name: 'subnav3',\n                    path: 'page3',\n                    role: [3]     // demo1/page3 权限标识\n                    },\n                        {\n                        name: 'subnav4',\n                        path: 'page4',\n                        role: [4]      // demo1/page4 权限标识\n                    }]\n                    },\n                        {\n                        path: 'demo2',\n                        name: '一级菜单B',\n                        role: [4],          // demo2 权限标识\n                            children: [{\n                            name: '测试',\n                            path: 'page2',\n                            role: [3]       // demo1/page2 权限标识\n                        }]\n                    }\n                    ];\n```\n\nlayout.js增加鉴权拦截，其余逻辑不变：\n\n```\nlet authChildren = children;\nconst { role = -1 } = userInfo;\nconst [menuInfo, setMenuInfo] = useState({});\n\n// 用户角色配置，预留\nconst filterMenu = menus => menus\n.filter(item => (role !== -1 && item.role >= role))\n    .map((item) => {\n        if (item.children && item.children.length > 0) {\n        return { ...item, children: filterMenu(item.children) };\n    }\n    return item;\n    });\n    \n        useEffect(() => {\n        // 过滤菜单权限\n        const newMenuInfo = filterMenu(menuConfig);\n        \n        const curMenuInfo = onPathChange(pathname, newMenuInfo);\n        setMenuInfo(curMenuInfo);\n        }, [pathname]);\n        \n        // 过滤路由权限\n        const curPathAuth = menuInfo.paths\n        ? menuInfo.paths.find(item => item.path === pathname) : {};\n        \n        // 路由权限拦截\n            if (JSON.stringify(curPathAuth) === '{}') {\n            authChildren = (\n            <div className=\"n-privileges\">\n            <p>对不起你没有访问该页面的权限</p>\n            </div>\n            );\n        }\n```\n\n为了演示权限效果，我们增加用户权限切换。\n\n![](/images/jueJin/17185c9f654dc6e.png)\n\n框架结构基本形成。\n\n后续\n--\n\n当然，系统还需更多细节的完善，我们仅仅完成了核心流程。  \n多人合作的系统发展到后期的时候，我们需要考虑性能问题、跨域配置、数据 mock、eslint 等等。不属于核心流程的内容，在这里仅作讨论。\n\n1、按需加载  \n单页应用的首屏渲染一直都是个大问题。优化资源加载，我们可以参考 React 16.3.0 新增的 Suspense 和 lazy 特性。  \nReact.lazy 提供了按需加载组件的方法，并且方法内部必须用到 import() 语法导入组件，配合 webpack 特性：遇到 import...from 语法会将依赖的包，合并到 bundle.js 中。可以如此实现：\n\n```\nconst page1 = React.lazy(() => import(/* webpackChunkName: \"page1\" */'./page1'));\n```\n\n即可将 page1 打包为名为 page1.js 的文件。  \n配合 React.Suspense 可以很方便的实现懒加载过渡动画。\n\n2、通用 NotFound  \n我们的路由设计使得我们能很方便的处理 Not Found 的情况。  \n在每一级 Switch 最后加上 path=\"\\*\" 可以拦截所有未匹配路由。\n\n```\n<Switch>\n<Route path={`${match.path}`} exact component={Home} />\n<Route path={`${match.path}/page1`} component={page1} />\n<Route path={`${match.path}/page2`} component={page2} />\n<Route path=\"*\" component={NotFound} />\n</Switch>\n```\n\n3、跨域配置  \n当我们本地开发做服务代理的时候，一般会选择在 dev\\_server 处进行代理。\n\n```\n    devServer: {\n        proxy: {\n            '/api': {\n            target: 'http://www.baidu.com/',\n            changeOrigin: true,\n            secure: false,\n            },\n                '/api2': {\n                .....\n            }\n        }\n    }\n```\n\n但这种方法在 create-react-app 生成的应用中无效，对于这种情况，create-react-app 的版本在低于 2.0 的时候可以在 package.json 增加 proxy 配置， 配置如下：\n\n```\n    \"proxy\": {\n        '/api': {\n        target: 'http://www.baidu.com/',\n        changeOrigin: true,\n        secure: false,\n        },\n    }\n```\n\ncreate-react-app 的版本高于 2.0 版本的时候在 package.json 只能配置 string 类型，可以考虑用 http-proxy-middleware 代替。\n\nsrc/setupProxy.js\n\n```\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\n    module.exports = function(app) {\n    app.use(\n    '/api',\n        createProxyMiddleware({\n        target: 'http://localhost:5000',\n        changeOrigin: true,\n        })\n        );\n        };\n```\n\n当然，你可以也执行 npm run eject 命令，暴露 webpack 等配置，去修改 devServer。\n\n4、数据 mock 能力  \n项目开发中，前端工程师需要依赖后端工程师的数据接口以及后端联调环境。但是其实我们也可以根据后端接口文档在接口没有开发完成之前自己 mock 数据进行调试，让接口消费者脱离接口生产者进行开发。\n\nmock 数据常见的解决方案有：\n\n*   在代码层硬编码\n*   在前端JS中拦截\n*   代理软件 (Fiddler、Charles)\n*   mock server\n\n这些方案要么对代码有侵入性，要么数据无法溯源，要么成本较高。  \n云音乐已开源一款 mock 平台，能帮助开发者管理接口。欢迎入坑：[NEI](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fx-orpheus%2Fnei \"https://github.com/x-orpheus/nei\")\n\n本文仅以个人经验产出，如对本文有任何意见和建议，欢迎讨论。\n\n> 本文发布自 [网易云音乐前端团队](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fx-orpheus \"https://github.com/x-orpheus\")，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 [加入我们](mailto:grp.music-fe@corp.netease.com \"mailto:grp.music-fe@corp.netease.com\")！",
	"selfDefined": "likes:145,comments:9,collects:172,likes:9912"
}