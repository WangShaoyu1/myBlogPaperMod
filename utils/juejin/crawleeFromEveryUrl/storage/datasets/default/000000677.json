{
	"title": "LOOK 直播活动地图生成器方案",
	"author": "网易云音乐技术团队",
	"publishTime": "2021-12-14",
	"readTime": "阅读4分钟",
	"tags": "[\"前端\",\"程序员中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "在最近的活动开发中，笔者完成了一款大富翁的游戏。在整个地图中，有很多的组成路径的方格以及作为房产的方格，如果一个个手动去调整位置，工作量是很大的。介绍一个方案能够帮助我们快速确定方格在地图中的位置。",
	"article": "> 本文作者：李一笑\n\n对于前端而言，与视觉稿打交道是必不可少的，因为我们需要对照着视觉稿来确定元素的位置、大小等信息。如果是比较简单的页面，手动调整每个元素所带来的工作量尚且可以接受；然而当视觉稿中素材数量较大时，手动调整每个元素便不再是个可以接受的策略了。\n\n在最近的活动开发中，笔者就刚好碰到了这个问题。这次活动开发需要完成一款大富翁游戏，而作为一款大富翁游戏，地图自然是必不可少的。在整个地图中，有很多的不同种类的方格，如果一个个手动去调整位置，工作量是很大的。那么有没有一种方案能够帮助我们快速确定方格的位置和种类呢？下面便是笔者所采用的方法。\n\n方案简述\n====\n\n位点图\n---\n\n首先，我们需要视觉同学提供一张特殊的图片，称之为位点图。\n\n这张图片要满足以下几个要求：\n\n1.  在每个方格左上角的位置，放置一个 1px 的像素点，不同类型的方格用不同颜色表示。\n2.  底色为纯色：便于区分背景和方格。\n3.  大小和地图背景图大小一致：便于从图中读出的坐标可以直接使用。\n\n![bitmap](/images/jueJin/98e463a2330058e.png)\n\n上图为一个示例，在每个路径方格左上角的位置都有一个 1px 的像素点。为了看起来明显一点，这里用红色的圆点来表示。在实际情况中，不同的点由于方格种类不同，颜色也是不同的。\n\n![bitmap2](/images/jueJin/43f1a0ac8935fc0.png)\n\n上图中用黑色边框标出了素材图的轮廓。可以看到，红色圆点和每个路径方格是一一对应的关系。\n\n读取位点图\n-----\n\n在上面的位点图中，所有方格的位置和种类信息都被标注了出来。我们接下来要做的，便是将这些信息读取出来，并生成一份 json 文件来供我们后续使用。\n\n```jsx\nconst JImp = require('jimp');\nconst nodepath = require('path');\n\n    function parseImg(filename) {\n        JImp.read(filename, (err, image) => {\n        const { width, height } = image.bitmap;\n        \n        const result = [];\n        \n        // 图片左上角像素点的颜色, 也就是背景图的颜色\n        const mask = image.getPixelColor(0, 0);\n        \n        // 筛选出非 mask 位置点\n            for (let y = 0; y < height; ++y) {\n                for (let x = 0; x < width; ++x) {\n                const color = image.getPixelColor(x, y);\n                    if (mask !== color) {\n                        result.push({\n                        // x y 坐标\n                        x,\n                        y,\n                        // 方格种类\n                        type: color.toString(16).slice(0, -2),\n                        });\n                    }\n                }\n            }\n            \n            // 输出\n                console.log(JSON.stringify({\n                // 路径\n                path: result,\n                }));\n                });\n            }\n            \n            parseImg('bitmap.png');\n```\n\n在这里我们使用了 `jimp` 用于图像处理，通过它我们能够去扫描这张图片中每个像素点的颜色和位置。\n\n至此我们得到了包含所有方格位置和种类信息的 json 文件：\n\n```json\n    {\n        \"path\": [\n            {\n            \"type\": \"\",\n            \"x\": 0,\n            \"y\": 0,\n            },\n            // ...\n            ],\n        }\n```\n\n其中，x y 为方格左上角的坐标；type 为方格种类，值为颜色值，代表不同种类的地图方格。\n\n通路连通算法\n------\n\n对于我们的项目而言，只确定路径点是不够的，还需要将这些点连接成一个完整的通路。为此，我们需要找到一条由这些点构成的最短连接路径。\n\n代码如下：\n\n```jsx\n    function takePath(point, points) {\n        const candidate = (() => {\n        // 按照距离从小到大排序\n        const pp = [...points].filter((i) => i !== point);\n        const [one, two] = pp.sort((a, b) => measureLen(point, a) - measureLen(point, b));\n        \n            if (!one) {\n            return [];\n        }\n        \n        // 如果两个距离 比较小，则穷举两个路线，选择最短连通图路径。\n            if (two && measureLen(one, two) < 20000) {\n            return [one, two];\n        }\n        return [one];\n        })();\n        \n        let min = Infinity;\n        let minPath = [];\n            for (let i = 0; i < candidate.length; ++i) {\n            // 递归找出最小路径\n            const subpath = takePath(candidate[i], removeItem(points, candidate[i]));\n            \n            const path = [].concat(point, subpath);\n            // 测量路径总长度\n            const distance = measurePathDistance(path);\n            \n                if (distance < min) {\n                min = distance;\n                minPath = subpath;\n            }\n        }\n        \n        return [].concat(point, minPath);\n    }\n```\n\n到这里，我们已经完成了所有的准备工作，可以开始绘制地图了。在绘制地图时，我们只需要先读取 json 文件，再根据 json 文件内的坐标信息和种类信息来放置对应素材即可。\n\n方案优化\n====\n\n上述方案能够解决我们的问题，但仍有一些不太方便的地方：\n\n1.  只有 1px 的像素点太小了，肉眼无法辨别。不管是视觉同学还是开发同学，如果点错了位置就很难排查。\n2.  位点图中包含的信息还是太少了，颜色仅仅对应种类，我们希望能够包含更多的信息，比如点之间的排列顺序、方格的大小等。\n\n像素点合并\n-----\n\n对于第一个问题，我们可以让视觉同学在画图的时候，将 1px 的像素点扩大成一个肉眼足够辨识的区域。**需要注意两个区域之间不要有重叠。**\n\n![bitmap3](/images/jueJin/0abfc03451a7aac.png)\n\n这时候就要求我们对代码做一些调整。在之前的代码中，当我们扫描到某个颜色与背景色不同的点时，会直接记录其坐标和颜色信息；现在当我们扫描到某个颜色与背景色不同的点时，还需要进行一次区域合并，将所有相邻且相同颜色的点都纳入进来。\n\n区域合并的思路借鉴了下图像处理的区域生长算法。区域生长算法的思路是以一个像素点为起点，将该点周围符合条件的点纳入进来，之后再以新纳入的点为起点，向新起点相邻的点扩张，直到所有符合条件条件的点都被纳入进来。这样就完成了一次区域合并。不断重复该过程，直到整个图像中所有的点都被扫描完毕。\n\n我们的思路和区域生长算法非常类似：\n\n1.  依次扫描图像中的像素点，当扫描到颜色与背景色不同的点时，记录下该点的坐标和颜色。\n    \n    ![步骤1.png](/images/jueJin/b6e53e04dbff485.png)\n    \n2.  之后扫描与该点相邻的 8 个点，将这些点打上”已扫描“的标记。筛选出其中颜色与背景色不同且尚未被扫描过的点，放入待扫描的队列中。\n    \n    ![步骤2.png](/images/jueJin/cce4aa97d07c881.png)\n    \n3.  从待扫描队列中取出下一个需要扫描的点，重复步骤 1 和步骤 2。\n    \n4.  直到待扫描的队列为空时，我们就扫描完了一整个有颜色的区域。区域合并完毕。\n    \n    ![步骤3.png](/images/jueJin/2137e14930e5679.png)\n    \n\n```jsx\nconst JImp = require('jimp');\n\nlet image = null;\nlet maskColor = null;\n\n// 判断两个颜色是否为相同颜色 -> 为了处理图像颜色有误差的情况, 不采用相等来判断\nconst isDifferentColor = (color1, color2) => Math.abs(color1 - color2) > 0xf000ff;\n\n// 判断是(x,y)是否超出边界\nconst isWithinImage = ({ x, y }) => x >= 0 && x < image.width && y >= 0 && y < image.height;\n\n// 选择数量最多的颜色\nconst selectMostColor = (dotColors) => { /* ... */ };\n\n// 选取左上角的坐标\nconst selectTopLeftDot = (reginDots) => { /* ... */ };\n\n// 区域合并\n    const reginMerge = ({ x, y }) => {\n    const color = image.getPixelColor(x, y);\n    // 扫描过的点\n    const reginDots = [{ x, y, color }];\n    // 所有扫描过的点的颜色 -> 扫描完成后, 选择最多的色值作为这一区域的颜色\n    const dotColors = {};\n    dotColors[color] = 1;\n    \n        for (let i = 0; i < reginDots.length; i++) {\n        const { x, y, color } = reginDots[i];\n        \n        // 朝临近的八个个方向生长\n            const seeds = (() => {\n            const candinates = [/* 左、右、上、下、左上、左下、右上、右下 */];\n            \n            return candinates\n            // 去除超出边界的点\n            .filter(isWithinImage)\n            // 获取每个点的颜色\n            .map(({ x, y }) => ({ x, y, color: image.getPixelColor(x, y) }))\n            // 去除和背景色颜色相近的点\n            .filter((item) => isDifferentColor(item.color, maskColor));\n            })();\n            \n                for (const seed of seeds) {\n                const { x: seedX, y: seedY, color: seedColor } = seed;\n                \n                // 将这些点添加到 reginDots, 作为下次扫描的边界\n                reginDots.push(seed);\n                \n                // 将该点设置为背景色, 避免重复扫描\n                image.setPixelColor(maskColor, seedX, seedY);\n                \n                // 该点颜色为没有扫描到的新颜色, 将颜色增加到 dotColors 中\n                    if (dotColors[seedColor]) {\n                    dotColors[seedColor] += 1;\n                        } else {\n                        // 颜色为旧颜色, 增加颜色的 count 值\n                        dotColors[seedColor] = 1;\n                    }\n                }\n            }\n            \n            // 扫描完成后, 选择数量最多的色值作为区域的颜色\n            const targetColor = selectMostColor(dotColors);\n            \n            // 选择最左上角的坐标作为当前区域的坐标\n            const topLeftDot = selectTopLeftDot(reginDots);\n            \n                return {\n                ...topLeftDot,\n                color: targetColor,\n                };\n                };\n                \n                    const parseBitmap = (filename) => {\n                        JImp.read(filename, (err, img) => {\n                        const result = [];\n                        const { width, height } = image.bitmap;\n                        // 背景颜色\n                        maskColor = image.getPixelColor(0, 0);\n                        image = img;\n                        \n                            for (let y = 0; y < height; ++y) {\n                                for (let x = 0; x < width; ++x) {\n                                const color = image.getPixelColor(x, y);\n                                \n                                // 颜色不相近\n                                    if (isDifferentColor(color, maskColor)) {\n                                    // 开启种子生长程序, 依次扫描所有临近的色块\n                                    result.push(reginMerge({ x, y }));\n                                }\n                            }\n                        }\n                        });\n                        };\n```\n\n颜色包含额外信息\n--------\n\n在之前的方案中，我们都是使用颜色值来表示种类，但实际上颜色值所能包含的信息还有很多。\n\n一个颜色值可以用 rgba 来表示，因此我们可以让 r、g、b、a 分别代表不同的信息，如 r 代表种类、g 代表宽度、b 代表高度、a 代表顺序。虽然 rgba 每个的数量都有限（r、g、b 的范围为 0-255，a 的范围为 0-99），但基本足够我们使用了。\n\n![rgba.png](/images/jueJin/fef26a061fdf34f.png)\n\n当然，你甚至可以再进一步，让每个数字都表示一种信息，不过这样每种信息的范围就比较小，只有 0-9。\n\n总结\n==\n\n对于素材量较少的场景，前端可以直接从视觉稿中确认素材信息；当素材量很多时，直接从视觉稿中确认素材信息的工作量就变得非常大，因此我们使用了位点图来辅助我们获取素材信息。\n\n![无标题-2021-09-28-1450.png](/images/jueJin/a35430850a7548e.png)\n\n地图就是这样一种典型的场景，在上面的例子中，我们已经通过从位点图中读出的信息成功绘制了地图。我们的步骤如下：\n\n1.  视觉同学提供位点图，作为承载信息的载体，它需要满足以下三个要求：\n    1.  大小和地图背景图大小一致：便于我们从图中读出的坐标可以直接使用。\n    2.  底色为纯色：便于区分背景和方格。\n    3.  在每个方格左上角的位置，放置一个方格，不同颜色的方格表示不同类型。\n2.  通过 `jimp` 扫描图片上每个像素点的颜色，从而生成一份包含各个方格位置和种类的 json。\n3.  绘制地图时，先读取 json 文件，再根据 json 文件内的坐标信息和种类信息来放置素材。\n\n![gif.gif](/images/jueJin/2dddd96f14fd810.png)\n\n上述方案并非完美无缺的，在这里我们主要对于位点图进行了改进，改进方案分为两方面：\n\n1.  由于 1px 的像素点对肉眼来说过小，视觉同学画图以及我们调试的时候，都十分不方便。因此我们将像素点扩大为一个区域，在扫描时，对相邻的相同颜色的像素点进行合并。\n2.  让颜色的 rgba 分别对应一种信息，扩充位点图中的颜色值能够给我们提供的信息。\n\n我们在这里只着重讲解了获取地图信息的部分，至于如何绘制地图则不在本篇的叙述范围之内。在我的项目中使用了 pixi.js 作为引擎来渲染，完整项目可以参考[这里](https://link.juejin.cn?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fempty-cherry-lqdzn%3Ffile%3D%2Fscripts%2Fbitmap.js \"https://codesandbox.io/s/empty-cherry-lqdzn?file=/scripts/bitmap.js\")，在此不做赘述。\n\nFAQ\n===\n\n*   在位点图上，直接使用颜色块的大小作为路径方格的宽高可以不？\n    \n    当然可以。但这种情况是有局限性的，当我们的素材很多且彼此重叠的时候，如果依然用方块大小作为宽高，那么在位点图上的方块就会彼此重叠，影响我们读取位置信息。\n    \n*   如何处理有损图的情况？\n    \n    有损图中，图形边缘处的颜色和中心的颜色会略微有所差异。因此需要增加一个判断函数，只有扫描到的点的颜色与背景色的差值大于某个数字后，才认为是不同颜色的点，并开始区域合并。同时要注意在位点图中方块的颜色尽量选取与背景色色值相差较大的颜色。\n    \n    这个判断函数，就是我们上面代码中的 isDifferentColor 函数。\n    \n    ```jsx\n    const isDifferentColor = (color1, color2) => Math.abs(color1 - color2) > 0xf000ff;\n    ```\n*   判断两个颜色不相等的 `0xf000ff` 是怎么来的？\n    \n    随便定的。这个和图片里包含颜色有关系，如果你的背景色和图片上点的颜色非常相近的话，这个值就需要小一点；如果背景色和图上点的颜色相差比较大，这个值就可以大一点。\n    \n\n参考资料\n====\n\n*   [zhuanlan.zhihu.com/p/89488964](https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F89488964 \"https://zhuanlan.zhihu.com/p/89488964\")\n*   [codeantenna.com/a/B5fEty3ui…](https://link.juejin.cn?target=https%3A%2F%2Fcodeantenna.com%2Fa%2FB5fEty3uiP \"https://codeantenna.com/a/B5fEty3uiP\")",
	"selfDefined": "likes:39,comments:5,collects:32,likes:3672"
}