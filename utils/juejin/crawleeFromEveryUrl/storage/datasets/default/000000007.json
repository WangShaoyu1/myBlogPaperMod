{
	"title": "死锁是什么面试中是不是也曾听说",
	"author": "Gaby",
	"publishTime": "2021-08-15",
	"readTime": "阅读5分钟",
	"tags": "[\"前端\",\"面试中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "死锁是什么，以及在并发程序中如何避免死锁一直是面试官偏爱的一个问题。 本文尽量以最简洁的示例来帮助你快速理解，掌握死锁发生的原由。",
	"article": "**这是我参与8月更文挑战的第13天，活动详情查看：[8月更文挑战](https://juejin.cn/post/6987962113788493831 \"https://juejin.cn/post/6987962113788493831\")**\n\n* * *\n\n死锁是什么\n-----\n\n死锁是什么，以及在并发程序中如何避免死锁一直是面试官偏爱的一个问题。  \n本文尽量以最简洁的示例来帮助你快速理解，掌握死锁发生的原因及其解决方法。在阅读接下来的内容之前，你必须具备java中独占锁与线程之间通信的基本知识。\n\n**死锁**  \n当线程A持有独占锁a，并尝试去获取独占锁b的同时，线程B持有独占锁b，并尝试获取独占锁a的情况下，就会发生AB两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。\n\n下面用一个非常简单的死锁示例来帮助你理解死锁的定义。\n\n```js\n    public class DeadLockDemo {\n    \n        public static void main(String[] args) {\n        // 线程a\n            Thread td1 = new Thread(new Runnable() {\n                public void run() {\n                DeadLockDemo.method1();\n            }\n            });\n            // 线程b\n                Thread td2 = new Thread(new Runnable() {\n                    public void run() {\n                    DeadLockDemo.method2();\n                }\n                });\n                \n                td1.start();\n                td2.start();\n            }\n            \n                public static void method1() {\n                    synchronized (String.class) {\n                        try {\n                        Thread.sleep(2000);\n                            } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        System.out.println(\"线程a尝试获取integer.class\");\n                            synchronized (Integer.class) {\n                            \n                        }\n                        \n                    }\n                }\n                \n                    public static void method2() {\n                        synchronized (Integer.class) {\n                            try {\n                            Thread.sleep(2000);\n                                } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                            System.out.println(\"线程b尝试获取String.class\");\n                                synchronized (String.class) {\n                                \n                            }\n                            \n                        }\n                    }\n                    \n                }\n                \n                //----------------\n                //线程b尝试获取String.class\n                //线程a尝试获取integer.class\n                //....\n                //...\n                //..\n                //.\n                //无限阻塞下去\n```\n\n如何避免死锁？\n-------\n\n教科书般的回答应该是，结合“哲学家就餐[\\[1\\]](#fn1 \"#fn1\")”模型，分析并总结出以下死锁的原因，最后得出“避免死锁就是破坏造成死锁的，若干条件中的任意一个”的结论。\n\n造成死锁必须达成的4个条件（原因）：\n\n1.  互斥条件：一个资源每次只能被一个线程使用。\n2.  请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。\n3.  不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺。\n4.  循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。\n\n但是，“哲学家就餐”光看名字就很讨厌，然后以上这4个条件看起来也很绕口，再加上笔者又是个懒人，所以要让我在面试时把这些“背诵”出来实在是太难了！必须要想办法把这4个条件简化一下！  \n于是，通过对4个造成死锁的条件进行逐条分析，我们可以得出以下4个结论。\n\n1.  互斥条件 ---> 独占锁的特点之一。\n2.  请求与保持条件 ---> 独占锁的特点之一，尝试获取锁时并不会释放已经持有的锁\n3.  不剥夺条件 ---> 独占锁的特点之一。\n4.  循环等待条件 ---> 唯一需要记忆的造成死锁的条件。\n\n不错！复杂的死锁条件经过简化，现在需要记忆的仅只有独占锁与第四个条件而已。\n\n所以，面对如何避免死锁这个问题，我们只需要这样回答！  \n: 在并发程序中，避免了逻辑中出现复数个线程互相持有对方线程所需要的独占锁的的情况，就可以避免死锁。\n\n下面我们通过“破坏”第四个死锁条件，来解决第一个小节中的死锁示例并证明我们的结论。\n\n\\*\\*\n\n在上面的例子中，由于已经不存在线程a持有线程b需要的锁，而线程b持有线程a需要的锁的逻辑了，所以Demo顺利执行完毕。\n\n```js\n    public class DeadLockDemo2 {\n    \n        public static void main(String[] args) {\n        // 线程a\n            Thread td1 = new Thread(new Runnable() {\n                public void run() {\n                DeadLockDemo2.method1();\n            }\n            });\n            // 线程b\n                Thread td2 = new Thread(new Runnable() {\n                    public void run() {\n                    DeadLockDemo2.method2();\n                }\n                });\n                \n                td1.start();\n                td2.start();\n            }\n            \n                public static void method1() {\n                    synchronized (String.class) {\n                        try {\n                        Thread.sleep(2000);\n                            } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        System.out.println(\"线程a尝试获取integer.class\");\n                            synchronized (Integer.class) {\n                            System.out.println(\"线程a获取到integer.class\");\n                        }\n                        \n                    }\n                }\n                \n                    public static void method2() {\n                    // 不再获取线程a需要的Integer.class锁。\n                        synchronized (String.class) {\n                            try {\n                            Thread.sleep(2000);\n                                } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                            System.out.println(\"线程b尝试获取Integer.class\");\n                                synchronized (Integer.class) {\n                                System.out.println(\"线程b获取到Integer.class\");\n                            }\n                            \n                        }\n                    }\n                    \n                }\n                /*\n                -----------------\n                线程a尝试获取integer.class\n                线程a获取到integer.class\n                线程b尝试获取Integer.class\n                线程b获取到Integer.class\n                \n                */\n```\n\n总结\n--\n\n是否能够简单明了的在面试中阐述清楚死锁产生的原因，并给出解决死锁的方案，可以体现程序员在面对对并发问题时思路是否清晰，对并发的基础掌握是否牢固等等。  \n而且在实际项目中并发模块的逻辑往往比本文的示例复杂许多，所以写并发应用之前一定要充分理解本文所总结的要点，并切记，并发程序编程在不显著影响程序性能的情况下，一定要尽可能的保守。\n\n* * *\n\n**如果这篇文章帮到了你，记得点赞👍收藏加关注哦😊，希望点赞多多多多...**\n\n**文中如有错误，欢迎在评论区指正**\n\n* * *\n\n往期文章\n====\n\n*   [前端面试☞HTTP及网络专题](https://juejin.cn/post/6995404801848639501 \"https://juejin.cn/post/6995404801848639501\")\n*   [2021年前端面试知识点大厂必备](https://juejin.cn/post/6989800620437798919 \"https://juejin.cn/post/6989800620437798919\")\n*   [7月前端高频面试题](https://juejin.cn/post/6992222084382326798 \"https://juejin.cn/post/6992222084382326798\")\n*   [浏览器的工作原理](https://juejin.cn/post/6992597760935460901 \"https://juejin.cn/post/6992597760935460901\")\n*   [深度剖析TCP与UDP的区别](https://juejin.cn/post/6992743999756845087 \"https://juejin.cn/post/6992743999756845087\")\n*   [彻底理解浏览器的缓存机制](https://juejin.cn/post/6992843117963509791 \"https://juejin.cn/post/6992843117963509791\")\n*   [JavaScript是如何影响DOM树构建的](https://juejin.cn/post/6992887065050349605 \"https://juejin.cn/post/6992887065050349605\")\n*   [JavaScript 事件模型](https://juejin.cn/post/6992978598441254925 \"https://juejin.cn/post/6992978598441254925\")\n*   [深入了解现代 Web 浏览器](https://juejin.cn/post/6993095345576083486 \"https://juejin.cn/post/6993095345576083486\")\n*   [在Linux阿里云服务器上部署Nextjs项目](https://juejin.cn/post/6993205190471974925 \"https://juejin.cn/post/6993205190471974925\")\n*   [Snowpack - 更快的前端构建工具](https://juejin.cn/post/6993209659297366024 \"https://juejin.cn/post/6993209659297366024\")\n*   [深入了解 JavaScript 内存泄露](https://juejin.cn/post/6993614323176177695 \"https://juejin.cn/post/6993614323176177695\")\n*   [细说前端路由的hash模式和 history模式](https://juejin.cn/post/6993897542970769421 \"https://juejin.cn/post/6993897542970769421\")\n*   [CSS样式之BFC和IFC的用法](https://juejin.cn/post/6993902300091645965 \"https://juejin.cn/post/6993902300091645965\")\n*   [CSS性能优化](https://juejin.cn/post/6994059570469404686 \"https://juejin.cn/post/6994059570469404686\")\n*   [快速写一个让自己及面试官满意的原型链](https://juejin.cn/post/6994295598958510111 \"https://juejin.cn/post/6994295598958510111\")\n*   [细说JS模块化规范（CommonJS、AMD、CMD、ES6 Module）](https://juejin.cn/post/6994814324548091940 \"https://juejin.cn/post/6994814324548091940\")\n*   [webpack工作原理及loader和plugin的区别](https://juejin.cn/post/6995073296517562376 \"https://juejin.cn/post/6995073296517562376\")\n*   [解读 HTTP1/HTTP2/HTTP3](https://juejin.cn/post/6995109407545622542 \"https://juejin.cn/post/6995109407545622542\")",
	"selfDefined": "likes:3,comments:0,collects:2,likes:758"
}