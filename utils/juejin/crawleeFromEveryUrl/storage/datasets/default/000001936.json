{
	"title": "记一次HEX和RGB互换算法的思考及应用",
	"author": "徐小夕",
	"publishTime": "2020-08-19",
	"readTime": "阅读4分钟",
	"tags": "[\"JavaScript\",\"算法中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "由于笔者最近在开发可视化平台,所以对动态编辑器这块做了一段时间的研究, 发现其中有个小模块的知识点比较有意思,所以在这里分享一下. 所以笔者在这里就分享一下HEX与RGB之间相互转换的原理和算法, 并且实现随机生成HEX值和随机生成RGB值的函数,最后带着大家深度理解和掌握颜色…",
	"article": "由于笔者最近在开发可视化平台,所以对动态编辑器这块做了一段时间的研究, 发现其中有个小模块的知识点比较有意思,所以在这里分享一下.\n\n作为**前端工程师**, 我们平时在对接设计稿的时候, 是不是经常会涉及到颜色值的转换呢? 比如从**HEX**值转化到**RGB**值, 亦或者是从**RGB**值转换到**HEX**值, 这块在**PhotoShop**等设计软件中非常常见, 在做类似于画板, 设计类的IDE的时候也经常会用到它们的互相转换, 还有一种场景是,为了满足老板对高大上特效的要求, 我们要让动画在不同的时间显示不同的颜色,而且有过渡效果(过渡效果虽然可以通过**transiton**来实现),如下:\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n所以笔者在这里就分享一下**HEX**与**RGB**之间相互转换的原理和算法, 并且实现**随机生成HEX值**和**随机生成RGB值**的函数,最后带着大家深度理解和掌握颜色领域的应用.\n\n1 文章摘要\n------\n\n*   HEX与16进制\n*   HEX转RGB算法\n*   RGB转HEX算法\n*   应用场景\n\n2 HEX(16进制)\n-----------\n\n> 十六进制（英文名称：Hexadecimal），是计算机中数据的一种表示方法。和我们平常的表示法不一样。它由0-9，A-F组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9；A-F对应10-15；N进制的数可以用0~(N-1)的数表示，超过9的用字母A-F。\n\n以上概念非常重要, 这也是我们转换**RGB**的关键. 还有一个知识点需要我们掌握的就是**进制转换**. 在计算机基础中我们都知道如何将二进制转化为十进制, 10进制数转换成16进制的方法，和转换为2进制的方法类似，唯一的变化：除数由2变成16. 举个例子, 我们拿140来举例:\n\n被除数\n\n计算过程\n\n商\n\n余数\n\n140\n\n140/16\n\n8\n\n12\n\n8\n\n8/16\n\n0\n\n8\n\n所以140转换为16进制，结果为：**8C** (由十六进制的定义我们知道14对应的字母为E)\n\n以上就是掌握HEX和RGB互相转换的核心知识点, 接下来我们来看看互相转换的算法实现.\n\n3 HEX转RGB算法\n-----------\n\n从 **HEX** 颜色值转换成 **RGB** 颜色值，本质上是**HEX的第一位数乘以16加上第二位数**. 举个例子: 转换颜色为 #1821DD的 HEX 值到 RGB 值.\n\n```js\n#1821DD ----------> rgb:\n\n18 ----> r: r的值就是: 1 * 16 + 8 = 24\n\n21 ----> g: g的值就是:　2 * 16 + 1 = 33\n\nDD ----> b: b的值就是: 13 * 16 + 13 = 221\n```\n\n以上转换的结果为**rgb: (24, 33, 221)**, 怎么样, 是不是很简单? 接下来我们来看看具体的算法实现:\n\n```ts\n    const hex2rgb = (hex: string = ''):string => {\n    //  针对于传入错误的hex,即长度不等于7或者不等于4的\n        if(![4,7].includes(hex.length)) {\n        throw new Error('格式错误')\n    }\n    \n    let result = hex.slice(1)\n    \n    // 如果是颜色叠值, 统一转换成6位颜色值\n        if(result.length === 3) {\n        result = result.split('').map(a => `${a}${a}`).join('')\n    }\n    \nconst rgb:number[] = []\n\n// 计算hex值\n    for(let i=0, len = result.length; i< len; i+=2) {\n    rgb[i / 2] = getHexVal(result[i]) * 16 + getHexVal(result[i+1])\n}\n\n    function getHexVal(letter:string):number {\n    let num:number = -1;\n        switch(letter.toUpperCase()) {\n        case \"A\":\n        num = 10\n        break;\n        case \"B\":\n        num = 11\n        break;\n        case \"C\":\n        num = 12\n        break;\n        case \"D\":\n        num = 13\n        break;\n        case \"E\":\n        num = 14\n        break;\n        case \"F\":\n        num = 15\n        break;\n    }\n    \n        if(num < 0) {\n        num = Number(letter)\n    }\n    \n    return num\n}\n\nreturn `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`\n}\n```\n\n当然还有更其他方法可以实现**REX**转**RGB**, 大家可以自行探索.\n\n4 RGB转HEX算法\n-----------\n\n对于RGB转HEX, 方法类似, 只不过相当于上述方法的逆运算, 笔者实现一种思路, 大家可以参考学习:\n\n```ts\n    const rgb2hex = (rgb: string):string => {\n    let str = rgb.replace(/rgb\\((.*)\\)/g, '$1')\n    let strArr = str.split(',').map(t => t.trim())\n    \nlet result:string[] = []\n\n    for(let i:number = 0, len:number = strArr.length; i < len; i++) {\n    let curVal = Number(strArr[i])\n    let left = getHexStr(String(Math.floor(curVal / 16)))\n    let right = getHexStr(String(Math.floor(curVal % 16)))\n    result[i] = left  + right\n}\n\n    function getHexStr(v:string):string {\n    let str:string = '';\n        switch(v) {\n        case '10':\n        str = \"A\"\n        break;\n        case '11':\n        str = \"B\"\n        break;\n        case '12':\n        str = \"C\"\n        break;\n        case '13':\n        str = \"D\"\n        break;\n        case '14':\n        str = \"E\"\n        break;\n        case '15':\n        str = \"F\"\n        break;\n    }\n    \n        if(!str) {\n        str = v\n    }\n    \n    return str\n}\n\nreturn `#${result.join('')}`\n}\n```\n\n以上就是反转的算法, 大家掌握了吗?接下来我们来聊聊它的应用场景.\n\n5 应用场景\n------\n\n其实颜色单位互换应用在很多领域, 笔者先罗列几个实际场景:\n\n*   单位换算工具\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n*   WEB IDE调色板\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n*   动态背景\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n![](https://t11.baidu.com/it/u=1683902884,1968350863&fm=58)\n\n其实还有很多应用, 大家可以自行发挥哈, 今天的学习就到这了, 请问今天你又博学了吗?",
	"selfDefined": "likes:12,comments:7,collects:15,likes:2203"
}