{
	"title": "Vue3 实现最近很火的酷炫功能：卡片悬浮发光",
	"author": "Sunshine_Lin",
	"publishTime": "2024-05-28",
	"readTime": "阅读4分钟",
	"tags": "[\"Vue.js\",\"前端中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心~ 有趣的动画效果 前几天在网上看到了一个很有趣的动画效果，如下，光会跟随鼠标在卡片上进行移动，并且卡片",
	"article": "前言\n--\n\n大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心~\n\n有趣的动画效果\n-------\n\n前几天在网上看到了一个很有趣的动画效果，如下，光会跟随鼠标在卡片上进行移动，并且卡片会有视差的效果\n\n那么在 Vue3 中应该如何去实现这个效果呢？\n\n![](/images/jueJin/9fb88363074046d.png)\n\n基本实现思路\n------\n\n其实实现思路很简单，无非就是分几步：\n\n*   首先，卡片是`相对定位`，光是`绝对定位`\n*   监听卡片的鼠标移入事件`mouseenter`，当鼠标进入时显示光\n*   监听卡片的鼠标移动事件`mouseover`，鼠标移动时修改光的`left、top`，让光跟随鼠标移动\n*   监听卡片的鼠标移出事件`mouseleave`，鼠标移出时，隐藏光\n\n我们先在 `Index.vue` 中准备一个卡片页面，光的CSS效果可以使用`filter: blur()` 来实现\n\n![](/images/jueJin/715fc5727d9f4bd.png)\n\n可以看到现在的效果是这样\n\n![](/images/jueJin/268e2cab742d471.png)\n\n实现光源跟随鼠标\n--------\n\n在实现之前我们需要注意几点：\n\n*   1、鼠标移入时需要设置卡片 `overflow: hidden`，否则光会溢出，而鼠标移出时记得还原\n*   2、获取鼠标坐标时需要用`clientX/Y`而不是`pageX/Y`，因为前者会把页面滚动距离也算进去，比较严谨\n\n刚刚说到实现思路时我们说到了`mouseenter、mousemove、mouseleave`，其实`mouseenter、mouseleave` 这二者的逻辑比较简单，重点是 `mouseover` 这个监听函数\n\n而在 `mouseover` 这个函数中，最重要的逻辑就是：**光怎么跟随鼠标移动呢？**\n\n或者也可以这么说：**怎么计算光相对于卡片盒子的 left 和 top**\n\n对此我专门画了一张图，相信大家一看就懂怎么算了\n\n![](/images/jueJin/b4472154d5d94b6.png)\n\n*   **left = clientX - x - width/2**\n*   **height = clientY - y - height/2**\n\n知道了怎么计算，那么逻辑的实现也很明了了~封装一个`use-light-card.ts`\n\n![](/images/jueJin/cc3e2cf55c52475.png)\n\n接着在页面中去使用\n\n![](/images/jueJin/387c59d6b71244a.png)\n\n这样就能实现基本的效果啦~\n\n![](/images/jueJin/622b8e42eab14f1.png)\n\n卡片视差效果\n------\n\n卡片的视差效果需要用到样式中 `transform` 样式，主要是配置四个东西：\n\n*   perspective：定义元素在 3D 变换时的透视效果\n*   rotateX：X 轴旋转角度\n*   rotateY：Y 轴旋转角度\n*   scale3d：X/Y/Z 轴上的缩放比例\n\n![](/images/jueJin/28914d0ddee4496.png)\n\n现在就有了卡片视差的效果啦~\n\n![](/images/jueJin/62ba00ce20c5439.png)\n\n给所有卡片添加光源\n---------\n\n上面只是给一个卡片增加光源，接下来可以给每一个卡片都增加光源啦！！！\n\n![](/images/jueJin/42520369e801417.png)\n\n![](/images/jueJin/ead93bd3c70c44d.png)\n\n让光源变成可配置\n--------\n\n上面的代码，总感觉这个 hooks 耦合度太高不太通用，所以我们可以让光源变成可配置化，这样每个卡片就可以展示不同大小、颜色的光源了~像下面一样\n\n![](/images/jueJin/4a85e37d24c4495.png)\n\n既然是配置化，那我们希望是这么去使用 hooks 的，我们并不需要自己在页面中去写光源的dom节点，也不需要自己去写光源的样式，而是通过配置传入 hooks 中\n\n![](/images/jueJin/7a6903b4e6c147e.png)\n\n所以 hooks 内部要自己通过操作 DOM 的方式，去添加、删除光源，可以使用`createElement、appendChild、removeChild` 去做这些事~\n\n![](/images/jueJin/a44070dd56f4483.png)\n\n完整源码\n----\n\n```html\n<!-- Index.vue -->\n\n<template>\n<div class=\"container\">\n<!-- 方块盒子 -->\n<div class=\"item\" ref=\"cardRef1\"></div>\n<!-- 方块盒子 -->\n<div class=\"item\" ref=\"cardRef2\"></div>\n<!-- 方块盒子 -->\n<div class=\"item\" ref=\"cardRef3\"></div>\n</div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useLightCard } from './use-light-card';\n\nconst { cardRef: cardRef1 } = useLightCard();\n    const { cardRef: cardRef2 } = useLightCard({\n        light: {\n        color: '#ffffff',\n        width: 100,\n        },\n        });\n            const { cardRef: cardRef3 } = useLightCard({\n                light: {\n                color: 'yellow',\n                },\n                });\n                </script>\n                \n                <style scoped lang=\"less\">\n                    .container {\n                    background: black;\n                    width: 100%;\n                    height: 100%;\n                    padding: 200px;\n                    display: flex;\n                    justify-content: space-between;\n                    \n                        .item {\n                        position: relative;\n                        width: 125px;\n                        height: 125px;\n                        background: #1c1c1f;\n                        border: 1px solid rgba(255, 255, 255, 0.1);\n                    }\n                }\n                </style>\n                \n``````js\n// use-light-card.ts\n\nimport { onMounted, onUnmounted, ref } from 'vue';\n\n    interface IOptions {\n        light?: {\n        width?: number; // 宽\n        height?: number; // 高\n        color?: string; // 颜色\n        blur?: number; // filter: blur()\n        };\n    }\n    \n        export const useLightCard = (option: IOptions = {}) => {\n        // 获取卡片的dom节点\n        const cardRef = ref<HTMLDivElement | null>(null);\n        let cardOverflow = '';\n        // 光的dom节点\n        const lightRef = ref<HTMLDivElement>(document.createElement('div'));\n        // 设置光源的样式\n        \n            const setLightStyle = () => {\n            const { width = 60, height = 60, color = '#ff4132', blur = 40 } = option.light ?? {};\n            const lightDom = lightRef.value;\n            lightDom.style.position = 'absolute';\n            lightDom.style.width = `${width}px`;\n            lightDom.style.height = `${height}px`;\n            lightDom.style.background = color;\n            lightDom.style.filter = `blur(${blur}px)`;\n            };\n            \n            // 设置卡片的 overflow 为 hidden\n                const setCardOverflowHidden = () => {\n                const cardDom = cardRef.value;\n                    if (cardDom) {\n                    cardOverflow = cardDom.style.overflow;\n                    cardDom.style.overflow = 'hidden';\n                }\n                };\n                // 还原卡片的 overflow\n                    const restoreCardOverflow = () => {\n                    const cardDom = cardRef.value;\n                        if (cardDom) {\n                        cardDom.style.overflow = cardOverflow;\n                    }\n                    };\n                    \n                    // 往卡片添加光源\n                        const addLight = () => {\n                        const cardDom = cardRef.value;\n                            if (cardDom) {\n                            cardDom.appendChild(lightRef.value);\n                        }\n                        };\n                        // 删除光源\n                            const removeLight = () => {\n                            const cardDom = cardRef.value;\n                                if (cardDom) {\n                                cardDom.removeChild(lightRef.value);\n                            }\n                            };\n                            \n                            // 监听卡片的鼠标移入\n                                const onMouseEnter = () => {\n                                // 添加光源\n                                addLight();\n                                setCardOverflowHidden();\n                                };\n                                \n                                // use-light-card.ts\n                                \n                                // 监听卡片的鼠标移动\n                                    const onMouseMove = (e: MouseEvent) => {\n                                    // 获取鼠标的坐标\n                                    const { clientX, clientY } = e;\n                                    // 让光跟随鼠标\n                                    const cardDom = cardRef.value;\n                                    const lightDom = lightRef.value;\n                                        if (cardDom) {\n                                        // 获取卡片相对于窗口的x和y坐标\n                                        const { x, y } = cardDom.getBoundingClientRect();\n                                        // 获取光的宽高\n                                        const { width, height } = lightDom.getBoundingClientRect();\n                                        lightDom.style.left = `${clientX - x - width / 2}px`;\n                                        lightDom.style.top = `${clientY - y - height / 2}px`;\n                                        \n                                        //   设置动画效果\n                                        const maxXRotation = 10; // X 轴旋转角度\n                                        const maxYRotation = 10; // Y 轴旋转角度\n                                        \n                                        const rangeX = 200 / 2; // X 轴旋转的范围\n                                        const rangeY = 200 / 2; // Y 轴旋转的范围\n                                        \n                                        const rotateX = ((clientX - x - rangeY) / rangeY) * maxXRotation; // 根据鼠标在 Y 轴上的位置计算绕 X 轴的旋转角度\n                                        const rotateY = -1 * ((clientY - y - rangeX) / rangeX) * maxYRotation; // 根据鼠标在 X 轴上的位置计算绕 Y 轴的旋转角度\n                                        \n                                        cardDom.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`; //设置 3D 透视\n                                    }\n                                    };\n                                    // 监听卡片鼠标移出\n                                        const onMouseLeave = () => {\n                                        // 鼠标离开移出光源\n                                        removeLight();\n                                        restoreCardOverflow();\n                                        };\n                                        \n                                            onMounted(() => {\n                                            // 设置光源样式\n                                            setLightStyle();\n                                            // 绑定事件\n                                            cardRef.value?.addEventListener('mouseenter', onMouseEnter);\n                                            cardRef.value?.addEventListener('mousemove', onMouseMove);\n                                            cardRef.value?.addEventListener('mouseleave', onMouseLeave);\n                                            });\n                                            \n                                                onUnmounted(() => {\n                                                // 解绑事件\n                                                cardRef.value?.removeEventListener('mouseenter', onMouseEnter);\n                                                cardRef.value?.removeEventListener('mousemove', onMouseMove);\n                                                cardRef.value?.removeEventListener('mouseleave', onMouseLeave);\n                                                });\n                                                \n                                                    return {\n                                                    cardRef,\n                                                    };\n                                                    };\n                                                    \n```\n\n结语 & 加学习群 & 摸鱼群\n---------------\n\n我是林三心\n\n*   一个待过**小型toG型外包公司、大型外包公司、小公司、潜力型创业公司、大公司**的作死型前端选手；\n*   一个偏前端的全干工程师；\n*   一个不正经的掘金作者；\n*   一个逗比的B站up主；\n*   一个不帅的小红书博主；\n*   一个喜欢打铁的篮球菜鸟；\n*   一个喜欢历史的乏味少年；\n*   一个喜欢rap的五音不全弱鸡\n\n如果你想一起学习前端，一起摸鱼，一起研究简历优化，一起研究面试进步，一起交流历史音乐篮球rap，可以来俺的摸鱼学习群哈哈，点这个，有7000多名前端小伙伴在等着一起学习哦 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")",
	"selfDefined": "likes:382,comments:0,collects:670,likes:22205"
}