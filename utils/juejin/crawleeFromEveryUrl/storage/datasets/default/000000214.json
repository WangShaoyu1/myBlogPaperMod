{
	"title": "实战！日志打印的15个好建议",
	"author": "捡田螺的小男孩",
	"publishTime": "2021-09-23",
	"readTime": "阅读6分钟",
	"tags": "[\"后端\",\"Java\",\"代码规范中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "大家好，我是捡田螺的小男孩。日志是快速定位问题的好帮手，是撕逼和甩锅的利器！打印好日志非常重要。今天我们来聊聊日志打印的15个好建议~",
	"article": "前言\n--\n\n大家好，我是**捡田螺的小男孩**。日志是快速定位问题的好帮手，是**撕逼和甩锅**的利器！打印好日志非常重要。今天我们来聊聊**日志打印**的15个好建议~\n\n*   公众号：**捡田螺的小男孩**\n*   [我的github地址](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwhx123%2FJavaHome \"https://github.com/whx123/JavaHome\")，感谢给个star\n\n1\\. 选择恰当的日志级别\n-------------\n\n常见的日志级别有5种，分别是error、warn、info、debug、trace。日常开发中，我们需要选择恰当的日志级别，不要反手就是打印info哈~\n\n![](/images/jueJin/c4502943568747e.png)\n\n*   error：错误日志，指比较严重的错误，对正常业务有影响，需要**运维配置监控的**；\n*   warn：警告日志，一般的错误，对业务影响不大，但是需要**开发关注**；\n*   info：信息日志，记录排查问题的关键信息，如调用时间、出参入参等等；\n*   debug：用于开发DEBUG的，关键逻辑里面的运行时数据；\n*   trace：最详细的信息，一般这些信息只记录到日志文件中。\n\n2\\. 日志要打印出方法的入参、出参\n------------------\n\n我们并不需要打印很多很多日志，只需要打印可以**快速定位问题的有效日志**。有效的日志，是甩锅的利器！\n\n![](/images/jueJin/c59f66bfc09d42f.png)\n\n哪些算得的上**有效关键**的日志呢？比如说，方法进来的时候，打印**入参**。再然后呢，在方法返回的时候，就是**打印出参，返回值**。入参的话，一般就是**userId或者bizSeq这些关键**信息。正例如下：\n\n```ini\n    public String testLogMethod(Document doc, Mode mode){\n    log.debug(“method enter param：{}”,userId);\n    String id = \"666\";\n    log.debug(“method exit param：{}”,id);\n    return id;\n}\n```\n\n3\\. 选择合适的日志格式\n-------------\n\n理想的日志格式，应当包括这些最基本的信息：如当**前时间戳**（一般毫秒精确度）、**日志级别**，**线程名字**等等。在logback日志里可以这么配置：\n\n```xml\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n<encoder>\n<pattern>%d{HH:mm:ss.SSS} %-5level [%thread][%logger{0}] %m%n</pattern>\n</encoder>\n</appender>\n```\n\n如果我们的日志格式，连当前时间都沒有记录，那**连请求的时间点都不知道了**？\n\n![](/images/jueJin/6ecfebbe1a0b411.png)\n\n4\\. 遇到if...else...等条件时，每个分支首行都尽量打印日志\n------------------------------------\n\n当你碰到**if...else...或者switch**这样的条件时，可以在分支的首行就打印日志，这样排查问题时，就可以通过日志，确定进入了哪个分支，代码逻辑更清晰，也更方便排查问题了。\n\n![](/images/jueJin/60bc12dfb6324c0.png)\n\n正例：\n\n```c\n    if(user.isVip()){\n    log.info(\"该用户是会员,Id:{},开始处理会员逻辑\",user,getUserId());\n    //会员逻辑\n        }else{\n        log.info(\"该用户是非会员,Id:{},开始处理非会员逻辑\",user,getUserId())\n        //非会员逻辑\n    }\n```\n\n5.日志级别比较低时，进行日志开关判断\n-------------------\n\n对于trace/debug这些比较低的日志级别，必须进行日志级别的开关判断。\n\n正例：\n\n```sql\nUser user = new User(666L, \"公众号\", \"捡田螺的小男孩\");\n    if (log.isDebugEnabled()) {\n    log.debug(\"userId is: {}\", user.getId());\n}\n```\n\n因为当前有如下的日志代码：\n\n```bash\nlogger.debug(\"Processing trade with id: \" + id + \" and symbol: \" + symbol);\n```\n\n如果**配置的日志级别是warn**的话，上述日志不会打印，但是会执行字符串拼接操作，如果`symbol`是对象， 还会执行`toString()`方法，浪费了系统资源，执行了上述操作，最终日志却没有打印，因此建议**加日志开关判断。**\n\n6\\. 不能直接使用日志系统（Log4j、Logback）中的 API，而是使用日志框架SLF4J中的API。\n-------------------------------------------------------\n\nSLF4J 是门面模式的日志框架，有利于维护和各个类的日志处理方式统一，并且可以在保证不修改代码的情况下，很方便的实现底层日志框架的更换。\n\n![](/images/jueJin/9846b8d9ddd2485.png)\n\n正例：\n\n```arduino\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nprivate static final Logger logger = LoggerFactory.getLogger(TianLuoBoy.class);\n```\n\n7\\. 建议使用参数占位{}，而不是用+拼接。\n-----------------------\n\n反例：\n\n```bash\nlogger.info(\"Processing trade with id: \" + id + \" and symbol: \" + symbol);\n```\n\n上面的例子中，使用`+`操作符进行字符串的拼接，有一定的**性能损耗**。\n\n正例如下：\n\n```bash\nlogger.info(\"Processing trade with id: {} and symbol : {} \", id, symbol);\n```\n\n我们使用了大括号`{}`来作为日志中的占位符，比于使用`+`操作符，更加优雅简洁。并且，**相对于反例**，使用占位符仅是替换动作，可以有效提升性能。\n\n8\\. 建议使用异步的方式来输出日志。\n-------------------\n\n*   日志最终会输出到文件或者其它输出流中的，IO性能会有要求的。如果异步，就可以显著提升IO性能。\n*   除非有特殊要求，要不然建议使用异步的方式来输出日志。以logback为例吧，要配置异步很简单，使用AsyncAppender就行\n\n```ini\n<appender name=\"FILE_ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n<appender-ref ref=\"ASYNC\"/>\n</appender>\n```\n\n9\\. 不要使用e.printStackTrace()\n---------------------------\n\n![](/images/jueJin/e2aeaca5e0f44c0.png)\n\n反例：\n\n```php\n    try{\n    // 业务代码处理\n        }catch(Exception e){\n        e.printStackTrace();\n    }\n```\n\n正例：\n\n```php\n    try{\n    // 业务代码处理\n        }catch(Exception e){\n        log.error(\"你的程序有异常啦\",e);\n    }\n```\n\n**理由：**\n\n*   e.printStackTrace()打印出的堆栈日志跟业务代码日志是交错混合在一起的，通常排查异常日志不太方便。\n*   e.printStackTrace()语句产生的字符串记录的是堆栈信息，如果信息太长太多，字符串常量池所在的内存块没有空间了,即内存满了，那么，用户的请求就卡住啦~\n\n10\\. 异常日志不要只打一半，要输出全部错误信息\n-------------------------\n\n![](/images/jueJin/420f0da65bac44b.png)\n\n反例1：\n\n```php\n    try {\n    //业务代码处理\n        } catch (Exception e) {\n        // 错误\n        LOG.error('你的程序有异常啦');\n    }\n    \n```\n\n*   异常e都没有打印出来，所以压根不知道出了什么类型的异常。\n\n反例2：\n\n```php\n    try {\n    //业务代码处理\n        } catch (Exception e) {\n        // 错误\n        LOG.error('你的程序有异常啦', e.getMessage());\n    }\n```\n\n*   `e.getMessage()`不会记录详细的堆栈异常信息，只会记录错误基本描述信息，不利于排查问题。\n\n正例：\n\n```php\n    try {\n    //业务代码处理\n        } catch (Exception e) {\n        // 错误\n        LOG.error('你的程序有异常啦', e);\n    }\n```\n\n11\\. 禁止在线上环境开启 debug\n--------------------\n\n禁止在线上环境开启debug，这一点非常重要。\n\n因为一般系统的debug日志会很多，并且各种框架中也大量使用 debug的日志，线上开启debug不久可能会打满磁盘，影响业务系统的正常运行。\n\n12.不要记录了异常，又抛出异常\n----------------\n\n![](/images/jueJin/671289ecaa4b4eb.png)\n\n反例如下：\n\n```vbnet\nlog.error(\"IO exception\", e);\nthrow new MyException(e);\n```\n\n*   这样实现的话，通常会把栈信息打印两次。这是因为捕获了MyException异常的地方，还会再打印一次。\n*   这样的日志记录，或者包装后再抛出去，不要同时使用！否则你的日志看起来会让人很迷惑。\n\n13.避免重复打印日志\n-----------\n\n避免重复打印日志，酱紫会浪费磁盘空间。如果你已经有一行日志清楚表达了意思，**避免再冗余打印**，反例如下：\n\n```c\n    if(user.isVip()){\n    log.info(\"该用户是会员,Id:{}\",user,getUserId());\n    //冗余，可以跟前面的日志合并一起\n    log.info(\"开始处理会员逻辑,id:{}\",user,getUserId());\n    //会员逻辑\n        }else{\n        //非会员逻辑\n    }\n```\n\n如果你是使用log4j日志框架，务必在`log4j.xml`中设置 additivity=false，因为可以避免重复打印日志\n\n正例：\n\n```ini\n<logger name=\"com.taobao.dubbo.config\" additivity=\"false\">\n```\n\n14.日志文件分离\n---------\n\n![](/images/jueJin/12a2cbe6cf7f4ba.png)\n\n*   我们可以把不同类型的日志分离出去，比如access.log，或者error级别error.log，都可以单独打印到一个文件里面。\n*   当然，也可以根据不同的业务模块，打印到不同的日志文件里，这样我们排查问题和做数据统计的时候，都会比较方便啦。\n\n15\\. 核心功能模块，建议打印较完整的日志\n----------------------\n\n![](/images/jueJin/c6f26259cda042e.png)\n\n*   我们日常开发中，如果核心或者逻辑复杂的代码，建议添加详细的注释，以及较详细的日志。\n*   日志要多详细呢？脑洞一下，如果你的核心程序哪一步出错了，通过日志可以定位到，那就可以啦。",
	"selfDefined": "likes:223,comments:22,collects:342,likes:18141"
}