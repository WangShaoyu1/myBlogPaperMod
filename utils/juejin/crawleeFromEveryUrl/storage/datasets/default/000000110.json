{
	"title": "打包的3种hash值你知道吗？当年我校招时被这题难倒了！",
	"author": "Sunshine_Lin",
	"publishTime": "2022-02-04",
	"readTime": "阅读3分钟",
	"tags": "[\"前端\",\"JavaScript\",\"Webpack中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心 当年的校招 依稀记得，当年我参加了大厂的校招，面试的是网易雷火工作室，当时有一道题，我记得很清楚，就是",
	"article": "前言\n--\n\n大家好，我是林三心，**用最通俗易懂的话讲最难的知识点**是我的座右铭，**基础是进阶的前提**是我的初心\n\n当年的校招\n-----\n\n依稀记得，当年我参加了大厂的校招，面试的是**网易雷火工作室**，当时有一道题，我记得很清楚，就是：**说说webpack中三种hash配置的区别**\n\n哈哈，我当时连`webpack`都不太会配置，所以也答不出来，然后也。。。没有然后了。。\n\n哪三种？\n----\n\nwebpack中的三种`hash`分别是：\n\n*   `hash`：全局hash\n*   `chunkhash`：分组hash\n*   `contenthash`：内容hash\n\n实践讲解\n----\n\n### 事先准备\n\n准备三个文件：\n\n![](/images/jueJin/6ce4804a9015440.png)\n\n*   `main.js`\n\n```js\nimport './main.css'\n\nconsole.log('我是main.js')\n```\n\n*   `console.js`\n\n```js\nconsole.log('我是console.js')\n```\n\n*   `main.css`\n\n```js\n    .title {\n    color: #000;\n}\n```\n\n### 打包环境搭建\n\n打包环境的搭建我就不在这里详细讲了，想看的之后我会出一篇文章专门讲解。这里我就抽取精华部分。\n\n*   `webpack.config.js`\n\n```js\n// 多入口打包\n    entry: {\n    main: './src/main.js',\n    console: './src/console.js'\n    },\n    // 输出配置\n        output: {\n        path: path.resolve(__dirname, './dist'),\n        // 这里预设为hash\n        filename: 'js/[name].[hash].js',\n        clean: true\n        },\n            plugins: [\n            // 打包css文件的配置\n                new MiniCssExtractPlugin({\n                // 这里预设为hash\n                filename: 'styles/[name].[hash].css'\n                })\n            ]\n```\n\n### hash\n\n由于我们预设的是`hash`，所以我们直接运行打包`npm run build`，我们看看我们打包后的是什么东西\n\n![](/images/jueJin/f65e12dba2bc477.png)\n\n可以看到，所有文件的文件名hash值都是一致的，那我们现在改一下`main.css`这个文件\n\n```js\n    .title {\n    // #000 改成 #fff\n    color: #fff;\n}\n```\n\n然后我们再运行`npm run build`打包，看看打包后的是什么东西：\n\n![](/images/jueJin/1ac1ed163dd4460.png)\n\n可以看出，修改一个文件，所有文件的hash值跟着变\n\n> 结论：**牵一发动全身**，只改了一个`main.css`，会导致打包后所有文件的hash值都改变。所以当打包名称设置为`hash`时，整个项目文件是一致的，修改其中一个会导致所有跟着一起改。 ![](/images/jueJin/2d5fe59961ac4ad.png)\n\n### chunkhash\n\n我们把输出文件名规则修改为`chunkhash`：\n\n```js\n    entry: {\n    main: './src/main.js',\n    console: './src/console.js'\n    },\n        output: {\n        path: path.resolve(__dirname, './dist'),\n        // 修改为 chunkhash\n        修改    filename: 'js/[name].[chunkhash].js',\n        clean: true\n        },\n            plugins: [\n                new MiniCssExtractPlugin({\n                // 修改为 chunkhash\n                修改      filename: 'styles/[name].[chunkhash].css'\n                })\n            ]\n```\n\n此时我们运行`npm run build`看看，打包后的东西：\n\n![](/images/jueJin/c282f66132c440b.png)\n\n我们可以看出，hash值会根据**入口文件的不同**而分出两个阵营：\n\n*   `main.js、main.css`一个阵营，都属于**main.js**入口文件\n*   `console.js`一个阵营，属于**console.js**入口文件\n\n那我们现在照样修改一下`main.css`：\n\n```js\n    .title {\n    // 从 #fff 改为 pink\n    color: pink;\n}\n```\n\n重新运行`npm run build`打包看看：\n\n![](/images/jueJin/d307afd9309e464.png)\n\n可以看出，`main.css`修改后会影响`main.css、main.js`的hash值\n\n> 结论：当规则为`chunkhash`时，打包后的hash值会根据入口文件的不用而不一样，当某个入口文件修改后重新打包，会导致本入口文件关联的所有文件的hash值都修改，但是不会影响到其他入口文件的hash值 ![](/images/jueJin/deee7159b16a4e1.png)\n\n### contenthash\n\n我们把输出文件名规则修改为`contenthash`：\n\n```js\n    entry: {\n    main: './src/main.js',\n    console: './src/console.js'\n    },\n        output: {\n        path: path.resolve(__dirname, './dist'),\n        // 修改为 contenthash\n        修改    filename: 'js/[name].[contenthash].js',\n        clean: true\n        },\n            plugins: [\n                new MiniCssExtractPlugin({\n                // 修改为 contenthash\n                修改      filename: 'styles/[name].[contenthash].css'\n                })\n            ]\n```\n\n运行`npm run build`打包，看看打包后的文件长什么样子：\n\n![](/images/jueJin/fe39ec8d6312412.png)\n\n可以看到，每个文件的hash值都不一样，每个文件的hash值都是根据自身的内容去生成的，那我们现在修改一下`main.css`：\n\n```js\n    .title {\n    // pink 修改为 blue\n    color: blue;\n}\n```\n\n重新打包看看：\n\n![](/images/jueJin/043aa7cea727466.png)\n\n可以看出，`main.css`修改后只会影响`main.css`得hash值，也就是自己的hash值\n\n> 结论：当规则为`contenthash`时，每个文件的hash值都是根据自身内容而生成，当某个文件内容修改时，打包后只会修改其本身的hash值，不会影响其他文件的hash值 ![](/images/jueJin/d54161567a4b4f1.png)\n\n结语\n--\n\n我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，摸鱼群，点这个 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/2d1d43ebae0c47c.png)",
	"selfDefined": "likes:105,comments:0,collects:96,likes:9463"
}