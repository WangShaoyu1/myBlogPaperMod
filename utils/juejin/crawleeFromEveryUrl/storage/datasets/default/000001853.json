{
	"title": "从零实现Dooring低代码印章组件",
	"author": "徐小夕",
	"publishTime": "2023-01-06",
	"readTime": "阅读4分钟",
	"tags": "[\"前端\",\"JavaScript\",\"架构中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "上一篇文章和大家分享了低代码平台组件间通信方案的几种实现 低代码平台组件间通信方案复盘 今天继续和大家分享一下比较有意思的可视化印章组件的实现. 你将收获 低代码组件的基本设计模式 印章组件的设计原",
	"article": "上一篇文章和大家分享了低代码平台组件间通信方案的几种实现:\n\n*   [低代码平台组件间通信方案复盘](https://juejin.cn/post/7184801269226143805 \"https://juejin.cn/post/7184801269226143805\")\n\n今天继续和大家分享一下比较有意思的**可视化印章组件**的实现.\n\n![](/images/jueJin/147c86d7c0ce4d0.png)\n\n你将收获\n----\n\n*   低代码组件的基本设计模式\n*   印章组件的设计原理(canvas相关)\n*   如何快速将任意组件集成到低代码平台\n\n正文\n--\n\n### 低代码组件的基本设计模式\n\n我们都知道任何**低代码**或者**零代码**搭建产品都非常注重**底层搭建协议**(schema), 这些产品通常会设计一套向上兼容且可扩展的 `DSL` 结构, 来实现页面元件的标准化配置, 并支持元件的向上扩展:\n\n![](/images/jueJin/3c96af72c839401.png)\n\n在设计 `H5-Dooring` 可视化搭建平台前, 我也参考了很多标准化软件数据协议, 给我启发最大的就是 `ODATA` 规范, 具体设计细节可以参考我之前的文章:\n\n*   [Dooring无代码搭建平台技术演进之路](https://juejin.cn/post/7114324484399562766 \"https://juejin.cn/post/7114324484399562766\")\n\n之所以要介绍低代码的 `schema` 设计, 是因为低代码组件的设计与开发需要依赖 `schema` 的定义, 为了满足低代码组件能被用户实时编辑, 其基本的组成类似如下:\n\n![](/images/jueJin/ed4e47954f90489.png)\n\n我们只需要在写普通组件的基础上加一个 `schema` 文件即可, 这里以Dooring组件来举一个例子:\n\n```js\n// 组件代码tsx\nimport styles from './index.less';\nimport React, { memo, useState } from 'react';\nimport { IHeaderConfig } from './schema';\n\n    const Header = memo((props: IHeaderConfig) => {\n    const { cpName, bgColor, logo, height } = props;\n    \n    return (\n    <header className={styles.header} style={{ backgroundColor: bgColor, height: height + 'px' }}>\n    <div className={styles.logo}>\n    H5-dooring\n    </div>\n    </header>\n    );\n    });\n    \n    export default Header;\n    \n    \n    // 组件样式\n        .header {\n        box-sizing: content-box;\n        padding: 3px 12px;\n        background-color: #000;\n            .logo {\n            max-width: 160px;\n            overflow: hidden;\n                img {\n                height: 100%;\n                object-fit: contain;\n            }\n        }\n    }\n    \n    // 组件schema\n        const Header = {\n            editData: [\n            ...baseConfig,\n                {\n                key: 'bgColor',\n                name: 背景色,\n                type: 'Color',\n                },\n                    {\n                    key: 'height',\n                    name: 高,\n                    type: 'Number',\n                    },\n                        {\n                        key: 'logo',\n                        name: 'logo',\n                        type: 'Upload',\n                        isCrop: false,\n                        cropRate: 1000 / 618,\n                    }\n                    ],\n                        config: {\n                        ...baseDefault,\n                        bgColor: 'rgba(245,245,245,1)',\n                            logo: [\n                                {\n                                uid: '001',\n                                name: 'image.png',\n                                status: 'done',\n                                url: 'http://cdn.dooring.cn/dr/logo.ff7fc6bb.png',\n                                },\n                                ],\n                                height: 50,\n                                },\n                                };\n                                \n                                export default Header;\n```\n\n在初步了解了低代码组件的设计模式之后, 我们接下来就来实现一下低代码印章组件的实现.\n\n### 印章组件的设计原理\n\n![](/images/jueJin/b41d55e74d9944b.png)\n\n我们由上图可以看出, 一个印章组件包含如下几个部分:\n\n![](/images/jueJin/47b230cb2b4248b.png)\n\n对于印章的绘制, 我们可以采用 `canvas` 或者 `svg` 来实现, 这里我采用 `canvas` 来实现, 首先我们需要定义组件可以对外暴露的属性, 以便在低代码平台中可以让用户来自定义, 这里我直接列出基本的配置:\n\n![](/images/jueJin/c049ee7ff2294b9.png)\n\n接下来我们就来实现一下吧!\n\n#### 1\\. 绘制印章边框\n\n```js\nlet canvas = dom;\nlet context = canvas.getContext('2d') as any;\n\n// 初始化\ncanvas.width= w0;\ncanvas.height = w0;\n\n// 绘制印章边框\nlet width=canvas.width/2;\nlet height=canvas.height/2;\ncontext.lineWidth= lineWidth;\ncontext.strokeStyle= color;\ncontext.beginPath();\ncontext.arc(width, height, width - lineWidth, 0, Math.PI*2);\ncontext.stroke();\n```\n\n由上面代码可知我们用 `canvas` 的 `arc` 方法来创建一个圆形边框.\n\n#### 2\\. 绘制五角星\n\n创建一个五角星形状. 该五角星的中心坐标为(x0, y0),中心到顶点的距离为 `radius`, `rotate=0` 时一个顶点在对称轴上\n\n```js\n    function create5star(context: any,sx: number,sy: number,radius: number,color: string,rotato: number){\n    context.save();\n    context.fillStyle=color;\n    //移动坐标原点\n    context.translate(sx,sy);\n    //旋转\n    context.rotate(Math.PI+rotato);\n    //创建路径\n    context.beginPath();\n    let x = Math.sin(0);\n    let y= Math.cos(0);\n    let dig = Math.PI/5 *4;\n        for(let i = 0;i< 5;i++){\n        //画五角星的五条边\n        let x = Math.sin(i*dig);\n        let y = Math.cos(i*dig);\n        context.lineTo(x*radius,y*radius);\n    }\n    context.closePath();\n    context.stroke();\n    context.fill();\n    context.restore();\n}\n```\n\n#### 3\\. 绘制印章名称\n\n```js\ncontext.font = `${fontSize}px Helvetica`;\n//设置文本的垂直对齐方式\ncontext.textBaseline = 'middle';\n//设置文本的水平对对齐方式\ncontext.textAlign = 'center';\ncontext.lineWidth=1;\ncontext.fillStyle = color;\ncontext.fillText(name,width,height+60);\n```\n\n#### 4\\. 绘制环形印章单位\n\n```js\n// 平移到此位置\ncontext.translate(width,height);\ncontext.font = `${componySize}px Helvetica`\nlet count = company.length;// 字数\nlet angle = 4*Math.PI/(3*(count - 1));// 字间角度\nlet chars = company.split(\"\");\nlet c;\n    for (let i = 0; i < count; i++){\n    // 需要绘制的字符\n    c = chars[i];\n    if(i==0)\n    context.rotate(5*Math.PI/6);\n    else\n    context.rotate(angle);\n    context.save();\n    // 平移到此位置,此时字和x轴垂直\n    context.translate(90, 0);\n    // 旋转90度,让字平行于x轴\n    context.rotate(Math.PI/2);\n    // 此点为字的中心点\n    context.fillText(c, 0, 20);\n    context.restore();\n}\n```\n\n在基本的印章实现之后, 我们来接收属性配置:\n\n![](/images/jueJin/c460413b3e2c4c1.png)\n\n对于低代码的 `schema` 配置, 这里以 `H5-Dooring` 的组件为例, 给大家分享一下:\n\n```js\n    import {\n    IColorConfigType,\n    IDataListConfigType,\n    INumberConfigType,\n    ISelectConfigType,\n    TColorDefaultType,\n    ISwitchConfigType,\n    ITextConfigType,\n    TNumberDefaultType,\n    TTextDefaultType,\n    } from '@/core/FormComponents/types';\n    import { ICommonBaseType, baseConfig, baseDefault } from '../../common';\n    import intl from '@/utils/intl';\n    \n    const t = intl();\n    export type TTextSelectKeyType = 'left' | 'right' | 'center';\n    export type TTextPosSelectKeyType = 'bottom' | 'top';\n    export type TTextFormatSelectKeyType = 'CODE128' | 'pharmacode'\n    export type TListEditData = Array<\n    IColorConfigType |\n    IDataListConfigType |\n    INumberConfigType |\n    ISelectConfigType<TTextSelectKeyType> |\n    ISelectConfigType<TTextPosSelectKeyType> |\n    ISelectConfigType<TTextFormatSelectKeyType> |\n    ISwitchConfigType |\n    ITextConfigType\n    >;\n        export interface IListConfig extends ICommonBaseType {\n        width: TNumberDefaultType;\n        compony: TTextDefaultType;\n        componySize: TNumberDefaultType;\n        text: TTextDefaultType;\n        fontSize: TNumberDefaultType;\n        color: TColorDefaultType;\n        lineWidth: TNumberDefaultType;\n        opacity: TNumberDefaultType;\n    }\n    \n        export interface IListSchema {\n        editData: TListEditData;\n        config: IListConfig;\n    }\n    \n        const List: IListSchema = {\n            editData: [\n            ...baseConfig,\n                {\n                key: 'width',\n                name: t('dr.attr.sealSize'),\n                type: 'Number',\n                },\n                    {\n                    key: 'compony',\n                    name: t('dr.attr.componyName'),\n                    type: 'Text',\n                    },\n                        {\n                        key: 'componySize',\n                        name: t('dr.attr.componySize'),\n                        type: 'Number',\n                        },\n                            {\n                            key: 'text',\n                            name: t('dr.attr.sealUnit'),\n                            type: 'Text',\n                            },\n                                {\n                                key: 'fontSize',\n                                name: t('dr.attr.fontSize'),\n                                type: 'Number',\n                                },\n                                    {\n                                    key: 'color',\n                                    name: t('dr.attr.color'),\n                                    type: 'Color',\n                                    },\n                                        {\n                                        key: 'lineWidth',\n                                        name: t('dr.attr.lineWidth'),\n                                        type: 'Number',\n                                        },\n                                            {\n                                            key: 'opacity',\n                                            name: t('dr.attr.opacity'),\n                                            type: 'Number',\n                                            },\n                                            ],\n                                                config: {\n                                                ...baseDefault,\n                                                cpName: 'Seal',\n                                                width: 180,\n                                                compony: 'Dooring零代码搭建平台',\n                                                componySize: 18,\n                                                text: 'H5-Dooring',\n                                                fontSize: 14,\n                                                color: 'rgba(240,0,0,1)',\n                                                lineWidth: 6,\n                                                opacity: 100\n                                                },\n                                                };\n                                                \n                                                export default List;\n```\n\n### 快速将任意组件集成到低代码平台\n\n在上面的分析实现中我们可以发现, 只需要把普通组件按照属性对外暴露出来, 并按照 `Dooring` 的 `schema` 定义模式来描述出来, 普通组件就可以立马变成低代码组件, 并自动生成组件配置面板:\n\n![](/images/jueJin/bf857d9f25e3410.png)\n\n具体的 `schema` 描述我在文档中做了详细的介绍, 大家感兴趣可以参考一下:\n\n[![](/images/jueJin/ffe0324a268b400.png)](https://link.juejin.cn?target=http%3A%2F%2Fh5.dooring.cn%2Fdocz%2Fcomponents%2Fintro%2Fschema \"http://h5.dooring.cn/docz/components/intro/schema\")\n\n总结\n--\n\n后续我会继续和大家分享一下 **H5-Dooring** 低代码的更多实践和思考, 如果大家对可视化低代码感兴趣也可以参考我的[**低代码可视化**](https://juejin.cn/column/6963455443528056839 \"https://juejin.cn/column/6963455443528056839\")专栏, 如果大家对图形学感兴趣, 也可以参考我的专栏[**100+前端几何学应用案例**](https://juejin.cn/column/7140106706628902948 \"https://juejin.cn/column/7140106706628902948\").\n\n**H5-dooring低代码**\n\n![H5-dooring低代码](/images/jueJin/0a63d3a3dddd487.png)\n\n**V6.Dooring可视化大屏搭建平台**\n\n![V6.Dooring可视化大屏搭建平台](/images/jueJin/7bf6c9e5113f4ca.png)",
	"selfDefined": "likes:20,comments:1,collects:18,likes:2559"
}