{
	"title": "林三心花了3小时实现了这30个JS原生方法，我看看谁比我短！！！",
	"author": "Sunshine_Lin",
	"publishTime": "2021-08-30",
	"readTime": "阅读3分钟",
	"tags": "[\"前端\",\"JavaScript中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，大家也知道，本菜鸟平时写基础文章比较多，我始终坚信两句话 用最通俗易懂的话，讲最难的知识点 基础是进阶的前提 实际开发中，或许咱们会使用很多JavaScript自带的方法，而",
	"article": "前言\n--\n\n大家好，我是林三心，大家也知道，本菜鸟平时写基础文章比较多，我始终坚信两句话\n\n*   **用最通俗易懂的话，讲最难的知识点**\n*   **基础是进阶的前提**\n\n实际开发中，或许咱们会使用很多JavaScript自带的方法，而且这些方法确实给我们带了了很多便利，大大提高了我们的代码效率，但是，有没有一瞬间，你想知道这些方法到底是怎么实现的呢？大家应该在心里有一股劲——**哼，就算没有这些方法，老子也能自己实现！！！**\n\n通过这篇文章可以学到什么呢？\n\n*   **1、重新巩固各种方法的使用方式**\n*   **2、巩固基础，即便没有这些方法，也能靠基础语法去实现**\n\n争议\n--\n\n可能有些人说我写的文章不够高大上。。我想说，其实我自己本身就不是一个高大上的人，写这些文章也都是为了帮那些跟我一样的兄弟，帮他们巩固基础。。进阶的我教不了，我还不能教基础的吗。。\n\nArray篇\n------\n\n定义一个测试数组\n\n```js\n    const players = [\n    { name: '科比', num: 24 },\n    { name: '詹姆斯', num: 23 },\n    { name: '保罗', num: 3 },\n    { name: '威少', num: 0 },\n{ name: '杜兰特', num: 35 }\n]\n```\n\n### 1、forEach\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_forEach = function (callback) {\n        for (let i = 0; i < this.length; i++) {\n        callback(this[i], i, this)\n    }\n}\n\n    players.sx_forEach((item, index, arr) => {\n    console.log(item, index)\n    })\n    // { name: '科比', num: 24 } 0\n    // { name: '詹姆斯', num: 23 } 1\n    // { name: '保罗', num: 3 } 2\n    // { name: '威少', num: 0 } 3\n    // { name: '杜兰特', num: 35 } 4\n```\n\n### 2、map\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_map = function (callback) {\nconst res = []\n    for (let i = 0; i < this.length; i++) {\n    res.push(callback(this[i], i, this))\n}\nreturn res\n}\n\nconsole.log(players.sx_map((item, index) => `${item.name}--${item.num}--${index}`))\n// [ '科比--24--0', '詹姆斯--23--1', '保罗--3--2', '威少--0--3', '杜兰特--35--4' ]\n```\n\n### 3、filter\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_filter = function (callback) {\nconst res = []\n    for (let i = 0; i < this.length; i++) {\n    callback(this[i], i, this) && res.push(this[i])\n}\nreturn res\n}\n\nconsole.log(players.sx_filter(item => item.num >= 23))\n    // [\n    //     { name: '科比', num: 24 },\n    //     { name: '詹姆斯', num: 23 },\n//     { name: '杜兰特', num: 35 }\n// ]\n```\n\n### 4、every\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_every = function (callback) {\n    let flag = true\n        for (let i = 0; i < this.length; i++) {\n        flag = callback(this[i], i, this)\n        if (!flag) break\n    }\n    \n    return flag\n}\n\nconsole.log(players.sx_every(item => item.num >= 23)) // false\nconsole.log(players.sx_every(item => item.num >= 0)) // true\n```\n\n### 5、some\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_some = function (callback) {\n    let flag = false\n        for (let i = 0; i < this.length; i++) {\n        flag = callback(this[i], i, this)\n        if (flag) break\n    }\n    \n    return flag\n}\n\nconsole.log(players.sx_some(item => item.num >= 23)) // true\nconsole.log(players.sx_some(item => item.num >= 50)) // false\n```\n\n### 6、reduce\n\n参数代表含义\n\n*   pre：前一项\n*   next：下一项\n*   index：当前索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_reduce = function (callback, ...args) {\n    let start = 0, pre\n        if (args.length) {\n    pre = args[0]\n        } else {\n    pre = this[0]\n    start = 1\n}\n    for (let i = start; i < this.length; i++) {\n    pre = callback(pre, this[i], i, this)\n}\nreturn pre\n}\n\n// 计算所有num相加\n    const sum = players.sx_reduce((pre, next) => {\n    return pre + next.num\n    }, 0)\n    console.log(sum) // 85\n```\n\n### 7、findIndex\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_findIndex = function (callback) {\n        for (let i = 0; i < this.length; i++) {\n            if (callback(this[i], i, this)) {\n            return i\n        }\n    }\n    return -1\n}\n\nconsole.log(players.sx_findIndex(item => item.name === '科比')) // 0\nconsole.log(players.sx_findIndex(item => item.name === '安东尼')) // -1\n```\n\n### 8、find\n\n参数代表含义\n\n*   item：遍历项\n*   index：遍历项的索引\n*   arr：数组本身\n\n```js\n    Array.prototype.sx_find = function (callback) {\n        for (let i = 0; i < this.length; i++) {\n            if (callback(this[i], i, this)) {\n        return this[i]\n    }\n}\nreturn undefined\n}\n\nconsole.log(players.sx_find(item => item.name === '科比')) // { name: '科比', num: 24 }\nconsole.log(players.sx_find(item => item.name === '安东尼')) // undefined\n```\n\n### 9、fill\n\n用处：填充数组\n\n参数代表含义\n\n*   initValue：填充的值\n*   start：开始填充索引，默认0\n*   end：结束填充索引，默认length\n\n```js\n    Array.prototype.sx_fill = function (value, start = 0, end) {\n    end = end || this.length\n        for (let i = start; i < end; i++) {\n        this[i] = value\n    }\n    return this\n}\n\nconsole.log(players.sx_fill('林三心', 1, 3))\n    // [\n    //     { name: '科比', num: 24 },\n    //     '林三心',\n    //     '林三心',\n    //     '林三心',\n//     { name: '杜兰特', num: 35 }\n// ]\n```\n\n### 10、includes\n\n用处：查找元素，查到返回`true`，反之返回`false`，可查找`NaN`\n\n```js\n    Array.prototype.sx_includes = function (value, start = 0) {\n    if (start < 0) start = this.length + start\n    const isNaN = Number.isNaN(value)\n        for (let i = start; i < this.length; i++) {\n            if (this[i] === value || (isNaN && Number.isNaN(this[i]))) {\n            return true\n        }\n    }\n    return false\n}\n\nconsole.log([1, 2, 3].sx_includes(2)) // true\nconsole.log([1, 2, 3, NaN].sx_includes(NaN)) // true\nconsole.log([1, 2, 3].sx_includes(1, 1)) // false\n```\n\n### 11、join\n\n用处：将数组用分隔符拼成字符串，分隔符默认为`,`\n\n```js\n    Array.prototype.sx_join = function (s = ',') {\n    let str = ''\n        for(let i = 0; i < this.length; i++) {\n        str = i === 0 ? `${str}${this[i]}` : `${str}${s}${this[i]}`\n    }\n    return str\n}\n\nconsole.log([1, 2, 3].sx_join()) // 1,2,3\nconsole.log([1, 2, 3].sx_join('*')) // 1*2*3\n```\n\n### 12、flat\n\n```js\n    Array.prototype.sx_flat = function () {\n    let arr = this\n        while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr)\n    }\n    return arr\n}\n\nconst testArr = [1, [2, 3, [4, 5]], [8, 9]]\n\nconsole.log(testArr.sx_flat())\n// [1, 2, 3, 4, 5, 8, 9]\n```\n\nObject篇\n-------\n\n定义一个测试对象\n\n```js\n    const obj = {\n    name: '林三心',\n    age: 22,\n    gender: '男'\n}\n```\n\n### 13、entries\n\n用处：将对象转成键值对数组\n\n```js\n    Object.prototype.sx_entries = function (obj) {\nconst res = []\n    for (let key in obj) {\n    obj.hasOwnProperty(key) && res.push([key, obj[key]])\n}\nreturn res\n}\n\nconsole.log(Object.sx_entries(obj))\n// [ [ 'name', '林三心' ], [ 'age', 22 ], [ 'gender', '男' ] ]\n```\n\n### 14、fromEntries\n\n用处：跟`entries`相反，将键值对数组转成对象\n\n```js\n    Object.prototype.sx_fromEntries = function (arr) {\nconst obj = {}\n    for (let i = 0; i < arr.length; i++) {\nconst [key, value] = arr[i]\nobj[key] = value\n}\nreturn obj\n}\n\nconsole.log(Object.sx_fromEntries([['name', '林三心'], ['age', 22], ['gender', '男']]))\n// { name: '林三心', age: 22, gender: '男' }\n```\n\n### 15、keys\n\n用处：将对象的key转成一个数组合集\n\n```js\n    Object.prototype.sx_keys = function (obj) {\nconst keys = []\n    for (let key in obj) {\n    obj.hasOwnProperty(key) && keys.push(key)\n}\nreturn keys\n}\n\nconsole.log(Object.keys(obj))\n// [ 'name', 'age', 'gender' ]\n```\n\n### 16、values\n\n用处：将对象的所有值转成数组合集\n\n```js\n    Object.prototype.sx_values = function (obj) {\nconst values = []\n    for (let key in obj) {\n    obj.hasOwnProperty(key) && values.push(obj[key])\n}\nreturn values\n}\n\nconsole.log(Object.sx_values(obj))\n// [ '林三心', 22, '男' ]\n```\n\n### 17、instanceOf\n\n用处：A instanceOf B，判断A是否经过B的原型链\n\n```js\n    function instanceOf(father, child) {\n    const fp = father.prototype\n    var cp = child.__proto__\n    \n        while (cp) {\n            if (cp === fp) {\n            return true\n        }\n        cp = cp.__proto__\n    }\n    \n    return false\n}\n\n    function Person(name) {\n    this.name = name\n}\nconst sx = new Person('林三心')\n\nconsole.log(instanceOf(Person, sx)) // true\nconsole.log(instanceOf(Person, sx2)) // false\n```\n\n### 18、is\n\n用处：Object.is(a, b)，判断a是否等于b\n\n```js\n    Object.prototype.sx_is = function (x, y) {\n        if (x === y) {\n        // 防止 -0 和 +0\n        return x !== 0 || 1 / x === 1 / y\n    }\n    \n    // 防止NaN\n    return x !== x && y !== y\n}\n\nconst a = { name: '林三心' }\nconst b = a\nconst c = { name: '林三心' }\n\nconsole.log(Object.sx_is(a, b)) // true\nconsole.log(Object.sx_is(a, c)) // false\n```\n\nFunction篇\n---------\n\n### 19、call\n\n```js\n    Function.prototype.sx_call = function (obj, ...args) {\n    obj = obj || window\n    \n    // Symbol是唯一的，防止重名key\n    const fn = Symbol()\n    obj[fn] = this\n    \n    // 执行，返回执行值\n    return obj[fn](...args)\n}\n\n    const testobj = {\n    name: '林三心',\n        testFn(age) {\n        console.log(`${this.name}${age}岁了`)\n    }\n}\n    const testobj2 = {\n    name: 'sunshine_lin'\n}\n\ntestobj.testFn.sx_call(testobj2, 22) // sunshine_lin22岁了\n```\n\n### 20、apply\n\n```js\n    Function.prototype.sx_apply = function (obj, args) {\n    obj = obj || window\n    \n    // Symbol是唯一的，防止重名key\n    const fn = Symbol()\n    obj[fn] = this\n    \n    // 执行，返回执行值\n    return obj[fn](...args)\n}\n\n    const testobj = {\n    name: '林三心',\n        testFn(age) {\n        console.log(`${this.name}${age}岁了`)\n    }\n}\n    const testobj2 = {\n    name: 'sunshine_lin'\n}\n\ntestobj.testFn.sx_apply(testobj2, [22]) // sunshine_lin22岁了\n```\n\nString篇\n-------\n\n### 21、slice\n\n参数代表含义\n\n*   start：开始截取的字符索引(包含此字符)\n*   end：结束截取的字符索引(不包含此字符) 注意点\n*   start > end：返回空字符串\n*   start < 0：`start = 数组长度 + start`\n\n```js\n    String.prototype.sx_slice = function (start = 0, end) {\n    start = start < 0 ? this.length + start : start\n    end = !end && end !== 0 ? this.length : end\n    \n    if (start >= end) return ''\n    let str = ''\n        for (let i = start; i < end; i++) {\n    str += this[i]\n}\n\nreturn str\n}\n\nconsole.log(str.sx_slice(2)) // nshine_lin\nconsole.log(str.sx_slice(-2)) // in\nconsole.log(str.sx_slice(-9, 10)) // shine_l\nconsole.log(str.sx_slice(5, 1)) // ''\n```\n\n### 22、substr\n\n参数代表含义\n\n*   start：开始截取的字符索引(包含此字符)\n*   length：截取的长度 注意点\n*   start < 0：`start = 数组长度 + start`\n*   length超出所能截取范围，需要做处理\n*   length < 0：返回空字符串\n\n```js\n    String.prototype.sx_substr = function (start = 0, length) {\n    if (length < 0) return ''\n    \n    start = start < 0 ? this.length + start : start\n    length = (!length && length !== 0) || length > this.length - start ? this.length : start + length\n    \n    let str = ''\n        for (let i = start; i < length; i++) {\n    str += this[i]\n}\nreturn str\n}\n\nconsole.log(str.sx_substr(3)) // shine_lin\nconsole.log(str.sx_substr(3, 3)) // shi\nconsole.log(str.sx_substr(5, 300)) // ine_lin\n```\n\n### 23、substring\n\n功能与`slice`大致相同\n\n区别之处\n\n*   start > end：互换值\n\n```js\n    String.prototype.sx_sunstring = function (start = 0, end) {\n    start = start < 0 ? this.length + start : start\n    end = !end && end !== 0 ? this.length : end\n    \nif (start >= end) [start, end] = [end, start]\nlet str = ''\n    for (let i = start; i < end; i++) {\nstr += this[i]\n}\n\nreturn str\n}\n\nconsole.log(str.sx_sunstring(2)) // nshine_lin\nconsole.log(str.sx_sunstring(-2)) // in\nconsole.log(str.sx_sunstring(-9, 10)) // shine_l\nconsole.log(str.sx_sunstring(5, 1)) // unsh\n```\n\nPromise篇\n--------\n\n### 24、all\n\n*   接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n*   如果所有Promise都成功，则返回成功结果数组\n*   如果有一个Promise失败，则返回这个失败结果\n\n```js\n    function all(promises) {\nconst result = []\nlet count = 0\n    return new MyPromise((resolve, reject) => {\n        const addData = (index, value) => {\n        result[index] = value\n        count++\n        if (count === promises.length) resolve(result)\n    }\n        promises.forEach((promise, index) => {\n            if (promise instanceof MyPromise) {\n                promise.then(res => {\n                addData(index, res)\n                }, err => reject(err))\n                    } else {\n                    addData(index, promise)\n                }\n                })\n                })\n            }\n```\n\n### 25、race\n\n*   接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n*   哪个Promise最快得到结果，就返回那个结果，无论成功失败\n\n```js\n    function race(promises) {\n        return new MyPromise((resolve, reject) => {\n            promises.forEach(promise => {\n                if (promise instanceof MyPromise) {\n                    promise.then(res => {\n                    resolve(res)\n                        }, err => {\n                        reject(err)\n                        })\n                            } else {\n                            resolve(promise)\n                        }\n                        })\n                        })\n                    }\n```\n\n### 26、allSettled\n\n*   接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n*   把每一个Promise的结果，集合成数组，返回\n\n```js\n    function allSettled(promises) {\n        return new Promise((resolve, reject) => {\n    const res = []\n    let count = 0\n        const addData = (status, value, i) => {\n            res[i] = {\n            status,\n            value\n        }\n        count++\n            if (count === promises.length) {\n            resolve(res)\n        }\n    }\n        promises.forEach((promise, i) => {\n            if (promise instanceof MyPromise) {\n                promise.then(res => {\n                addData('fulfilled', res, i)\n                    }, err => {\n                    addData('rejected', err, i)\n                    })\n                        } else {\n                        addData('fulfilled', promise, i)\n                    }\n                    })\n                    })\n                }\n```\n\n### 27、any\n\nany与all相反\n\n*   接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n*   如果有一个Promise成功，则返回这个成功结果\n*   如果所有Promise都失败，则报错\n\n```js\n    function any(promises) {\n        return new Promise((resolve, reject) => {\n        let count = 0\n            promises.forEach((promise) => {\n                promise.then(val => {\n                resolve(val)\n                    }, err => {\n                    count++\n                        if (count === promises.length) {\n                        reject(new AggregateError('All promises were rejected'))\n                    }\n                    })\n                    })\n                    })\n                }\n            }\n```\n\n困难篇\n---\n\n### 28、Array.prototype.splice\n\n难点\n\n*   截取长度和替换长度的比较，不同情况\n\n```js\n    Array.prototype.sx_splice = function (start, length, ...values) {\nif (length === 0) return []\nlength = start + length > this.length - 1 ? this.length - start : length\nconsole.log(length)\nconst res = [], tempArr = [...this]\n    for (let i = start; i < start + values.length; i++) {\nthis[i] = values[i - start]\n}\nthis.length = start + values.length\n    if (values.length < length) {\n    const cha = length - values.length\n    console.log(cha)\n        for (let i = start + values.length; i < tempArr.length; i++) {\n    this[i] = tempArr[i + cha]\n}\nthis.length = this.length - cha\n}\n    if (values.length > length) {\n        for (let i = start + length; i < tempArr.length; i++) {\n        this.push(tempArr[i])\n    }\n}\n    for (let i = start; i < start + length; i++) {\n    res.push(tempArr[i])\n}\nreturn res\n}\n```\n\n### 29、Object.assign\n\n难点\n\n*   assign接收多个对象，并将多个对象合成一个对象\n*   这些对象如果有重名属性，以后来的对象属性值为准\n*   assign返回一个对象，`这个对象 === 第一个对象`\n\n```js\n    Object.prototype.sx_assign = function (target, ...args) {\n        if (target === null || target === undefined) {\n        throw new TypeError('Cannot convert undefined or null to object')\n    }\n    target = Object(target)\n    \n        for (let nextObj of args) {\n            for (let key in nextObj) {\n            nextObj.hasOwnProperty(key) && (target[key] = nextObj[key])\n        }\n    }\n    return target\n}\n\nconst testa = { name: '林三心' }\nconst testb = { name: 'sunshine_lin', age: 22 }\nconst testc = { age: 18, gender: '男' }\n\nconst testd = Object.sx_assign(testa, testb, testc)\nconsole.log(testd) // { name: 'sunshine_lin', age: 18, gender: '男' }\nconsole.log(testa === testd) // true\n```\n\n### 30、Function.prototype.bind\n\n难点：\n\n*   bind是返回一个函数，而不是执行结果\n*   bind返回的函数，拿来当做构造函数，该怎么处理\n\n```javascript\n    Function.prototype.sx_bind = function (obj, ...args) {\n    obj = obj || window\n    \n    // Symbol是唯一的，防止重名key\n    const fn = Symbol()\n    obj[fn] = this\n    const _this = this\n    \n        const res = function (...innerArgs) {\n        console.log(this, _this)\n            if (this instanceof _this) {\n            this[fn] = _this\n            this[fn](...[...args, ...innerArgs])\n        delete this[fn]\n            } else {\n            obj[fn](...[...args, ...innerArgs])\n        delete obj[fn]\n    }\n}\nres.prototype = Object.create(this.prototype)\nreturn res\n}\n```\n\n结语\n--\n\n如果你觉得此文对你有一丁点帮助，点个赞，鼓励一下林三心哈哈。\n\n**如果你想一起学习前端或者摸鱼，那你可以加我，加入我的摸鱼学习群，点击这里** ---> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n**如果你是有其他目的的，别加我，我不想跟你交朋友，我只想简简单单学习前端，不想搞一些有的没的！！！**",
	"selfDefined": "likes:946,comments:0,collects:1400,likes:34978"
}