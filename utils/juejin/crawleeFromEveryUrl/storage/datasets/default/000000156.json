{
	"title": "「百毒不侵」面试官最喜欢问的14种Vue修饰符",
	"author": "Sunshine_Lin",
	"publishTime": "2021-07-06",
	"readTime": "阅读3分钟",
	"tags": "[\"面试\",\"Vue.js中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，众所周知，修饰符也是Vue的重要组成成分之一，利用好修饰符可以大大地提高开发的效率，接下来给大家介绍一下面试官最喜欢问的13种Vue修饰符 1lazy lazy修饰符作用是",
	"article": "「本文已参与好文召集令活动，点击查看：[后端、大前端双赛道投稿，2万元奖池等你挑战！](https://juejin.cn/post/6978685539985653767 \"https://juejin.cn/post/6978685539985653767\")」\n\n前言\n--\n\n大家好，我是林三心，众所周知，`修饰符`也是Vue的重要组成成分之一，利用好`修饰符`可以大大地提高开发的效率，接下来给大家介绍一下`面试官最喜欢问的13种Vue修饰符`\n\n![image.png](/images/jueJin/b0eac9340c824f5.png)\n\n1.lazy\n------\n\n`lazy`修饰符作用是，改变输入框的值时value不会改变，当光标离开输入框时，`v-model`绑定的值value才会改变\n\n```js\n<input type=\"text\" v-model.lazy=\"value\">\n<div>{{value}}</div>\n\n    data() {\n        return {\n        value: '222'\n    }\n}\n```\n\n![lazy1.gif](/images/jueJin/746b22195638467.png)\n\n2.trim\n------\n\n`trim`修饰符的作用类似于JavaScript中的`trim()`方法，作用是把`v-model`绑定的值的首尾空格给过滤掉。\n\n```js\n<input type=\"text\" v-model.trim=\"value\">\n<div>{{value}}</div>\n\n    data() {\n        return {\n        value: '222'\n    }\n}\n```\n\n![number.gif](/images/jueJin/7416025f0331406.png)\n\n3.number\n--------\n\n`number`修饰符的作用是将值转成数字，但是先输入字符串和先输入数字，是两种情况\n\n```js\n<input type=\"text\" v-model.number=\"value\">\n<div>{{value}}</div>\n\n    data() {\n        return {\n        value: '222'\n    }\n}\n```\n\n> 先输入数字的话，只取前面数字部分 ![trim.gif](/images/jueJin/322016b98d2c49f.png)\n\n> 先输入字母的话，`number`修饰符无效\n\n![number2.gif](/images/jueJin/c3ae0a87592447d.png)\n\n4.stop\n------\n\n`stop`修饰符的作用是阻止冒泡\n\n```js\n<div @click=\"clickEvent(2)\" style=\"width:300px;height:100px;background:red\">\n<button @click.stop=\"clickEvent(1)\">点击</button>\n</div>\n\n    methods: {\n        clickEvent(num) {\n        不加 stop 点击按钮输出 1 2\n        加了 stop 点击按钮输出 1\n        console.log(num)\n    }\n}\n```\n\n5.capture\n---------\n\n事件默认是由里往外`冒泡`，`capture`修饰符的作用是反过来，由外网内`捕获`\n\n```js\n<div @click.capture=\"clickEvent(2)\" style=\"width:300px;height:100px;background:red\">\n<button @click=\"clickEvent(1)\">点击</button>\n</div>\n\n    methods: {\n        clickEvent(num) {\n        不加 capture 点击按钮输出 1 2\n        加了 capture 点击按钮输出 2 1\n        console.log(num)\n    }\n}\n```\n\n6.self\n------\n\n`self`修饰符作用是，只有点击事件绑定的本身才会触发事件\n\n```js\n<div @click.self=\"clickEvent(2)\" style=\"width:300px;height:100px;background:red\">\n<button @click=\"clickEvent(1)\">点击</button>\n</div>\n\n    methods: {\n        clickEvent(num) {\n        不加 self 点击按钮输出 1 2\n        加了 self 点击按钮输出 1 点击div才会输出 2\n        console.log(num)\n    }\n}\n```\n\n7.once\n------\n\n`once`修饰符的作用是，事件只执行一次\n\n```js\n<div @click.once=\"clickEvent(2)\" style=\"width:300px;height:100px;background:red\">\n<button @click=\"clickEvent(1)\">点击</button>\n</div>\n\n    methods: {\n        clickEvent(num) {\n        不加 once 多次点击按钮输出 1\n        加了 once 多次点击按钮只会输出一次 1\n        console.log(num)\n    }\n}\n```\n\n8.prevent\n---------\n\n`prevent`修饰符的作用是阻止默认事件（例如a标签的跳转）\n\n```js\n<a href=\"#\" @click.prevent=\"clickEvent(1)\">点我</a>\n\n    methods: {\n        clickEvent(num) {\n        不加 prevent 点击a标签 先跳转然后输出 1\n        加了 prevent 点击a标签 不会跳转只会输出 1\n        console.log(num)\n    }\n}\n```\n\n9.native\n--------\n\n`native`修饰符是加在自定义组件的事件上，保证事件能执行\n\n```js\n执行不了\n<My-component @click=\"shout(3)\"></My-component>\n\n可以执行\n<My-component @click.native=\"shout(3)\"></My-component>\n```\n\n10.left，right，middle\n--------------------\n\n这三个修饰符是鼠标的左中右按键触发的事件\n\n```js\n<button @click.middle=\"clickEvent(1)\"  @click.left=\"clickEvent(2)\"  @click.right=\"clickEvent(3)\">点我</button>\n\n    methods: {\n    点击中键输出1\n    点击左键输出2\n    点击右键输出3\n        clickEvent(num) {\n        console.log(num)\n    }\n}\n```\n\n11.passive\n----------\n\n当我们在监听元素滚动事件的时候，会一直触发onscroll事件，在pc端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符\n\n```js\n<div @scroll.passive=\"onScroll\">...</div>\n```\n\n12.camel\n--------\n\n```js\n不加camel viewBox会被识别成viewbox\n<svg :viewBox=\"viewBox\"></svg>\n\n加了canmel viewBox才会被识别成viewBox\n<svg :viewBox.camel=\"viewBox\"></svg>\n```\n\n13.sync\n-------\n\n当`父组件`传值进`子组件`，子组件想要改变这个值时，可以这么做\n\n```js\n父组件里\n<children :foo=\"bar\" @update:foo=\"val => bar = val\"></children>\n\n子组件里\nthis.$emit('update:foo', newValue)\n```\n\n`sync`修饰符的作用就是，可以简写：\n\n```js\n父组件里\n<children :foo.sync=\"bar\"></children>\n\n子组件里\nthis.$emit('update:foo', newValue)\n```\n\n14.keyCode\n----------\n\n当我们这么写事件的时候，无论按什么按钮都会触发事件\n\n```js\n<input type=\"text\" @keyup=\"shout(4)\">\n```\n\n那么想要限制成某个按键触发怎么办？这时候`keyCode`修饰符就派上用场了\n\n```js\n<input type=\"text\" @keyup.keyCode=\"shout(4)\">\n```\n\nVue提供的keyCode：\n\n```js\n//普通键\n.enter\n.tab\n.delete //(捕获“删除”和“退格”键)\n.space\n.esc\n.up\n.down\n.left\n.right\n//系统修饰键\n.ctrl\n.alt\n.meta\n.shift\n```\n\n例如（具体的键码请看[键码对应表](https://link.juejin.cn?target=https%3A%2F%2Fzhidao.baidu.com%2Fquestion%2F266291349.html \"https://zhidao.baidu.com/question/266291349.html\")）\n\n```js\n按 ctrl 才会触发\n<input type=\"text\" @keyup.ctrl=\"shout(4)\">\n\n也可以鼠标事件+按键\n<input type=\"text\" @mousedown.ctrl.=\"shout(4)\">\n\n可以多按键触发 例如 ctrl + 67\n<input type=\"text\" @keyup.ctrl.67=\"shout(4)\">\n```\n\n结语\n--\n\n我的专栏已更新：\n\n*   [Vue源码解析](https://juejin.cn/column/6969563635194527758 \"https://juejin.cn/column/6969563635194527758\")\n*   [leetcode题目解析](https://juejin.cn/column/6979408694786129928 \"https://juejin.cn/column/6979408694786129928\")\n*   [Element源码解析](https://juejin.cn/column/6979408526711980069 \"https://juejin.cn/column/6979408526711980069\")\n*   [面试——百毒不侵](https://juejin.cn/column/6979410414513700878 \"https://juejin.cn/column/6979410414513700878\")\n\n> 如果你觉得此文对你有一丁点帮助，点个赞，鼓励一下林三心哈哈。或者加入我的群哈哈，咱们一起摸鱼一起学习 : meron857287645",
	"selfDefined": "likes:589,comments:0,collects:942,likes:28688"
}