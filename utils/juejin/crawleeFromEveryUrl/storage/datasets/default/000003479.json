{
	"title": "用JS开发跨平台桌面应用，从原理到实践",
	"author": "",
	"publishTime": "2019-06-10",
	"readTime": "阅读31分钟",
	"tags": "[\"JavaScript\",\"Electron中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "使用Electron开发客户端程序已经有一段时间了，整体感觉还是非常不错的，其中也遇到了一些坑点，本文是从【运行原理】到【实际应用】对Electron进行一次系统性的总结。【多图，长文预警～】 本文所有实例代码均在我的github electron-react上，结合代码阅读文…",
	"article": "导读\n--\n\n使用`Electron`开发客户端程序已经有一段时间了，整体感觉还是非常不错的，其中也遇到了一些坑点，本文是从【运行原理】到【实际应用】对`Electron`进行一次系统性的总结。【多图，长文预警～】\n\n本文所有实例代码均在我的[github electron-react](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FConardLi%2Felectron-react \"https://github.com/ConardLi/electron-react\")上，结合代码阅读文章效果更佳。另外`electron-react`还可作为使用`Electron + React + Mobx + Webpack`技术栈的脚手架工程。\n\n一、桌面应用程序\n--------\n\n![](/images/jueJin/16b3d1c9782ebcc.png)\n\n> 桌面应用程序，又称为 GUI 程序（Graphical User Interface），但是和 GUI 程序也有一些区别。桌面应用程序 将 GUI 程序从GUI 具体为“桌面”，使冷冰冰的像块木头一样的电脑概念更具有 人性化，更生动和富有活力。\n\n我们电脑上使用的各种客户端程序都属于桌面应用程序，近年来`WEB`和移动端的兴起让桌面程序渐渐暗淡，但是在某些日常功能或者行业应用中桌面应用程序仍然是必不可少的。\n\n传统的桌面应用开发方式，一般是下面两种：\n\n### 1.1 原生开发\n\n直接将语言编译成可执行文件，直接调用系统`API`，完成UI绘制等。这类开发技术，有着较高的运行效率，但一般来说，开发速度较慢，技术要求较高，例如：\n\n*   使用`C++ / MFC`开发`Windows`应用\n*   使用`Objective-C`开发`MAC`应用\n\n### 1.2 托管平台\n\n一开始就有本地开发和UI开发。一次编译后，得到中间文件，通过平台或虚机完成二次加载编译或解释运行。运行效率低于原生编译，但平台优化后，其效率也是比较可观的。就开发速度方面，比原生编译技术要快一些。例如：\n\n*   使用`C# / .NET Framework`(只能开发`Windows应用`)\n*   `Java / Swing`\n\n不过，上面两种对前端开发人员太不友好了，基本是前端人员不会涉及的领域，但是在这个【大前端😅】的时代，前端开发者正在想方设法涉足各个领域，使用`WEB`技术开发客户端的方式横空出世。\n\n### 1.3 WEB开发\n\n使用`WEB`技术进行开发，利用浏览器引擎完成`UI`渲染，利用`Node.js`实现服务器端`JS`编程并可以调用系统`API`，可以把它想像成一个套了一个客户端外壳的`WEB`应用。\n\n在界面上，`WEB`的强大生态为`UI`带来了无限可能，并且开发、维护成本相对较低，有`WEB`开发经验的前端开发者很容易上手进行开发。\n\n本文就来着重介绍使用`WEB`技术开发客户端程序的技术之一【`electron`】\n\n二、Electron\n----------\n\n![](/images/jueJin/16b3d1c918263a3.png)\n\n`Electron`是由`Github`开发，用`HTML，CSS`和`JavaScript`来构建跨平台桌面应用程序的一个开源库。 `Electron`通过将`Chromium`和`Node.js`合并到同一个运行时环境中，并将其打包为`Mac，Windows`和`Linux`系统下的应用来实现这一目的。\n\n### 2.1 使用Electron开发的理由：\n\n*   使用具有强大生态的`Web`技术进行开发，开发成本低，可扩展性强，更炫酷的`UI`\n*   跨平台，一套代码可打包为`Windows、Linux、Mac`三套软件，且编译快速\n*   可直接在现有`Web`应用上进行扩展，提供浏览器不具备的能力\n*   你是一个前端👨💻～\n\n当然，我们也要认清它的缺点：性能比原生桌面应用要低，最终打包后的应用比原生应用大很多。\n\n### 2.2 开发体验\n\n**兼容性**\n\n虽然你还在用`WEB`技术进行开发，但是你不用再考虑兼容性问题了，你只需要关心你当前使用`Electron`的版本对应`Chrome`的版本，一般情况下它已经足够新来让你使用最新的`API`和语法了，你还可以手动升级`Chrome`版本。同样的，你也不用考虑不同浏览器带的样式和代码兼容问题。\n\n**Node环境**\n\n这可能是很多前端开发者曾经梦想过的功能，在`WEB`界面中使用`Node.js`提供的强大`API`，这意味着你在`WEB`页面直接可以操作文件，调用系统`API`，甚至操作数据库。当然，除了完整的`Node API`，你还可以使用额外的几十万个`npm`模块。\n\n**跨域**\n\n你可以直接使用`Node`提供的`request`模块进行网络请求，这意味着你无需再被跨域所困扰。\n\n**强大的扩展性**\n\n借助`node-ffi`，为应用程序提供强大的扩展性（后面的章节会详细介绍）。\n\n### 2.3 谁在用Electron\n\n![](/images/jueJin/16b3d1c91810fbd.png)\n\n现在市面上已经有非常多的应用在使用`Electron`进行开发了，包括我们熟悉的`VS Code`客户端、`GitHub`客户端、`Atom`客户端等等。印象很深的，去年迅雷在发布迅雷X`10.1`时的文案：\n\n> 从迅雷X 10.1版本开始，我们采用Electron软件框架完全重写了迅雷主界面。使用新框架的迅雷X可以完美支持2K、4K等高清显示屏，界面中的文字渲染也更加清晰锐利。从技术层面来说，新框架的界面绘制、事件处理等方面比老框架更加灵活高效，因此界面的流畅度也显著优于老框架的迅雷。至于具体提升有多大？您一试便知。\n\n你可以打开`VS Code`，点击【帮助】【切换开发人员工具】来调试`VS Code`客户端的界面。\n\n![](/images/jueJin/16b3d1c91990f81.png)\n\n三、Electron运行原理\n--------------\n\n![](/images/jueJin/16b3d1c977d8d72.png)\n\n`Electron` 结合了 `Chromium`、`Node.js` 和用于调用操作系统本地功能的`API`。\n\n### 3.1 Chromium\n\n`Chromium`是`Google`为发展`Chrome`浏览器而启动的开源项目，`Chromium`相当于`Chrome`的工程版或称实验版，新功能会率先在`Chromium`上实现，待验证后才会应用在`Chrome`上，故`Chrome`的功能会相对落后但较稳定。\n\n`Chromium`为`Electron`提供强大的`UI`能力，可以在不考虑兼容性的情况下开发界面。\n\n### 3.2 Node.js\n\n`Node.js`是一个让`JavaScript`运行在服务端的开发平台，`Node`使用事件驱动，非阻塞`I/O`模型而得以轻量和高效。\n\n单单靠`Chromium`是不能具备直接操作原生`GUI`能力的，`Electron`内集成了`Nodejs`，这让其在开发界面的同时也有了操作系统底层`API`的能力，`Nodejs` 中常用的 `Path、fs、Crypto` 等模块在 `Electron` 可以直接使用。\n\n### 3.3 系统API\n\n为了提供原生系统的`GUI`支持，`Electron`内置了原生应用程序接口，对调用一些系统功能，如调用系统通知、打开系统文件夹提供支持。\n\n在开发模式上，`Electron`在调用系统`API`和绘制界面上是分离开发的，下面我们来看看`Electron`关于进程如何划分。\n\n### 3.4 主进程\n\n`Electron`区分了两种进程：主进程和渲染进程，两者各自负责自己的职能。\n\n![](/images/jueJin/16b3d1c9796221e.png)\n\n`Electron` 运行`package.json`的 `main` 脚本的进程被称为主进程。一个 `Electron` 应用总是有且只有一个主进程。\n\n**职责:**\n\n*   创建渲染进程（可多个）\n*   控制了应用生命周期（启动、退出`APP`以及对`APP`做一些事件监听）\n*   调用系统底层功能、调用原生资源\n\n**可调用的API:**\n\n*   `Node.js API`\n*   `Electron`提供的主进程`API`（包括一些系统功能和`Electron`附加功能）\n\n### 3.5 渲染进程\n\n由于 `Electron` 使用了 `Chromium` 来展示 `web` 页面，所以 `Chromium` 的多进程架构也被使用到。 每个`Electron` 中的 `web`页面运行在它自己的渲染进程中。\n\n> 主进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n\n你可以把渲染进程想像成一个浏览器窗口，它能存在多个并且相互独立，不过和浏览器不同的是，它能调用`Node API`。\n\n**职责:**\n\n*   用`HTML`和`CSS`渲染界面\n*   用`JavaScript`做一些界面交互\n\n**可调用的API:**\n\n*   `DOM API`\n*   `Node.js API`\n*   `Electron`提供的渲染进程`API`\n\n四、Electron基础\n------------\n\n### 4.1 Electron API\n\n在上面的章节我们提到，渲染进和主进程分别可调用的`Electron API`。所有`Electron`的`API`都被指派给一种进程类型。 许多`API`只能被用于主进程中，有些`API`又只能被用于渲染进程，又有一些主进程和渲染进程中都可以使用。\n\n你可以通过如下方式获取`Electron API`\n\n```\nconst { BrowserWindow, ... } = require('electron')\n```\n\n下面是一些常用的`Electron API`：\n\n![](/images/jueJin/16b3d1c9d2e22a4.png)\n\n在后面的章节我们会选择其中常用的模块进行详细介绍。\n\n### 4.2 使用 Node.js 的 API\n\n![](/images/jueJin/16b3d1ca5937a1c.png)\n\n你可以同时在`Electron`的主进程和渲染进程使用`Node.js API`，)所有在`Node.js`可以使用的`API`，在`Electron`中同样可以使用。\n\n```\nimport {shell} from 'electron';\nimport os from 'os';\n\n    document.getElementById('btn').addEventListener('click', () => {\n    shell.showItemInFolder(os.homedir());\n    })\n```\n\n> 有一个非常重要的提示: 原生Node.js模块 (即指，需要编译源码过后才能被使用的模块) 需要在编译后才能和Electron一起使用。\n\n### 4.3 进程通信\n\n主进程和渲染进程虽然拥有不同的职责，然是他们也需要相互协作，互相通讯。\n\n> 例如：在`web`页面管理原生`GUI`资源是很危险的，会很容易泄露资源。所以在`web`页面，不允许直接调用原生`GUI`相关的`API`。渲染进程如果想要进行原生的`GUI`操作，就必须和主进程通讯，请求主进程来完成这些操作。\n\n![](/images/jueJin/16b3d1ca6198ef0.png)\n\n### 4.4 渲染进程向主进程通信\n\n`ipcRenderer` 是一个 `EventEmitter` 的实例。 你可以使用它提供的一些方法，从渲染进程发送同步或异步的消息到主进程。 也可以接收主进程回复的消息。\n\n在渲染进程引入`ipcRenderer`：\n\n```\nimport { ipcRenderer } from 'electron';\n```\n\n异步发送：\n\n通过 `channel` 发送同步消息到主进程，可以携带任意参数。\n\n> 在内部，参数会被序列化为 `JSON`，因此参数对象上的函数和原型链不会被发送。\n\n```\nipcRenderer.send('async-render', '我是来自渲染进程的异步消息');\n```\n\n同步发送：\n\n```\nconst msg = ipcRenderer.sendSync('sync-render', '我是来自渲染进程的同步消息');\n```\n\n> 注意: 发送同步消息将会阻塞整个渲染进程，直到收到主进程的响应。\n\n主进程监听消息：\n\n`ipcMain`模块是`EventEmitter`类的一个实例。 当在主进程中使用时，它处理从渲染器进程（网页）发送出来的异步和同步信息。 从渲染器进程发送的消息将被发送到该模块。\n\n`ipcMain.on`：监听 `channel`，当接收到新的消息时 `listener` 会以 `listener(event, args...)` 的形式被调用。\n\n```\n    ipcMain.on('sync-render', (event, data) => {\n    console.log(data);\n    });\n```\n\n### 4.5 主进程向渲染进程通信\n\n在主进程中可以通过`BrowserWindow`的`webContents`向渲染进程发送消息，所以，在发送消息前你必须先找到对应渲染进程的`BrowserWindow`对象。：\n\n```\nconst mainWindow = BrowserWindow.fromId(global.mainId);\nmainWindow.webContents.send('main-msg', `ConardLi]`)\n```\n\n根据消息来源发送：\n\n在`ipcMain`接受消息的回调函数中，通过第一个参数`event`的属性`sender`可以拿到消息来源渲染进程的`webContents`对象，我们可以直接用此对象回应消息。\n\n```\n    ipcMain.on('sync-render', (event, data) => {\n    console.log(data);\n    event.sender.send('main-msg', '主进程收到了渲染进程的【异步】消息！')\n    });\n```\n\n渲染进程监听：\n\n`ipcRenderer.on`:监听 `channel`, 当新消息到达，将通过`listener(event, args...)`调用 `listener`。\n\n```\n    ipcRenderer.on('main-msg', (event, msg) => {\n    console.log(msg);\n    })\n```\n\n### 4.6 通信原理\n\n`ipcMain` 和 `ipcRenderer` 都是 `EventEmitter` 类的一个实例。`EventEmitter` 类是 `NodeJS` 事件的基础，它由 `NodeJS` 中的 `events` 模块导出。\n\n`EventEmitter` 的核心就是事件触发与事件监听器功能的封装。它实现了事件模型需要的接口， 包括 `addListener，removeListener`, `emit` 及其它工具方法. 同原生 `JavaScript` 事件类似， 采用了发布/订阅(观察者)的方式， 使用内部 `_events` 列表来记录注册的事件处理器。\n\n我们通过 `ipcMain`和`ipcRenderer` 的 `on、send` 进行监听和发送消息都是 `EventEmitter` 定义的相关接口。\n\n### 4.7 remote\n\n`remote` 模块为渲染进程（web页面）和主进程通信（`IPC`）提供了一种简单方法。 使用 `remote` 模块, 你可以调用 `main` 进程对象的方法, 而不必显式发送进程间消息, 类似于 `Java` 的 `RMI` 。\n\n```\nimport { remote } from 'electron';\n\nremote.dialog.showErrorBox('主进程才有的dialog模块', '我是使用remote调用的')\n```\n\n![](/images/jueJin/16b3d1de209ac27.png)\n\n但实际上，我们在调用远程对象的方法、函数或者通过远程构造函数创建一个新的对象，实际上都是在发送一个同步的进程间消息。\n\n在上面通过 `remote` 模块调用 `dialog` 的例子里。我们在渲染进程中创建的 `dialog` 对象其实并不在我们的渲染进程中，它只是让主进程创建了一个 `dialog` 对象，并返回了这个相对应的远程对象给了渲染进程。\n\n### 4.8 渲染进程间通信\n\n`Electron`并没有提供渲染进程之间相互通信的方式，我们可以在主进程中建立一个消息中转站。\n\n渲染进程之间通信首先发送消息到主进程，主进程的中转站接收到消息后根据条件进行分发。\n\n### 4.9 渲染进程数据共享\n\n在两个渲染进程间共享数据最简单的方法是使用浏览器中已经实现的`HTML5 API`。 其中比较好的方案是用`Storage API`， `localStorage，sessionStorage` 或者 `IndexedDB。`\n\n就像在浏览器中使用一样，这种存储相当于在应用程序中永久存储了一部分数据。有时你并不需要这样的存储，只需要在当前应用程序的生命周期内进行一些数据的共享。这时你可以用 `Electron` 内的 `IPC` 机制实现。\n\n将数据存在主进程的某个全局变量中，然后在多个渲染进程中使用 `remote` 模块来访问它。\n\n![](/images/jueJin/16b3d1de212d8b5.png)\n\n在主进程中初始化全局变量：\n\n```\nglobal.mainId = ...;\nglobal.device = {...};\nglobal.__dirname = __dirname;\nglobal.myField = { name: 'ConardLi' };\n```\n\n在渲染进程中读取：\n\n```\nimport { ipcRenderer, remote } from 'electron';\n\nconst { getGlobal } = remote;\n\nconst mainId = getGlobal('mainId')\nconst dirname = getGlobal('__dirname')\nconst deviecMac = getGlobal('device').mac;\n```\n\n在渲染进程中改变：\n\n```\ngetGlobal('myField').name = 'code秘密花园';\n```\n\n多个渲染进程共享同一个主进程的全局变量，这样即可达到渲染进程数据共享和传递的效果。\n\n五、窗口\n----\n\n### 5.1 BrowserWindow\n\n主进程模块`BrowserWindow`用于创建和控制浏览器窗口。\n\n```\n    mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 800,\n    // ...\n    });\n    mainWindow.loadURL('http://www.conardli.top/');\n```\n\n你可以在[这里](https://link.juejin.cn?target=https%3A%2F%2Felectronjs.org%2Fdocs%2Fapi%2Fbrowser-window%23new-browserwindowoptions \"https://electronjs.org/docs/api/browser-window#new-browserwindowoptions\")查看它所有的构造参数。\n\n![](/images/jueJin/16b3d1ccd2ea682.png)\n\n### 5.2 无框窗口\n\n> 无框窗口是没有镶边的窗口，窗口的部分（如工具栏）不属于网页的一部分。\n\n在`BrowserWindow`的构造参数中，将`frame`设置为`false`可以指定窗口为无边框窗口，将工具栏隐藏后，就会产生两个问题：\n\n*   1.窗口控制按钮（最小化、全屏、关闭按钮）会被隐藏\n*   2.无法拖拽移动窗口\n\n可以通过指定`titleBarStyle`选项来再将工具栏按钮显示出来，将其设置为`hidden`表示返回一个隐藏标题栏的全尺寸内容窗口，在左上角仍然有标准的窗口控制按钮。\n\n```\n    new BrowserWindow({\n    width: 200,\n    height: 200,\n    titleBarStyle: 'hidden',\n    frame: false\n    });\n```\n\n### 5.3 窗口拖拽\n\n默认情况下, 无边框窗口是不可拖拽的。我们可以在界面中通过`CSS`属性`-webkit-app-region: drag`手动制定拖拽区域。\n\n在无框窗口中, 拖动行为可能与选择文本冲突，可以通过设定`-webkit-user-select: none;`禁用文本选择：\n\n```\n    .header {\n    -webkit-user-select: none;\n    -webkit-app-region: drag;\n}\n```\n\n> 相反的，在可拖拽区域内部设置 `-webkit-app-region: no-drag`则可以指定特定不可拖拽区域。\n\n### 5.4 透明窗口\n\n通过将`transparent`选项设置为`true`, 还可以使无框窗口透明:\n\n```\n    new BrowserWindow({\n    transparent: true,\n    frame: false\n    });\n```\n\n### 5.5 Webview\n\n使用 `webview` 标签在`Electron` 应用中嵌入 \"外来\" 内容。外来内容包含在 `webview` 容器中。 应用中的嵌入页面可以控制外来内容的布局和重绘。\n\n与 `iframe` 不同, `webview` 在与应用程序不同的进程中运行。它与您的网页没有相同的权限, 应用程序和嵌入内容之间的所有交互都将是异步的。\n\n六、对话框\n-----\n\n`dialog` 模块提供了`api`来展示原生的系统对话框，例如打开文件框，`alert`框，所以`web`应用可以给用户带来跟系统应用相同的体验。\n\n> 注意：dialog是主进程模块，想要在渲染进程调用可以使用remote\n\n![](/images/jueJin/16b3d1cd641a098.png)\n\n### 6.1 错误提示\n\n`dialog.showErrorBox`用于显示一个显示错误消息的模态对话框。\n\n```\nremote.dialog.showErrorBox('错误', '这是一个错误弹框！')\n```\n\n### 6.2 对话框\n\n`dialog.showErrorBox`用于调用系统对话框，可以为指定几种不同的类型： \"`none`\", \"`info`\", \"`error`\", \"`question`\" 或者 \"`warning`\"。\n\n> 在 Windows 上, \"question\" 与\"info\"显示相同的图标, 除非你使用了 \"icon\" 选项设置图标。 在 macOS 上, \"warning\" 和 \"error\" 显示相同的警告图标\n\n```\n    remote.dialog.showMessageBox({\n    type: 'info',\n    title: '提示信息',\n    message: '这是一个对话弹框！',\nbuttons: ['确定', '取消']\n    }, (index) => {\n    this.setState({ dialogMessage: `【你点击了${index ? '取消' : '确定'}！！】` })\n    })\n```\n\n### 6.3 文件框\n\n`dialog.showOpenDialog`用于打开或选择系统目录。\n\n```\n    remote.dialog.showOpenDialog({\nproperties: ['openDirectory', 'openFile']\n    }, (data) => {\n    this.setState({ filePath: `【选择路径：${data[0]}】 ` })\n    })\n```\n\n### 6.4 信息框\n\n这里推荐直接使用`HTML5 API`，它只能在渲染器进程中使用。\n\n```\n    let options = {\n    title: '信息框标题',\n    body: '我是一条信息～～～',\n}\nlet myNotification = new window.Notification(options.title, options)\n    myNotification.onclick = () => {\n    this.setState({ message: '【你点击了信息框！！】' })\n}\n```\n\n七、系统\n----\n\n### 7.1 获取系统信息\n\n![](/images/jueJin/16b3d1cebfd523b.png)\n\n通过`remote`获取到主进程的`process`对象，可以获取到当前应用的各个版本信息：\n\n*   `process.versions.electron`：`electron`版本信息\n*   `process.versions.chrome`：`chrome`版本信息\n*   `process.versions.node`：`node`版本信息\n*   `process.versions.v8`：`v8`版本信息\n\n获取当前应用根目录：\n\n```\nremote.app.getAppPath()\n```\n\n使用`node`的`os`模块获取当前系统根目录：\n\n```\nos.homedir();\n```\n\n### 7.2 复制粘贴\n\n![](/images/jueJin/16b3d1d00a0313f.png)\n\n`Electron`提供的`clipboard`在渲染进程和主进程都可使用，用于在系统剪贴板上执行复制和粘贴操作。\n\n以纯文本的形式写入剪贴板：\n\n```\nclipboard.writeText(text[, type])\n```\n\n以纯文本的形式获取剪贴板的内容：\n\n```\nclipboard.readText([type])\n```\n\n### 7.3 截图\n\n`desktopCapturer`用于从桌面捕获音频和视频的媒体源的信息。它只能在渲染进程中被调用。\n\n![](/images/jueJin/16b3d1d058a5bec.png)\n\n下面的代码是一个获取屏幕截图并保存的实例：\n\n```\n    getImg = () => {\n    this.setState({ imgMsg: '正在截取屏幕...' })\n    const thumbSize = this.determineScreenShotSize()\nlet options = { types: ['screen'], thumbnailSize: thumbSize }\n    desktopCapturer.getSources(options, (error, sources) => {\n    if (error) return console.log(error)\n        sources.forEach((source) => {\n            if (source.name === 'Entire screen' || source.name === 'Screen 1') {\n            const screenshotPath = path.join(os.tmpdir(), 'screenshot.png')\n                fs.writeFile(screenshotPath, source.thumbnail.toPNG(), (error) => {\n                if (error) return console.log(error)\n                shell.openExternal(`file://${screenshotPath}`)\n                this.setState({ imgMsg: `截图保存到: ${screenshotPath}` })\n                })\n            }\n            })\n            })\n        }\n        \n            determineScreenShotSize = () => {\n            const screenSize = screen.getPrimaryDisplay().workAreaSize\n            const maxDimension = Math.max(screenSize.width, screenSize.height)\n                return {\n                width: maxDimension * window.devicePixelRatio,\n                height: maxDimension * window.devicePixelRatio\n            }\n        }\n        \n```\n\n八、菜单\n----\n\n应用程序的菜单可以帮助我们快捷的到达某一功能，而不借助客户端的界面资源，一般菜单分为两种：\n\n*   应用程序菜单：位于应用程序顶部，在全局范围内都能使用\n*   上下文菜单：可自定义任意页面显示，自定义调用，如右键菜单\n\n`Electron`为我们提供了`Menu`模块用于创建本机应用程序菜单和上下文菜单，它是一个主进程模块。\n\n你可以通过`Menu`的静态方法`buildFromTemplate(template)`，使用自定义菜单模版来构造一个菜单对象。\n\n`template`是一个`MenuItem`的数组，我们来看看`MenuItem`的几个重要参数：\n\n*   `label`：菜单显示的文字\n*   `click`：点击菜单后的事件处理函数\n*   `role`：系统预定义的菜单，例如`copy`(复制)、`paste`(粘贴)、`minimize`(最小化)...\n*   `enabled`：指示是否启用该项目，此属性可以动态更改\n*   `submenu`：子菜单，也是一个`MenuItem`的数组\n\n> 推荐：最好指定role与标准角色相匹配的任何菜单项，而不是尝试手动实现click函数中的行为。内置role行为将提供最佳的本地体验。\n\n下面的实例是一个简单的额菜单`template`。\n\n```\n    const template = [\n        {\n        label: '文件',\n            submenu: [\n                {\n                label: '新建文件',\n                    click: function () {\n                        dialog.showMessageBox({\n                        type: 'info',\n                        message: '嘿!',\n                        detail: '你点击了新建文件！',\n                        })\n                    }\n                }\n            ]\n            },\n                {\n                label: '编辑',\n                    submenu: [{\n                    label: '剪切',\n                    role: 'cut'\n                        }, {\n                        label: '复制',\n                        role: 'copy'\n                            }, {\n                            label: '粘贴',\n                            role: 'paste'\n                        }]\n                        },\n                            {\n                            label: '最小化',\n                            role: 'minimize'\n                        }\n                    ]\n```\n\n### 8.1 应用程序菜单\n\n使用`Menu`的静态方法`setApplicationMenu`，可创建一个应用程序菜单，在 `Windows` 和 `Linux` 上，`menu`将被设置为每个窗口的顶层菜单。\n\n> 注意：必须在模块ready事件后调用此 API app。\n\n我们可以根据应用程序不同的的生命周期，不同的系统对菜单做不同的处理。\n\n![](/images/jueJin/16b3d1d0717763e.png)\n\n```\n    app.on('ready', function () {\n    const menu = Menu.buildFromTemplate(template)\n    Menu.setApplicationMenu(menu)\n    })\n    \n        app.on('browser-window-created', function () {\n        let reopenMenuItem = findReopenMenuItem()\n        if (reopenMenuItem) reopenMenuItem.enabled = false\n        })\n        \n            app.on('window-all-closed', function () {\n            let reopenMenuItem = findReopenMenuItem()\n            if (reopenMenuItem) reopenMenuItem.enabled = true\n            })\n            \n                if (process.platform === 'win32') {\n                const helpMenu = template[template.length - 1].submenu\n                addUpdateMenuItems(helpMenu, 0)\n            }\n```\n\n### 8.2 上下文菜单\n\n使用`Menu`的实例方法`menu.popup`可自定义弹出上下文菜单。\n\n![](/images/jueJin/16b3d1eeb6466cb.png)\n\n```\nlet m = Menu.buildFromTemplate(template)\n    document.getElementById('menuDemoContainer').addEventListener('contextmenu', (e) => {\n    e.preventDefault()\n    m.popup({ window: remote.getCurrentWindow() })\n    })\n```\n\n### 8.3 快捷键\n\n在菜单选项中，我们可以指定一个`accelerator`属性来指定操作的快捷键：\n\n```\n    {\n    label: '最小化',\n    accelerator: 'CmdOrCtrl+M',\n    role: 'minimize'\n}\n```\n\n另外，我们还可以使用`globalShortcut`来注册全局快捷键。\n\n```\n    globalShortcut.register('CommandOrControl+N', () => {\n        dialog.showMessageBox({\n        type: 'info',\n        message: '嘿!',\n        detail: '你触发了手动注册的快捷键.',\n        })\n        })\n```\n\n> CommandOrControl代表在macOS上为Command键，以及在Linux和Windows上为Control键。\n\n九、打印\n----\n\n很多情况下程序中使用的打印都是用户无感知的。并且想要灵活的控制打印内容，往往需要借助打印机给我们提供的`api`再进行开发，这种开发方式非常繁琐，并且开发难度较大。第一次在业务中用到`Electron`其实就是用到它的打印功能，这里就多介绍一些。\n\n`Electron`提供的打印api可以非常灵活的控制打印设置的显示，并且可以通过html来书写打印内容。`Electron`提供了两种方式进行打印，一种是直接调用打印机打印，一种是打印到`pdf`。\n\n并且有两种对象可以调用打印：\n\n*   通过`window`的`webcontent`对象，使用此种方式需要单独开出一个打印的窗口，可以将该窗口隐藏，但是通信调用相对复杂。\n*   使用页面的`webview`元素调用打印，可以将`webview`隐藏在调用的页面中，通信方式比较简单。\n\n上面两种方式同时拥有`print`和`printToPdf`方法。\n\n![](/images/jueJin/16b3d1d12f9121d.png)\n\n### 9.1 调用系统打印\n\n```\ncontents.print([options], [callback])；\n```\n\n打印配置(options)中只有简单的三个配置：\n\n*   `silent`：打印时是否不展示打印配置（是否静默打印）\n*   `printBackground`：是否打印背景\n*   `deviceName`：打印机设备名称\n\n首先要将我们使用的打印机名称配置好，并且要在调用打印前首先要判断打印机是否可用。\n\n使用`webContents`的`getPrinters`方法可获取当前设备已经配置的打印机列表，注意配置过不是可用，只是在此设备上安装过驱动。\n\n通过`getPrinters`获取到的打印机对象：[electronjs.org/docs/api/st…](https://link.juejin.cn?target=https%3A%2F%2Felectronjs.org%2Fdocs%2Fapi%2Fstructures%2Fprinter-info \"https://electronjs.org/docs/api/structures/printer-info\")\n\n我们这里只管关心两个，`name`和`status`，`status`为`0`时表示打印机可用。\n\n`print`的第二个参数`callback`是用于判断打印任务是否发出的回调，而不是打印任务完成后的回调。所以一般打印任务发出，回调函数即会调用并返回参数`true`。这个回调并不能判断打印是否真的成功了。\n\n```\n    if (this.state.curretnPrinter) {\n        mainWindow.webContents.print({\n        silent: silent, printBackground: true, deviceName: this.state.curretnPrinter\n        }, () => { })\n            } else {\n            remote.dialog.showErrorBox('错误', '请先选择一个打印机！')\n        }\n```\n\n### 9.2 打印到PDF\n\n`printToPdf`的用法基本和`print`相同，但是`print`的配置项非常少，而`printToPdf`则扩展了很多属性。这里翻了一下源码发现还有很多没有被贴进文档的，大概有三十几个，包括可以对打印的margin，打印页眉页脚等进行配置。\n\n```\ncontents.printToPDF(options, callback)\n```\n\n`callback`函数在打印失败或打印成功后调用，可获取打印失败信息或包含`PDF`数据的缓冲区。\n\n```\nconst pdfPath = path.join(os.tmpdir(), 'webviewPrint.pdf');\nconst webview = document.getElementById('printWebview');\nconst renderHtml = '我是被临时插入webview的内容...';\nwebview.executeJavaScript('document.documentElement.innerHTML =`' + renderHtml + '`;');\n    webview.printToPDF({}, (err, data) => {\n    console.log(err, data);\n        fs.writeFile(pdfPath, data, (error) => {\n        if (error) throw error\n        shell.openExternal(`file://${pdfPath}`)\n        this.setState({ webviewPdfPath: pdfPath })\n        });\n        });\n```\n\n> 这个例子中的打印是使用`webview`完成的，通过调用`executeJavaScript`方法可动态向`webview`插入打印内容。\n\n### 9.3 两种打印方案的选择\n\n上面提到，使用`webview`和`webcontent`都可以调用打印功能，使用`webcontent`打印，首先要有一个打印窗口，这个窗口不能随时打印随时创建，比较耗费性能。可以将它在程序运行时启动好，并做好事件监听。\n\n此过程需和调用打印的进行做好通信，大致过程如下：\n\n![](/images/jueJin/16b3d1de2493ff0.png)\n\n可见通信非常繁琐，使用`webview`进行打印可实现同样的效果但是通信方式会变得简单，因为渲染进程和`webview`通信不需要经过主进程，通过如下方式即可：\n\n```\nconst webview = document.querySelector('webview')\n    webview.addEventListener('ipc-message', (event) => {\n    console.log(event.channel)\n    })\n    webview.send('ping')；\n    \n    const {ipcRenderer} = require('electron')\n        ipcRenderer.on('ping', () => {\n        ipcRenderer.sendToHost('pong')\n        })\n```\n\n之前专门为`ELectron`打印写过一个`DEMO`：[electron-print-demo](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FConardLi%2Felectron-print-demo \"https://github.com/ConardLi/electron-print-demo\")有兴趣可以`clone`下来看一下。\n\n### 9.4 打印功能封装\n\n下面是几个针对常用打印功能的工具函数封装。\n\n```\n/**\n* 获取系统打印机列表\n*/\n    export function getPrinters() {\n    let printers = [];\n        try {\n        const contents = remote.getCurrentWindow().webContents;\n        printers = contents.getPrinters();\n            } catch (e) {\n            console.error('getPrintersError', e);\n        }\n        return printers;\n    }\n    /**\n    * 获取系统默认打印机\n    */\n        export function getDefaultPrinter() {\n        return getPrinters().find(element => element.isDefault);\n    }\n    /**\n    * 检测是否安装了某个打印驱动\n    */\n        export function checkDriver(driverMame) {\n        return getPrinters().find(element => (element.options[\"printer-make-and-model\"] || '').includes(driverMame));\n    }\n    /**\n    * 根据打印机名称获取打印机对象\n    */\n        export function getPrinterByName(name) {\n        return getPrinters().find(element => element.name === name);\n    }\n    \n```\n\n十、程序保护\n------\n\n![](/images/jueJin/16b3d1f9e124970.png)\n\n### 10.1 崩溃\n\n崩溃监控是每个客户端程序必备的保护功能，当程序崩溃时我们一般期望做到两件事：\n\n*   1.上传崩溃日志，及时报警\n*   2.监控程序崩溃，提示用户重启程序\n\n`electron`为我们提供给了`crashReporter`来帮助我们记录崩溃日志，我们可以通过`crashReporter.start`来创建一个崩溃报告器：\n\n```\nconst { crashReporter } = require('electron')\n    crashReporter.start({\n    productName: 'YourName',\n    companyName: 'YourCompany',\n    submitURL: 'https://your-domain.com/url-to-submit',\n    uploadToServer: true\n    })\n```\n\n当程序发生崩溃时，崩溃报日志将被储存在临时文件夹中名为`YourName Crashes`的文件文件夹中。`submitURL`用于指定你的崩溃日志上传服务器。 在启动崩溃报告器之前，您可以通过调用`app.setPath('temp', 'my/custom/temp')`API来自定义这些临时文件的保存路径。你还可以通过`crashReporter.getLastCrashReport()`来获取上次崩溃报告的日期和`ID`。\n\n我们可以通过`webContents`的`crashed`来监听渲染进程的崩溃，另外经测试有些主进程的崩溃也会触发该事件。所以我们可以根据主`window`是否被销毁来判断进行不同的重启逻辑，下面是整个崩溃监控的逻辑：\n\n```\nimport { BrowserWindow, crashReporter, dialog } from 'electron';\n// 开启进程崩溃记录\n    crashReporter.start({\n    productName: 'electron-react',\n    companyName: 'ConardLi',\n    submitURL: 'http://xxx.com',  // 上传崩溃日志的接口\n    uploadToServer: false\n    });\n        function reloadWindow(mainWin) {\n            if (mainWin.isDestroyed()) {\n            app.relaunch();\n            app.exit(0);\n                } else {\n                // 销毁其他窗口\n                    BrowserWindow.getAllWindows().forEach((w) => {\n                    if (w.id !== mainWin.id) w.destroy();\n                    });\n                        const options = {\n                        type: 'info',\n                        title: '渲染器进程崩溃',\n                        message: '这个进程已经崩溃.',\n                    buttons: ['重载', '关闭']\n                }\n                    dialog.showMessageBox(options, (index) => {\n                    if (index === 0) mainWin.reload();\n                    else mainWin.close();\n                    })\n                }\n            }\n                export default function () {\n                const mainWindow = BrowserWindow.fromId(global.mainId);\n                    mainWindow.webContents.on('crashed', () => {\n                    const errorMessage = crashReporter.getLastCrashReport();\n                    console.error('程序崩溃了！', errorMessage); // 可单独上传日志\n                    reloadWindow(mainWindow);\n                    });\n                }\n```\n\n### 10.2 最小化到托盘\n\n有的时候我们并不想让用户通过点关闭按钮的时候就关闭程序，而是把程序最小化到托盘，在托盘上做真正的退出操作。\n\n首先要监听窗口的关闭事件，阻止用户关闭操作的默认行为，将窗口隐藏。\n\n```\n    function checkQuit(mainWindow, event) {\n        const options = {\n        type: 'info',\n        title: '关闭确认',\n        message: '确认要最小化程序到托盘吗？',\n    buttons: ['确认', '关闭程序']\n    };\n        dialog.showMessageBox(options, index => {\n            if (index === 0) {\n            event.preventDefault();\n            mainWindow.hide();\n                } else {\n                mainWindow = null;\n                app.exit(0);\n            }\n            });\n        }\n            function handleQuit() {\n            const mainWindow = BrowserWindow.fromId(global.mainId);\n                mainWindow.on('close', event => {\n                event.preventDefault();\n                checkQuit(mainWindow, event);\n                });\n            }\n```\n\n这时程序就再也找不到了，任务托盘中也没有我们的程序，所以我们要先创建好任务托盘，并做好事件监听。\n\n> windows平台使用`ico`文件可以达到更好的效果\n\n```\n    export default function createTray() {\n    const mainWindow = BrowserWindow.fromId(global.mainId);\n    const iconName = process.platform === 'win32' ? 'icon.ico' : 'icon.png'\n    tray = new Tray(path.join(global.__dirname, iconName));\n        const contextMenu = Menu.buildFromTemplate([\n            {\n                label: '显示主界面', click: () => {\n                mainWindow.show();\n                mainWindow.setSkipTaskbar(false);\n            }\n            },\n                {\n                    label: '退出', click: () => {\n                    mainWindow.destroy();\n                    app.quit();\n                }\n                },\n                ])\n                tray.setToolTip('electron-react');\n                tray.setContextMenu(contextMenu);\n            }\n```\n\n十一、扩展能力\n-------\n\n![](/images/jueJin/16b3d1d6acbcded.png)\n\n在很多情况下，你的应用程序要和外部设备进行交互，一般情况下厂商会为你提供硬件设备的开发包，这些开发包基本上都是通过`C++` 编写，在使用`electron`开发的情况下，我们并不具备直接调用`C++`代码的能力，我们可以利用`node-ffi`来实现这一功能。\n\n`node-ffi`提供了一组强大的工具，用于在`Node.js`环境中使用纯`JavaScript`调用动态链接库接口。它可以用来为库构建接口绑定，而不需要使用任何`C++`代码。\n\n> 注意`node-ffi`并不能直接调用`C++`代码，你需要将`C++`代码编译为动态链接库：在 `Windows`下是 `Dll` ，在 `Mac OS`下是 `dylib` `，Linux` 是 `so` 。\n\n> `node-ffi` 加载 `Library`是有限制的，只能处理 `C`风格的 `Library`。\n\n下面是一个简单的实例：\n\n```\nconst ffi = require('ffi');\nconst ref = require('ref');\nconst SHORT_CODE = ref.refType('short');\n\n\n    const DLL = new ffi.Library('test.dll', {\n    Test_CPP_Method: ['int', ['string',SHORT_CODE]],\n    })\n    \n        testCppMethod(str: String, num: number): void {\n            try {\n            const result: any = DLL.Test_CPP_Method(str, num);\n            return result;\n                } catch (error) {\n                console.log('调用失败～',error);\n            }\n        }\n        \n        this.testCppMethod('ConardLi',123);\n```\n\n上面的代码中，我们用`ffi`包装`C++`接口生成的动态链接库`test.dll`，并使用`ref`进行一些类型映射。\n\n使用`JavaScript`调用这些映射方法时，推荐使用`TypeScript`来约定参数类型，因为弱类型的`JavaScript`在调用强类型语言的接口时可能会带来意想不到的风险。\n\n借助这一能力，前端开发工程师也可以在`IOT`领域一展身手了😎～\n\n十二、环境选择\n-------\n\n一般情况下，我们的应用程序可能运行在多套环境下（`production`、`beta`、`uat`、`moke`、`development`...），不同的开发环境可能对应不同的后端接口或者其他配置，我们可以在客户端程序中内置一个简单的环境选择功能来帮助我们更高效的开发。\n\n![](/images/jueJin/16b3d1d71f9463b.png)\n\n具体策略如下：\n\n![](/images/jueJin/16b3d1d745caac2.png)\n\n*   在开发环境中，我们直接进入环境选择页面，读取到选择的环境后进行响应的重定向操作\n*   在菜单保留环境选择入口，以便在开发过程中切换\n\n```\nconst envList = [\"moke\", \"beta\", \"development\", \"production\"];\nexports.envList = envList;\nconst urlBeta = 'https://wwww.xxx-beta.com';\nconst urlDev = 'https://wwww.xxx-dev.com';\nconst urlProp = 'https://wwww.xxx-prop.com';\nconst urlMoke = 'https://wwww.xxx-moke.com';\nconst path = require('path');\nconst pkg = require(path.resolve(global.__dirname, 'package.json'));\nconst build = pkg['build-config'];\n    exports.handleEnv = {\n    build,\n    currentEnv: 'moke',\n        setEnv: function (env) {\n        this.currentEnv = env\n        },\n            getUrl: function () {\n            console.log('env:', build.env);\n                if (build.env === 'production' || this.currentEnv === 'production') {\n                return urlProp;\n                    } else if (this.currentEnv === 'moke') {\n                    return urlMoke;\n                        } else if (this.currentEnv === 'development') {\n                        return urlDev;\n                            } else if (this.currentEnv === \"beta\") {\n                            return urlBeta;\n                        }\n                        },\n                            isDebugger: function () {\n                            return build.env === 'development'\n                        }\n                    }\n```\n\n十三、打包\n-----\n\n最后也是最重要的一步，将写好的代码打包成可运行的`.app`或`.exe`可执行文件。\n\n这里我把打包氛围两部分来做，渲染进程打包和主进程打包。\n\n### 13.1 渲染进程打包和升级\n\n一般情况下，我们的大部分业务逻辑代码是在渲染进程完成的，在大部分情况下我们仅仅需要对渲染进程进行更新和升级而不需要改动主进程代码，我们渲染进程的打包实际上和一般的`web`项目打包没有太大差别，使用`webpack`打包即可。\n\n这里我说说渲染进程单独打包的好处：\n\n打包完成的`html`和`js`文件，我们一般要上传到我们的前端静态资源服务器下，然后告知服务端我们的渲染进程有代码更新，这里可以说成渲染进程单独的升级。\n\n注意，和壳的升级不同，渲染进程的升级仅仅是静态资源服务器上`html`和`js`文件的更新，而不需要重新下载更新客户端，这样我们每次启动程序的时候检测到离线包有更新，即可直接刷新读取最新版本的静态资源文件，即使在程序运行过程中要强制更新，我们的程序只需要强制刷新页面读取最新的静态资源即可，这样的升级对用户是非常友好的。\n\n这里注意，一旦我们这样配置，就意味着渲染进程和主进程打包升级的完全分离，我们在启动主窗口时读取的文件就不应该再是本地文件，而是打包完成后放在静态资源服务器的文件。\n\n为了方便开发，这里我们可以区分本地和线上加载不同的文件：\n\n```\n    function getVersion (mac,current){\n    // 根据设备mac和当前版本获取最新版本\n}\n    export default function () {\n        if (build.env === 'production') {\n        const version = getVersion (mac,current);\n        return 'https://www.xxxserver.html/electron-react/index_'+version+'.html';\n    }\n        return url.format({\n        protocol: 'file:',\n        pathname: path.join(__dirname, 'env/environment.html'),\n        slashes: true,\n    query: { debugger: build.env === \"development\" }\n    });\n}\n```\n\n具体的`webpack`配置这里就不再贴出，可以到我的[`github` `electron-react`](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FConardLi%2Felectron-react%2Ftree%2Fmaster%2Fscripts \"https://github.com/ConardLi/electron-react/tree/master/scripts\")的`/scripts`目录下查看。\n\n这里需要注意，在开发环境下我们可以结合`webpack`的`devServer`和`electron`命令来启动`app`：\n\n```\n    devServer: {\n    contentBase: './assets/',\n    historyApiFallback: true,\n    hot: true,\n    port: PORT,\n    noInfo: false,\n        stats: {\n        colors: true,\n        },\n            setup() {\n            spawn(\n            'electron',\n            ['.'],\n                {\n                shell: true,\n                stdio: 'inherit',\n            }\n            )\n            .on('close', () => process.exit(0))\n            .on('error', e => console.error(e));\n            },\n            },//...\n```\n\n### 13.2 主进程打包\n\n主进程，即将整个程序打包成可运行的客户端程序，常用的打包方案一般有两种，`electron-packager`和`electron-builder`。\n\n`electron-packager`在打包配置上我觉得有些繁琐，而且它只能将应用直接打包为可执行程序。\n\n这里我推荐使用`electron-builder`，它不仅拥有方便的配置 `protocol` 的功能、内置的 `Auto Update`、简单的配置 `package.json` 便能完成整个打包工作，用户体验非常不错。而且`electron-builder`不仅能直接将应用打包成`exe app`等可执行程序，还能打包成`msi dmg`等安装包格式。\n\n你可以在`package.json`方便的进行各种配置：\n\n```\n    \"build\": {\n    \"productName\": \"electron-react\", // app中文名称\n    \"appId\": \"electron-react\",// app标识\n    \"directories\": { // 打包后输出的文件夹\n    \"buildResources\": \"resources\",\n    \"output\": \"dist/\"\n}\n\"files\": [ // 打包后依然保留的源文件\n\"main_process/\",\n\"render_process/\",\n],\n\"mac\": { // mac打包配置\n\"target\": \"dmg\",\n\"icon\": \"icon.ico\"\n},\n\"win\": { // windows打包配置\n\"target\": \"nsis\",\n\"icon\": \"icon.ico\"\n},\n\"dmg\": { // dmg文件打包配置\n\"artifactName\": \"electron_react.dmg\",\n    \"contents\": [\n        {\n        \"type\": \"link\",\n        \"path\": \"/Applications\",\n        \"x\": 410,\n        \"y\": 150\n        },\n            {\n            \"type\": \"file\",\n            \"x\": 130,\n            \"y\": 150\n        }\n    ]\n    },\n    \"nsis\": { // nsis文件打包配置\n    \"oneClick\": false,\n    \"allowToChangeInstallationDirectory\": true,\n    \"shortcutName\": \"electron-react\"\n    },\n}\n```\n\n执行`electron-builder`打包命令时，可指定参数进行打包。\n\n```\n--mac, -m, -o, --macos   macOS打包\n--linux, -l              Linux打包\n--win, -w, --windows     Windows打包\n--mwl                    同时为macOS，Windows和Linux打包\n--x64                    x64 (64位安装包)\n--ia32                   ia32(32位安装包)\n```\n\n关于主进程的更新你可以使用`electron-builder`自带的`Auto Update`模块，在`electron-react`也实现了手动更新的模块，由于篇幅原因这里就不再赘述，如果有兴趣可以到我的[`github`](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FConardLi%2Felectron-react%2Ftree%2Fmaster%2Fscripts \"https://github.com/ConardLi/electron-react/tree/master/scripts\")查看`main`下的`update`模块。\n\n### 13.3 打包优化\n\n`electron-builder`打包出来的`App`要比相同功能的原生客户端应用体积大很多，即使是空的应用，体积也要在`100mb`以上。原因有很多：\n\n第一点；为了达到跨平台的效果，每个`Electron`应用都包含了整个`V8`引擎和`Chromium`内核。\n\n第二点：打包时会将整个`node_modules`打包进去，大家都知道一个应用的`node_module`体积是非常庞大的，这也是使得`Electron`应用打包后的体积较大的原因。\n\n第一点我们无法改变，我们可以从第二点对应用体积进行优化：`Electron`在打包时只会将`denpendencies`的依赖打包进去，而不会将 `devDependencies` 中的依赖进行打包。所以我们应尽可能的减少`denpendencies`中的依赖。在上面的进程中，我们使用`webpack`对渲染进程进行打包，所以渲染进程的依赖全部都可以移入`devDependencies`。\n\n另外，我们还可以使用双`packajson.json`的方式来进行优化，把只在开发环境中使用到的依赖放在整个项目的根目录的`package.json`下，将与平台相关的或者运行时需要的依赖装在`app`目录下。具体详见[two-package-structure](https://link.juejin.cn?target=https%3A%2F%2Fwww.electron.build%2Ftutorials%2Ftwo-package-structure \"https://www.electron.build/tutorials/two-package-structure\")。\n\n参考\n--\n\n*   [electronjs.org/docs](https://link.juejin.cn?target=https%3A%2F%2Felectronjs.org%2Fdocs \"https://electronjs.org/docs\")\n*   [jlord.us/essential-e…](https://link.juejin.cn?target=http%3A%2F%2Fjlord.us%2Fessential-electron%2F \"http://jlord.us/essential-electron/\")\n*   [imweb.io/topic/5b9f5…](https://link.juejin.cn?target=https%3A%2F%2Fimweb.io%2Ftopic%2F5b9f500cc2ec8e6772f34d79 \"https://imweb.io/topic/5b9f500cc2ec8e6772f34d79\")\n*   [www.jianshu.com/p/1ece6fd7a…](https://link.juejin.cn?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F1ece6fd7a80c \"https://www.jianshu.com/p/1ece6fd7a80c\")\n*   [zhuanlan.zhihu.com/p/52991793](https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F52991793 \"https://zhuanlan.zhihu.com/p/52991793\")\n\n> 本项目源码地址：[github.com/ConardLi/el…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FConardLi%2Felectron-react \"https://github.com/ConardLi/electron-react\")\n\n小结\n--\n\n希望你阅读本篇文章后可以达到以下几点：\n\n*   了解`Electron`的基本运行原理\n*   掌握`Electron`开发的核心基础知识\n*   了解`Electron`关于弹框、打印、保护、打包等功能的基本使用\n\n文中如有错误，欢迎在评论区指正，如果这篇文章帮助到了你，欢迎点赞和关注。\n\n想阅读更多优质文章、可关注我的[`github`博客](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FConardLi%2FConardLi.github.io \"https://github.com/ConardLi/ConardLi.github.io\")，你的star✨、点赞和关注是我持续创作的动力！\n\n推荐关注我的微信公众号【code秘密花园】，每天推送高质量文章，我们一起交流成长。\n\n![](/images/jueJin/16afa505d0b684c.png)\n\n> 关注公众号后回复【加群】拉你进入优质前端交流群。",
	"selfDefined": "likes:730,comments:0,collects:804,likes:34261"
}