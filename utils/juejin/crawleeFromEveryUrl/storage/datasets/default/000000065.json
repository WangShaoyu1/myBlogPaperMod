{
	"title": "从五年前的前端老代码中，学到的编码小技巧~",
	"author": "Sunshine_Lin",
	"publishTime": "2023-09-24",
	"readTime": "阅读3分钟",
	"tags": "[\"前端中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。 背景 最近在看一个比较老的工具库源码，学到了一点代码的小技巧，我觉得对于以后的异步操作开发来说挺有用",
	"article": "前言\n--\n\n大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。\n\n![](/images/jueJin/ffc76a3098894e1.png)\n\n背景\n--\n\n最近在看一个比较老的工具库源码，学到了一点代码的小技巧，我觉得对于以后的异步操作开发来说挺有用的，所以今天写了一篇文章，分享给大家~\n\n例子\n--\n\n假设，现在有一个类，这个类维护了一个`db`对象，但是这个`db`对象需要通过异步操作(请求)并拿到结果，来进行初始化，且我们需要用到`db`对象上的`get`方法，来进行数据的获取，请看下方简易代码~\n\n```ts\n    const request = () => {\n        return new Promise(resolve => {\n        // 模拟请求后得到db对象\n            setTimeout(() => {\n                resolve({\n                get: key => key,\n                });\n                }, 300);\n                });\n                };\n                \n                    class DB {\n                    private db;\n                        constructor() {\n                        this.init();\n                    }\n                    \n                        init() {\n                            return request().then(res => {\n                            this.db = res;\n                            });\n                        }\n                        \n                            getItem() {\n                            console.log(this.db.get('info'));\n                        }\n                    }\n```\n\n接着我们进行实例的创建，并使用`getItem`方法去执行`db`对象身上的`get`方法，获取我们想要的数据，但是此时会引起报错，说`db`不存在\n\n```ts\nconst base = new Base();\nbase.getItem(); // 报错：this.db 不存在\n```\n\n这是因为`db`是通过异步获取的，当你执行`getItem`的时候，`db` 还没初始化完成呢，所以我们得换一种写法我们需要保证`init`异步执行完成，再去执行后面的`getItem`，这样才不会报错\n\n```ts\n    class Base {\n    private db;\n    \n        init() {\n            return request().then(res => {\n            this.db = res;\n            });\n        }\n        \n            getItem() {\n            console.log(this.db.get('info'));\n        }\n    }\n    \n        const fn = async () => {\n        const base = new Base();\n        await base.init();\n        base.getItem(); // 'info'\n        };\n```\n\n改进\n--\n\n但是这样其实也不是好的做法，按理说`init`最好是不要去主动执行，而是应该写在内部，而且把异步`init`写在外面，又得套上`async`函数，非常麻烦，所以我们换一种写法。\n\n大致思想就是，我们设置一个全局的`promise`，这个`promise`只有在初始化完成后，状态才会变成成功，才会执行 `then` 方法，然后对于 `db` 的操作，全都包裹在这个 `promise` 的 `then` 方法中，这样就能保证执行 `db` 身上方法时，`db` 已经被初始化完成了~\n\n![](/images/jueJin/47b778729a76490.png)\n\n```ts\n    class Base {\n    db;\n    readyPromise;\n    readyPromiseResolve;\n    \n        constructor() {\n        this.init()\n    }\n    \n        async init() {\n        // 全局promise\n            this.readyPromise = new Promise(resolve => {\n            // 保存好全局resolve\n            this.readyPromiseResolve = resolve\n            })\n                return request().then(res => {\n                this.db = res;\n                // 初始化完成后执行全局resolve\n                this.readyPromiseResolve()\n                });\n            }\n            \n                ready() {\n                // 获取全局promise\n                return this.readyPromise\n            }\n            \n                getItem() {\n                // 全局promise执行then，说明已经初始化完成\n                // 这时候执行 getItem 就不会报错了\n                    this.ready().then(() => {\n                    console.log(this.db.get('info'));\n                    })\n                }\n            }\n            \n            const base = new Base();\n            base.getItem() // 'info'\n```\n\n结语 & 加学习群 & 摸鱼群\n---------------\n\n我是林三心\n\n*   一个待过**小型toG型外包公司、大型外包公司、小公司、潜力型创业公司、大公司**的作死型前端选手；\n*   一个偏前端的全干工程师；\n*   一个不正经的掘金作者；\n*   一个逗比的B站up主；\n*   一个不帅的小红书博主；\n*   一个喜欢打铁的篮球菜鸟；\n*   一个喜欢历史的乏味少年；\n*   一个喜欢rap的五音不全弱鸡\n\n如果你想一起学习前端，一起摸鱼，一起研究简历优化，一起研究面试进步，一起交流历史音乐篮球rap，可以来俺的摸鱼学习群哈哈，点这个，有7000多名前端小伙伴在等着一起学习哦 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/40d01f1e605e4db.png)",
	"selfDefined": "likes:86,comments:0,collects:61,likes:10545"
}