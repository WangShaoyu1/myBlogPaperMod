{
	"title": "前端埋点重要环节：前端如何录制用户的操作过程？",
	"author": "Sunshine_Lin",
	"publishTime": "2023-08-21",
	"readTime": "阅读5分钟",
	"tags": "[\"前端中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。 背景 公司有很多的项目，但是并不是每一个项目都很重要，其实重要的项目就那么几个，上面也是很重视这几个",
	"article": "前言\n--\n\n大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心。\n\n![](/images/jueJin/53a91ada56c2455.png)\n\n背景\n--\n\n公司有很多的项目，但是并不是每一个项目都很重要，其实重要的项目就那么几个，上面也是很重视这几个项目，尤其是对一些生产问题的关注度很高。\n\n这几天上面交代下来了，需要对这些项目做一些用户行为的记录，主要是为了更好地还原用户在某一个时间点的操作过程\n\n![](/images/jueJin/d9b7507680fc403.png)\n\n注意点\n---\n\n想要完成这个需求，仔细想了一下，需要注意几个点：\n\n*   **跨框架使用：** 这些项目有vue、angular、react，需要都能适用\n*   **能录制用户行为：** 能把用户在页面上的操作录制下来\n*   **能回放录制：** 如果不能回放，那么这个录制就无意义了\n*   **用户无感知：** 必须做到用户无感知才行\n\n思考 & 技术方案\n---------\n\n说到前端视频的录制，我们会想到 `webRTC` 这个技术，他能做到录制屏幕的效果，但是通过 `webRTC` 去完成这个方案的话，有几个缺点：\n\n*   做不到用户无感知，需要用户同意才能录制\n*   录制的视频太大了，太占内存了\n*   学习成本比较高，这也是原因之一\n\n那怎么才能做到：\n\n*   用户无感知\n*   不录制视频\n\n其实只要不录制视频了，那么用户肯定就无感知，因为一旦要录视频，浏览器肯定要询问用户同意不同意。\n\n所以我们选择了另一个方案 `rrweb`，一个用来录制用户页面行为的库~\n\nrrweb\n-----\n\n`rrweb` 是 `record and replay the web` 的简写，旨在利用现代浏览器所提供的强大 API 录制并回放任意 web 界面中的用户操作。\n\n### 效果展示\n\n![](/images/jueJin/cb30c8351efc46b.png)\n\n### 基本使用\n\n我们先定义好 html 结构，三个按钮\n\n*   录制：点击开始录制\n*   回放：点击开始回放\n*   返回：点击重新再来\n\n还有一个 replayer ，用来当做回放的容器\n\n```html\n<template>\n<div class=\"main\">\n<div >\n<el-button @click=\"record\">录制</el-button>\n<el-button @click=\"replay\">回放</el-button>\n<el-button @click=\"reset\">返回</el-button>\n</div>\n<div v-if=\"!showReplay\">\n<div>\n<el-input style=\"width: 300px\" v-model=\"value\" />\n</div>\n<div>\n<el-button>按钮1</el-button>\n</div>\n<div>\n<el-button>按钮2</el-button>\n</div>\n<div>\n<el-button>按钮3</el-button>\n</div>\n</div>\n<div ref=\"replayer\"></div>\n</div>\n</template>\n\n```\n\n我们需要先安装两个包：`npm i rrweb rrwebPlayer`\n\n*   \\*\\*rrweb：\\*\\*用来录制网页的\n*   \\*\\*rrwebPlayer：\\*\\*用来回放的\n\n`rrweb`拥有一个 `record` 函数来进行录制操作，并可传入配置，`emit`属性就是用户操作的监听函数，接收一个参数`event`，这个参数是什么，我们后面会说~\n\n然后我们定义三个函数：\n\n*   record：录制函数\n*   replay：回放函数\n*   reset：返回/重置函数\n\n```js\nconst rrweb = require(\"rrweb\");\nimport rrwebPlayer from \"rrweb-player\";\n\nconst events = ref([]);\nconst stopFn = ref(null);\nconst showReplay = ref(false);\nconst replayer = ref(null)\n\n    const record = () => {\n    console.log(\"开始录制\");\n        stopFn.value = rrweb.record({\n            emit: (event) => {\n            events.value.push(event);\n            },\n            // 支持录制canvas\n            recordCanvas: true,\n            collectFonts: true,\n            });\n            };\n                const replay = () => {\n                stopFn.value();\n                showReplay.value = true;\n                    new rrwebPlayer({\n                    // 可以自定义 DOM 元素\n                    target: replayer.value,\n                    // 配置项\n                        props: {\n                        // 传入events\n                        events: events.value,\n                        },\n                        });\n                        };\n                            const reset = () => {\n                            showReplay.value = false;\n                        events.value = []\n                        };\n```\n\n### 录的是视频吗？\n\n我们之前说了：一旦要录视频，浏览器肯定要询问用户同意不同意。但是我们发现我们使用 `rrweb` 去录制，浏览器并没有询问，做到了无感知~所以我们可以推断出，`rrweb` 录制的并不是视频，那录制的是什么呢？\n\n我们其实可以试着去输出一下刚刚的参数 `event` 看看是什么\n\n```js\n    rrweb.record({\n        emit: (event) => {\n        // 输出\n        +      console.log(event)\n        events.value.push(event);\n        },\n        });\n```\n\n![](/images/jueJin/e093d99278dd4f7.png)\n\n我们可以看到这个`event`记录的东西是当前页面的`DOM`结构，当用户操作页面时，`rrweb`会将每一次的DOM结构转换成对象形式，通过 `emit` 函数的第一个参数输出，我们使用一个数组去记录这一次次的DOM结构，然后把它传给`rrweb-player`，它能将这些DOM结构按照先后顺序，一个一个展示出来，自然就相当于是视频的展示效果了~\n\n![](/images/jueJin/d5f2e26c3645438.png)\n\n`rrweb`能记录这些页面的 DOM 行为：\n\n*   节点创建、销毁\n*   节点属性变化\n*   文本变化\n*   鼠标移动\n*   鼠标交互\n*   页面或元素滚动\n*   视窗大小改变\n*   输入\n\n上传 & 优化\n-------\n\n我们记录的这些数据，需要上传到后端那边去，方便后续在后台管理系统里管理这些回放~\n\n很多人会说这样一直录制，那岂不是数据量很大？所以我觉得只有在一些重要的页面，才需要做录制行为的操作，而不是每一个页面都去做这样的操作~\n\n并且每次上传需要一定的时间间隔，不能上传太频繁，不然浏览器压力会增大~\n\n```js\n    const record = () => {\n    console.log(\"开始录制\");\n        stopFn.value = rrweb.record({\n            emit: (event) => {\n            events.value.push(event);\n            },\n            recordCanvas: true,\n            collectFonts: true,\n            });\n            };\n            \n                const report = async () => {\n                await reportRequest(events.value);\n                events.value = [];\n            }\n            \n            // 20s 去上传一次\n            setInterval(report, 10 * 2000);\n```\n\n同时，虽然现在上传的是DOM结构的对象，大小远远比视频小，但是其实还是不小的\n\n![](/images/jueJin/b92eb948b172417.png)\n\n所以我们需要采取措施，去压缩一下数据，压缩后再进行上传，这样能降低服务器的压力~我们可以使用`packFn`属性来对录制的数据进行压缩，同时回放时也要用`unpackFn`去解码\n\n```js\n    const record = () => {\n    console.log(\"开始录制\");\n        stopFn.value = rrweb.record({\n            emit: (event) => {\n            events.value.push(event);\n            },\n            recordCanvas: true,\n            collectFonts: true,\n            +    packFn: rrweb.pack\n            });\n            };\n            \n                const replay = () => {\n                stopFn.value();\n                showReplay.value = true;\n                    new rrwebPlayer({\n                    // 可以自定义 DOM 元素\n                    target: replayer.value,\n                    // 配置项\n                        props: {\n                        // 传入events\n                        events: events.value,\n                        +      unpackFn: rrweb.unpack,\n                        },\n                        });\n                        };\n```\n\n![](/images/jueJin/e1349a956e7043b.png)\n\n结语 & 加学习群 & 摸鱼群\n---------------\n\n我是林三心\n\n*   一个待过**小型toG型外包公司、大型外包公司、小公司、潜力型创业公司、大公司**的作死型前端选手；\n*   一个偏前端的全干工程师；\n*   一个不正经的掘金作者；\n*   一个逗比的B站up主；\n*   一个不帅的小红书博主；\n*   一个喜欢打铁的篮球菜鸟；\n*   一个喜欢历史的乏味少年；\n*   一个喜欢rap的五音不全弱鸡\n\n如果你想一起学习前端，一起摸鱼，一起研究简历优化，一起研究面试进步，一起交流历史音乐篮球rap，可以来俺的摸鱼学习群哈哈，点这个，有7000多名前端小伙伴在等着一起学习哦 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/5b8f862558ee4a8.png)",
	"selfDefined": "likes:70,comments:0,collects:119,likes:3925"
}