{
	"title": "中秋！还记得西游记里的嫦娥吗？我用10000张图片拼成了儿时女神！",
	"author": "Sunshine_Lin",
	"publishTime": "2021-09-08",
	"readTime": "阅读8分钟",
	"tags": "[\"前端\",\"JavaScript中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 大家好，我是林三心，中秋即将来临，预祝大家中秋快乐！！！我在想，关于中秋，我能写点什么分享给大家呢？这一天，我在看《西游记》，突然想到了我",
	"article": "我正在参加中秋创意投稿大赛，详情请看：[中秋创意投稿大赛](https://juejin.cn/post/7003154195826081800 \"https://juejin.cn/post/7003154195826081800\")\n\n前言\n--\n\n大家好，我是林三心，中秋即将来临，预祝大家中秋快乐！！！我在想，关于中秋，我能写点什么分享给大家呢？这一天，我在看《西游记》，突然想到了我儿时的女神，是谁呢？就是**天蓬元帅**苦苦追求的**嫦娥仙子**，那可是我儿时的女神啊。**嫦娥奔月**的故事我相信大家都听过\n\n前段时间，我看了[荣顶](https://juejin.cn/user/2858385963749223/posts \"https://juejin.cn/user/2858385963749223/posts\")大佬的这篇[我用 10000 张图片合成我们美好的瞬间](https://juejin.cn/post/6996431901623844894 \"https://juejin.cn/post/6996431901623844894\")，发现原来图片的主色调是那样计算的，学到了很多。于是我站在[荣顶](https://juejin.cn/user/2858385963749223/posts \"https://juejin.cn/user/2858385963749223/posts\")巨人的肩膀上，用王者荣耀里**嫦娥**这一角色的不同图片，加上王者荣耀里**后羿**这一角色的不同图片（后羿是嫦娥老公），组成了我儿时女神——西游记嫦娥的图像。\n\n开搞！！！\n-----\n\n### 前置准备\n\n由于需要用到`canvas`，以及一些图片上传按钮，所以咱们先把HTML的代码写好，`fabric`是一个非常实用的`canvas库`，他提供了很多`api`，方便我们更方便地在`canvas`上画出可操作性的图像。fabric的代码在这里[fabric库代码](https://link.juejin.cn?target=https%3A%2F%2Fcdnjs.cloudflare.com%2Fajax%2Flibs%2Ffabric.js%2F4.5.0%2Ffabric.min.js \"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.0/fabric.min.js\")，创建一个文件，复制过来就行\n\n```js\n<!-- 引入fabric这个库 -->\n<script src=\"./fabric.js\"></script>\n<!-- 用来选主图 -->\n<input type=\"file\" id=\"mainInput\" />\n<!-- 用来选组成图片 多选 -->\n<input type=\"file\" id=\"composeInput\" multiple />\n<!-- 生成效果 -->\n<button id=\"finishBtn\">生成组合图</button>\n<!-- 一块800 * 800 的canvas画布 -->\n<canvas id=\"canvas\" width=\"800\" height=\"800\"></div>\n``````js\nconst mainInput = document.getElementById('mainInput') // 获取上传主图按钮的DOM\nconst composeInput = document.getElementById('composeInput') // 获取多传组合图片按钮的DOM\nconst finishBtn = document.getElementById('finishBtn') // 获取生成最终结果按钮的DOM\nconst exportBtn = document.getElementById('exportBtn') // 获取倒出图片按钮的DOM\nconst canvas = new fabric.Canvas('canvas') // 实例一个fabric的canvas对象，传入的是canvas的id\nconst ctx = canvas.getContext('2d') // 绘制2d图像\n```\n\n### 画出嫦娥姐姐\n\n咱们需要先在页面上画出嫦娥姐姐的原始图像，图像如下\n\n![image.png](/images/jueJin/a55ec01cd9ff4cd.png)\n\n那咱们要怎么把一张图像画到HTML页面中呢？答案是`canvas`，那咱们就先把这个图像绘制到页面上去吧！\n\n咱们都知道，图片直接上传到浏览器，是不可能直接就给你绘制出来的，比如原生的`canvas`需要把你这张图片转为`base64`格式才能绘制到页面，而`fabric`提供了一个`fabric.Image.fromURL(url, img => {})`，需要传入一个图片的`blob地址`，才能生成一张可绘制到页面的图片。那咱们怎么把咱们上传的图片转成`blob地址`呢？其实JavaScript已经给我们提供了这么一个方法`window.URL.createObjectURL`，用它就能实现啦。\n\n```js\n// 监听上传主图按钮的上传变化\n    mainInput.onchange = function (e) {\n// 只有一个图片，所以是e.target.files[0]\nconst url = window.URL.createObjectURL(e.target.files[0])\n// 将生成的blob地址传入\ndrawMainImage(url)\n}\n\n    function drawMainImage(url) {\n    // 接收传进来的url\n        fabric.Image.fromURL(url, img => {\n        console.log(img)\n        // 转换成功后的回调\n        // fabric.Image.fromURL会将此url转换成一张图片\n        \n        // 需要缩放图片，height > width 就按照 width的缩放比例，反之用height的缩放比例\n        // 反过来是为了能充满整张图\n        const scale = img.height > img.width ? canvas.width / img.width : canvas.height / img.height\n        \n        // 设置这张图像绘制的参数\n            img.set({\n            left: canvas.width / 2, // 距离canvas画板左边一半宽度\n            originX: 'center', // 水平方向居中\n            top: 0, // 距离顶部距离为0\n            scaleX: scale, // 图像水平缩放比例\n            scaleY: scale, // 图像竖直缩放比例\n            selectable: false // 不可操作，默认是true\n            })\n            \n            // 把此图像绘制到canvas画板中\n            canvas.add(img)\n            \n            // 图片绘制完成的回调函数\n                img.on('added', e => {\n                console.log('图片加载完成了啊')\n                    setTimeout(() => {\n                    // 绘制完成后，获取此图像中10000个格子的色彩信息，后面会实现\n                    getMainRGBA()\n                    }, 200) // 这里用延时器，是因为图像绘制有延迟\n                    // 而这里需要保证图像真的完全绘制完，再去获取色彩信息\n                    })\n                    })\n                }\n```\n\n### 10000个格子\n\n![1630998118(1).jpg](/images/jueJin/62cfe1422dd544f.png) 咱们都知道，咱们的canvas画布是`800 * 800`的，咱们想要分成`10000`个格子，那么每个格子就是`8 * 8`。实现之前，咱们现在认识一个canvas获取色彩信息的api——`ctx.getImageData(x, y, width, height)`，他接收4个参数\n\n*   x：获取范围的x坐标\n*   y：获取范围的y坐标\n*   width：获取范围的宽度\n*   height：获取范围的高度 他会返回一个对象，对象里有一个属性`data`，这个`data`就是此范围的色彩信息，比如\n\n```js\nconst { data } = ctx.getImageData(40, 40, 8, 8)\n```\n\n![截屏2021-09-07 下午6.41.00.png](/images/jueJin/e9f4eb3a597a455.png)\n\n那么data就是x为40，y为40，宽度高度都是8，这一个范围内的色彩信息，这个色彩信息是一个数组，比如这个范围是`8 * 8`，那么这个数组就有`8 * 8 * 4 = 256`个元素，因为`8 * 8`就有64个像素，而每一个像素的`rgba(r, g, b, a)`是4个值，所以这个数组就有`8 * 8 * 4 = 256`个元素，所以下面咱们要4个4个收集，因为每4个元素就是一个像素的`rgba`，而一个`8 * 8`的格子，就会有64个像素，也就是64个rgba数组\n\n```js\nlet mainColors = [] // 用来收集1000个格子的主色调rgba，后面会实现\n\n    function getMainRGBA() {\n    const rgbas = [] // 用来收集10000个格子的色彩信息\n        for (let y = 0; y < canvas.height; y += 8) {\n            for (let x = 0; x < canvas.width; x += 8) {\n            // 获取每一块格子的色彩data\n            const { data } = ctx.getImageData(x, y, 8, 8)\n        rgbas[y / 8 * 100 + x / 8] = []\n            for (let i = 0; i < data.length; i += 4) {\n            // 4个4个收集，因为每4个就组成一个像素的rgba\n                rgbas[y / 8 * 100 + x / 8].push([\n                data[i],\n                data[i + 1],\n                data[i + 2],\n            data[i + 3]\n            ])\n        }\n    }\n}\n// 算出10000个格子，每个格子的主色调，后面实现\nmainColors = getMainColorStyle(rgbas)\n}\n```\n\n### 每个格子主色调\n\n上面咱们已经获取到了10000个格子，他们每个格子都拥有64个像素，也就是64个rgba数组，那每个格子拥有64个rgba，咱们怎么才能得到这个格子的主色调呢？很简单嘛，rgba(r, g, b, a)有4个值，咱们算出这4个值各自的平均值，然后组成一个新的rgba，这个rgba就是每个格子的主色调啦！！！\n\n```js\n    function getMainColorStyle(rgbas) {\nconst mainColors = []\n    for (let colors of rgbas) {\n    let r = 0, g = 0, b = 0, a = 0\n        for (let color of colors) {\n        // 累加\n    r += color[0]\ng += color[1]\nb += color[2]\na += color[3]\n}\n    mainColors.push([\n    Math.round(r / colors.length), // 取平均值\n    Math.round(g / colors.length), // 取平均值\n    Math.round(b / colors.length), // 取平均值\n    Math.round(a / colors.length) // 取平均值\n    ])\n}\nreturn mainColors\n}\n```\n\n### 上传组合图片\n\n主图片的功能都实现了，现在就剩组合图片了，咱们可以多传组合图片。但是我们要算出每一张组合图片的主色调，因为后面咱们要主色调来对比那10000个格子的主色调，决定哪个格子放哪张组合图片\n\n这里有一个问题要强调一下，想要获取图片的颜色信息，就得把图片画到canvas画板上才能获取，但是咱们又不想在这里把图片画到页面上的canvas里，咋办呢？咱们可以创建临时的canvas画板，画完，获取完颜色信息，咱们就把它销毁\n\n```js\nlet composeColors = [] // 收集组合图片主色调\n\n// 监听多选按钮的上传\n    composeInput.onchange = async function (e) {\n    const promises = [] // promises数组\n        for (file of e.target.files) {\n        // 将每张图片生成blob地址\n        const url = window.URL.createObjectURL(file)\n        // 传入blob地址\n        promises.push(getComposeColorStyle(url, file.name))\n    }\n    const res = await Promise.all(promises) // 顺序执行所有promise\n    composeColors = res // 将结果赋值给composeColors\n}\n\n    function getComposeColorStyle(url, name) {\n        return new Promise(resolve => {\n        // 创建一个 20 * 20的canvas画板\n        // 理论上这里宽高可以自己定，但是越大，色彩会越精准\n        const composeCanvas = document.createElement('canvas')\n        const composeCtx = composeCanvas.getContext('2d')\n        composeCanvas.width = 20\n        composeCanvas.height = 20\n        \n        // 创建img对象\n        const img = new Image()\n        img.src = url\n            img.onload = function () {\n            const scale = composeCanvas.height / composeCanvas.height\n            img.height *= scale\n            img.width *= scale\n            \n            // 将img画到临时canvas画板\n            composeCtx.drawImage(img, 0, 0, composeCanvas.width, composeCanvas.height)\n            // 获取颜色信息data\n            const { data } = composeCtx.getImageData(0, 0, composeCanvas.width, composeCanvas.height)\n            \n            // 累加  r，g，b，a\n            let r = 0, g = 0, b = 0, a = 0\n                for (let i = 0; i < data.length; i += 4) {\n            r += data[i]\n        g += data[i + 1]\n    b += data[i + 2]\na += data[i + 3]\n}\n    resolve({\n    // 主色调\n        rgba: [\n        Math.round(r / (data.length / 4)), // 取平均值\n        Math.round(g / (data.length / 4)), // 取平均值\n        Math.round(b / (data.length / 4)), // 取平均值\n        Math.round(a / (data.length / 4)) // 取平均值\n        ],\n        url,\n        name\n        })\n    }\n    })\n}\n```\n\n### 对比主色调并绘制\n\n*   canvas画板中的**嫦娥姐姐**有10000个格子，每个格子都有自己的主色调\n*   上传的每张组合图片也有自己的主色调\n\n那咱们要怎么实现最终效果呢？很简单嘛！！！遍历10000个格子，拿着每个格子的主色调，去跟每张组合图片的主色调一一对比，最接近色调的图片，就拿来绘制到这个`8 * 8`的格子里。\n\n```js\n// 监听完成按钮\nfinishBtn.onclick = finishCompose\n\n    function finishCompose() {\n    const urls = [] // 收集最终绘制的10000张图片\n    \n    for (let main of mainColors) { // 遍历10000个格子主色调\n    \n    let closestIndex = 0 // 最接近主色调的图片的index\n    let minimumDiff = Infinity // 相差值\n    \n        for (let i = 0; i < composeColors.length; i++) {\n    const { rgba } = composeColors[i]\n    // 格子主色调rgba四个值，减去图片主色调rgba四个值，的平方\n    const diff = (rgba[0] - main[0]) ** 2 + (rgba[1] - main[1]) ** 2\n    + (rgba[2] - main[2]) ** 2 + (rgba[3] - main[3]) ** 2\n    \n    // 然后开跟比较\n        if (Math.sqrt(diff) < minimumDiff) {\n        minimumDiff = Math.sqrt(diff)\n        closestIndex = i\n    }\n}\n\n// 把最小色差的图片url添加进数组urls\nurls.push(composeColors[closestIndex].url)\n}\n\n\n// 将urls中10000张图片，分别绘制在对应的10000个格子中\n    for (let i = 0; i < urls.length; i++) {\n        fabric.Image.fromURL(urls[i], img => {\n        const scale = img.height > img.width ? 8 / img.width : 8 / img.height;\n            img.set({\n            left: i % 100 * 8,\n            top: Math.floor(i / 100) * 8,\n            originX: \"center\",\n            scaleX: scale,\n            scaleY: scale,\n            });\n            canvas.add(img)\n            })\n        }\n    }\n```\n\n### 导出图片\n\n```js\n// 监听导出按钮\nexportBtn.onclick = exportCanvas\n\n//导出图片\n    function exportCanvas() {\n        const dataURL = canvas.toDataURL({\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0,\n        format: \"png\",\n        });\n        const link = document.createElement(\"a\");\n        link.download = \"嫦娥姐姐.png\";\n        link.href = dataURL;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n```\n\n### 最终效果\n\n![嫦娥2.gif](/images/jueJin/8ac2a17312444ec.png)\n\n彩蛋\n--\n\n如果你觉得此文对你有一丁点帮助，点个赞，鼓励一下林三心哈哈。或者可以加入我的摸鱼群 想进学习群，摸鱼群，请点击这里[摸鱼](https://juejin.cn/pin/6969565162885873701 \"https://juejin.cn/pin/6969565162885873701\")\n\n哈哈我用王者荣耀**猪八戒**的图片，组成了我自己\n\n![截屏2021-09-07 下午11.17.26.png](/images/jueJin/533370d4c7b8493.png)\n\n完整代码\n----\n\n![截屏2021-09-07 下午7.37.34.png](/images/jueJin/43cba36852dd425.png)\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Document</title>\n<!-- 引入flare这个库 -->\n<script src=\"./flare.js\"></script>\n</head>\n<body>\n<!-- 用来选主图 -->\n<input type=\"file\" id=\"mainInput\" />\n<!-- 用来选组成图片 多选 -->\n<input type=\"file\" id=\"composeInput\" multiple />\n<!-- 生成效果 -->\n<button id=\"finishBtn\">生成组合图</button>\n<!-- 导出图片 -->\n<button id=\"exportBtn\">导出图片</button>\n<!-- 一块800 * 800 的canvas画布 -->\n<canvas id=\"canvas\" width=\"800\" height=\"800\"></div>\n</body>\n<script src=\"./index2.js\"></script>\n</html>\n``````js\nconst mainInput = document.getElementById('mainInput') // 获取上传主图按钮的DOM\nconst composeInput = document.getElementById('composeInput') // 获取多传组合图片按钮的DOM\nconst finishBtn = document.getElementById('finishBtn') // 获取生成最终结果按钮的DOM\nconst exportBtn = document.getElementById('exportBtn') // 获取倒出图片按钮的DOM\nconst canvas = new fabric.Canvas('canvas') // 实例一个flare的canvas对象，传入的是canvas的id\nconst ctx = canvas.getContext('2d') // 绘制2d图像\n\nlet mainColors = []\nlet composeColors = []\n\n// 监听上传主图按钮的上传变化\n    mainInput.onchange = function (e) {\n// 只有一个图片，所以是e.target.files[0]\nconst url = window.URL.createObjectURL(e.target.files[0])\n// 将生成的blob地址传入\ndrawMainImage(url)\n}\n\n    composeInput.onchange = async function (e) {\n    const promises = [] // promises数组\n        for (file of e.target.files) {\n        // 将每张图片生成blob地址\n        const url = window.URL.createObjectURL(file)\n        // 传入blob地址\n        promises.push(getComposeColorStyle(url, file.name))\n    }\n    const res = await Promise.all(promises) // 顺序执行所有promise\n    composeColors = res // 将结果赋值给composeColors\n}\n\n// 监听完成按钮\nfinishBtn.onclick = finishCompose\n\n// 监听导出按钮\nexportBtn.onclick = exportCanvas\n\n    function drawMainImage(url) {\n    // 接收传进来的url\n        fabric.Image.fromURL(url, img => {\n        console.log(img)\n        // 转换成功后的回调\n        // fabric.Image.fromURL会将此url转换成一张图片\n        \n        // 需要缩放图片，height > width 就按照 width的缩放比例，反之用height的缩放比例\n        // 反过来是为了能充满整张图\n        const scale = img.height > img.width ? canvas.width / img.width : canvas.height / img.height\n        \n        // 设置这张图像绘制的参数\n            img.set({\n            left: canvas.width / 2, // 距离canvas画板左边一半宽度\n            originX: 'center', // 水平方向居中\n            top: 0, // 距离顶部距离为0\n            scaleX: scale, // 图像水平缩放比例\n            scaleY: scale, // 图像竖直缩放比例\n            selectable: false // 不可操作，默认是true\n            })\n            \n            // 图片绘制完成的回调函数\n                img.on('added', e => {\n                console.log('图片加载完成了啊')\n                    setTimeout(() => {\n                    // 绘制完成后，获取此图像中10000个格子的色彩信息\n                    getMainRGBA()\n                    }, 200) // 这里用延时器，是因为图像绘制有延迟\n                    // 而这里需要保证图像真的完全绘制完，再去获取色彩信息\n                    })\n                    \n                    // 把此图像绘制到canvas画板中\n                    canvas.add(img)\n                    })\n                }\n                \n                \n                    function getMainRGBA() {\n                    const rgbas = [] // 用来收集10000个格子的色彩信息\n                        for (let y = 0; y < canvas.height; y += 8) {\n                            for (let x = 0; x < canvas.width; x += 8) {\n                            // 获取每一块格子的色彩data\n                            const { data } = ctx.getImageData(x, y, 8, 8)\n                        rgbas[y / 8 * 100 + x / 8] = []\n                            for (let i = 0; i < data.length; i += 4) {\n                            // 4个4个收集，因为每4个就组成一个像素的rgba\n                                rgbas[y / 8 * 100 + x / 8].push([\n                                data[i],\n                                data[i + 1],\n                                data[i + 2],\n                            data[i + 3]\n                            ])\n                        }\n                    }\n                }\n                // 算出10000个格子，每个格子的主色调\n                mainColors = getMainColorStyle(rgbas)\n            }\n            \n                function getMainColorStyle(rgbas) {\n                const mainColors = [] // 用来收集1000个格子的主色调rgba\n                    for (let colors of rgbas) {\n                    let r = 0, g = 0, b = 0, a = 0\n                        for (let color of colors) {\n                        // 累加\n                    r += color[0]\n                g += color[1]\n            b += color[2]\n        a += color[3]\n    }\n        mainColors.push([\n        Math.round(r / colors.length), // 取平均值\n        Math.round(g / colors.length), // 取平均值\n        Math.round(b / colors.length), // 取平均值\n        Math.round(a / colors.length) // 取平均值\n        ])\n    }\n    return mainColors\n}\n\n    function getComposeColorStyle(url, name) {\n        return new Promise(resolve => {\n        // 创建一个 20 * 20的canvas画板\n        // 理论上这里宽高可以自己定，但是越大，色彩会越精准\n        const composeCanvas = document.createElement('canvas')\n        const composeCtx = composeCanvas.getContext('2d')\n        composeCanvas.width = 20\n        composeCanvas.height = 20\n        \n        // 创建img对象\n        const img = new Image()\n        img.src = url\n            img.onload = function () {\n            const scale = composeCanvas.height / composeCanvas.height\n            img.height *= scale\n            img.width *= scale\n            \n            // 将img画到临时canvas画板\n            composeCtx.drawImage(img, 0, 0, composeCanvas.width, composeCanvas.height)\n            // 获取颜色信息data\n            const { data } = composeCtx.getImageData(0, 0, composeCanvas.width, composeCanvas.height)\n            \n            // 累加  r，g，b，a\n            let r = 0, g = 0, b = 0, a = 0\n                for (let i = 0; i < data.length; i += 4) {\n            r += data[i]\n        g += data[i + 1]\n    b += data[i + 2]\na += data[i + 3]\n}\n    resolve({\n    // 主色调\n        rgba: [\n        Math.round(r / (data.length / 4)), // 取平均值\n        Math.round(g / (data.length / 4)), // 取平均值\n        Math.round(b / (data.length / 4)), // 取平均值\n        Math.round(a / (data.length / 4)) // 取平均值\n        ],\n        url,\n        name\n        })\n    }\n    })\n}\n\n    function finishCompose() {\n    const urls = [] // 收集最终绘制的10000张图片\n    \n    for (let main of mainColors) { // 遍历10000个格子主色调\n    \n    let closestIndex = 0 // 最接近主色调的图片的index\n    let minimumDiff = Infinity // 相差值\n    \n        for (let i = 0; i < composeColors.length; i++) {\n    const { rgba } = composeColors[i]\n    // 格子主色调rgba四个值，减去图片主色调rgba四个值，的平方\n    const diff = (rgba[0] - main[0]) ** 2 + (rgba[1] - main[1]) ** 2\n    + (rgba[2] - main[2]) ** 2 + (rgba[3] - main[3]) ** 2\n    \n    // 然后开跟比较\n        if (Math.sqrt(diff) < minimumDiff) {\n        minimumDiff = Math.sqrt(diff)\n        closestIndex = i\n    }\n}\n\n// 把最小色差的图片url添加进数组urls\nurls.push(composeColors[closestIndex].url)\n}\n\n\n// 将urls中10000张图片，分别绘制在对应的10000个格子中\n    for (let i = 0; i < urls.length; i++) {\n        fabric.Image.fromURL(urls[i], img => {\n        const scale = img.height > img.width ? 8 / img.width : 8 / img.height;\n            img.set({\n            left: i % 100 * 8,\n            top: Math.floor(i / 100) * 8,\n            originX: \"center\",\n            scaleX: scale,\n            scaleY: scale,\n            });\n            canvas.add(img)\n            })\n        }\n    }\n    \n    \n    //导出图片\n        function exportCanvas() {\n            const dataURL = canvas.toDataURL({\n            width: canvas.width,\n            height: canvas.height,\n            left: 0,\n            top: 0,\n            format: \"png\",\n            });\n            const link = document.createElement(\"a\");\n            link.download = \"嫦娥姐姐.png\";\n            link.href = dataURL;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n```\n\n参考文章\n----\n\n*   [荣顶](https://juejin.cn/user/2858385963749223/posts \"https://juejin.cn/user/2858385963749223/posts\")大佬的这篇[我用 10000 张图片合成我们美好的瞬间](https://juejin.cn/post/6996431901623844894 \"https://juejin.cn/post/6996431901623844894\")\n\n结语\n--\n\n> 如果你觉得此文对你有一丁点帮助，点个赞，鼓励一下林三心哈哈。或者加入我的群哈哈，咱们一起摸鱼一起学习 : meron857287645",
	"selfDefined": "likes:195,comments:123,collects:44,likes:7501"
}