{
	"title": "「基础搭建」从零开始，基于 Webpack5 搭建一个 Vue-Cli",
	"author": "Sunshine_Lin",
	"publishTime": "2022-03-15",
	"readTime": "阅读6分钟",
	"tags": "[\"前端\",\"Webpack\",\"JavaScript中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "前言 大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心 背景 大家平时在进行Vue开发的时候，大部分人都是使用 Vue-cli 这个现成的Vue脚手架来进行开",
	"article": "前言\n--\n\n大家好，我是林三心，**用最通俗易懂的话讲最难的知识点**是我的座右铭，**基础是进阶的前提**是我的初心\n\n背景\n--\n\n大家平时在进行Vue开发的时候，大部分人都是使用 **Vue-cli** 这个现成的Vue脚手架来进行开发的，但是用它用了这么久，你难道不想自己搭一个属于自己的`Vue-cli`吗？\n\n今天我就带大家来搭建一个基本的`Vue-cli`，也可以让大家对`Webpack`有更深入的了解！建议大家一定要跟着我一步一步来哦！\n\n> 事先说明：本文只介绍vue-cli基本配置，关于优化、规范这两方面，我后面会再写两篇文章进行讲解\n\n1、建一个文件夹\n--------\n\n新建一个文件夹**my-vue-cli**用来存放项目\n\n2、初始化npm\n--------\n\n在终端中输入\n\n```js\nnpm init\n```\n\n然后一直回车就行，这样能使项目拥有一个npm管理环境，之后可以在此环境上安装我们所需要的包\n\n3、webpack、webpack-cli\n---------------------\n\n安装`webpack、webpack-cli`\n\n*   `webpack`：打包的工具\n*   `webpack-cli`：为webpack提供命令行的工具\n\n```js\nnpm i webpack webpack-cli -D\n```\n\n4、src、public\n------------\n\n在根目录下新建`src、public`这两个文件夹，前者用来放置项目主要代码，后者用来放项目公用静态资源\n\n*   `public/index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>my-vue-cli</title>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n</html>\n```\n\n*   `src/main.js`\n\n```js\nimport { add } from './tools/add.js'\n\nconsole.log(add(1, 2))\nconsole.log('我是main.js')\n```\n\n*   `src/tools/add.js`\n\n```js\n    export const add = (a, b) => {\n    return a + b\n}\n```\n\n5、入口文件\n------\n\n刚刚的`main.js`就是我们的入口文件，也就相当于整个引用树的根节点，webpack打包需要从入口文件开始查找，一直到打包所有引用文件。\n\n进行入口文件的配置，在根目录下新建`webpack.config.js`：\n\n```js\nconst path = require('path')\n\n    module.exports = {\n    // 模式 开发模式\n    mode: 'development',\n    // 入口文件 main.js\n        entry: {\n        main: './src/main.js'\n        },\n        // 输出\n            output: {\n            // 输出到 dist文件夹\n            path: path.resolve(__dirname, './dist'),\n            // js文件下\n            filename: 'js/chunk-[contenthash].js',\n            // 每次打包前自动清除旧的dist\n            clean: true,\n        }\n    }\n```\n\n6、配置打包命令\n--------\n\n到`package.json`里配置打包命令：\n\n```js\n    \"scripts\": {\n    \"build\": \"webpack\"\n    },\n```\n\n现在我们到终端输入`npm run build`，就能发现打包成功：\n\n![](/images/jueJin/ae925e47dda0409.png)\n\n但是这其实不是我们要的目的，我们的目的是将这个打包后的最终js文件，插入到刚刚的`index.html`中，因为js文件得让html文件引用，才有意义嘛！所以我们不仅要打包js，还要打包html\n\n小知识：loader和plugin\n-----------------\n\n*   `loader`：使webpack拥有解析非js文件的能力，如css、png、ts等等\n*   `plugin`：拓展webpack的打包功能，如优化体积、显示进度条等等\n\n7、打包html\n--------\n\n打包html需要用到`html-webpack-plugin`这个插件，也就是plugin，所以需要安装一下：\n\n```js\nnpm i html-webpack-plugin -D\n```\n\n并且需要在`webpack.config.js`中配置一下\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    module.exports = {\n    // 刚刚的代码...\n    \n    // 插件都放 plugins 中\n        plugins: [\n            new HtmlWebpackPlugin({\n            // 选择模板 public/index.html\n            template: './public/index.html',\n            // 打包后的名字\n            filename: 'index.html',\n            // js文件插入 body里\n            inject: 'body',\n            }),\n        ]\n    }\n```\n\n现在我们可以在终端中执行打包命令`npm run build`可以看到html被打包了，且打包后的html自动引入打包后的js文件\n\n![](/images/jueJin/41dc4a70619d4e7.png)\n\n![](/images/jueJin/dd35b6311d984ed.png)\n\n现在我们可以打开打包后的`index.html`，发现控制台可以输出，说明成功了！\n\n![](/images/jueJin/355ae003f40c481.png)\n\n打包CSS\n-----\n\n在`src`下新建`styles`文件夹，用来存放样式文件文件\n\n*   `src/styles/index.scss`\n\n```css\n    body {\n    background-color: blue;\n}\n```\n\n然后我们在入口文件`main.js`中引入\n\n```js\nimport './styles/index.scss'\n\n// 刚刚的代码...\n```\n\n我们的目的是，打包`index.scss`这个文件，并且让`index.html`自动引入打包后的css文件，所以我们需要安装以下几个东西：\n\n*   `sass、sass-loader`：可以将scss代码转成css\n*   `css-loader`：使webpack具有打包css的能力\n*   `sass-resources-loader`：可选，支持打包全局公共scss文件\n*   `mini-css-extract-plugin`：可将css代码打包成一个单独的css文件\n\n我们安装一下这些插件\n\n```js\nnpm i\nsass\nsass-loader\nsass-resources-loader\nmini-css-extract-plugin\n-D\n```\n\n然后配置一下`webpack.config.js`\n\n```js\n// 刚才的代码...\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n    module.exports = {\n    // 刚才的代码...\n        plugins: [\n        // 刚才的代码...\n            new MiniCssExtractPlugin({\n            // 将css代码输出到dist/styles文件夹下\n            filename: 'styles/chunk-[contenthash].css',\n            ignoreOrder: true,\n            }),\n            ],\n                module: {\n                    rules: [\n                        {\n                        // 匹配文件后缀的规则\n                        test: /\\.(css|s[cs]ss)$/,\n                            use: [\n                            // loader执行顺序是从右到左\n                            MiniCssExtractPlugin.loader,\n                            'css-loader',\n                            'sass-loader',\n                                // {\n                                //   loader: 'sass-resources-loader',\n                                    //   options: {\n                                        //     resources: [\n                                        //       // 放置全局引入的公共scss文件\n                                        //     ],\n                                        //   },\n                                        // },\n                                        ],\n                                        },\n                                    ]\n                                }\n                            }\n```\n\n此时我们重新执行打包命令`npm run build`，可以发现出现了打包后的css文件，且`index.html`中自动引入了css文件：\n\n![](/images/jueJin/01e172c387ee48e.png)\n\n![](/images/jueJin/72bc7df2dad04cf.png)\n\n我们可以看看页面，可以看到，body的背景已经变成蓝色，说明有效果了：\n\n![](/images/jueJin/249a1feb3af241f.png)\n\n打包图片\n----\n\nwebpack5中已经废弃了`url-loader`，打包图片可以使用`asset-module`，我们先放置一张图片在`src/assets/images`中：\n\n![](/images/jueJin/764ac63e6bdb401.png)\n\n并且改写一下`index.css`\n\n```css\n    body {\n    width: 100vw;\n    height: 100vh;\n    // 引入背景图片\n    background-image: url('../assets/images/guang.png');\n    background-size: 100% 100%;\n}\n```\n\n然后我们在`webpack.config.js`中添加打包图片的配置\n\n```js\n    module: {\n        rules: [\n        // 刚刚的代码...\n            {\n            // 匹配文件后缀的规则\n            test: /\\.(png|jpe?g|gif|svg|webp)$/,\n            type: 'asset',\n                parser: {\n                // 转base64的条件\n                    dataUrlCondition: {\n                    maxSize: 25 * 1024, // 25kb\n                }\n                },\n                    generator: {\n                    // 打包到 dist/image 文件下\n                    filename: 'images/[contenthash][ext][query]',\n                    },\n                }\n            ]\n        }\n```\n\n我们现在重新运行一下`npm run build`，发现dist下已经有了`images`这个文件夹\n\n![](/images/jueJin/2c5312ff57a845a.png)\n\n我们看一下页面背景图片已经生效，说明打包成功了！\n\n![](/images/jueJin/0f3ec5fed35a4c8.png)\n\n配置babel\n-------\n\n`babel`可以将我们项目中的高级语法转化成比较低级的语法，比如可以将`ES6`转为`ES5`，这样可以兼容一些低版本浏览器，所以是很有必要的\n\n首先安装所需的包：\n\n*   `@babel/core、babel-loader`：转换语法的工具\n*   `@babel/preset-env`：转换的一套现成规则\n*   `@babel/plugin-transform-runtime`：转换async/await所需插件\n\n```js\nnpm i\n@babel/core babel-loader\n@babel/preset-env\n@babel/plugin-transform-runtime\n-D\n```\n\n由于`babel`是针对js文件的语法转换，所以我们需要在`webpack.config.js`中去针对js进行操作\n\n```js\n    module: {\n        rules: [\n        // 刚刚的代码...\n            {\n            // 匹配js后缀文件\n            test: /\\.js$/,\n            // 排除node_modules中的js\n            exclude: /node_modules/,\n                use: [\n                'babel-loader'\n                ],\n            }\n        ]\n    }\n```\n\n单单配置了`babel-loader`还是不够的，我们还需要配置`babel`转换的规则，所以需要在根目录下创建`babel.config.js`\n\n```js\n// babel.config.js\n\n    module.exports = {\n        presets: [\n        // 配置规则\n        \"@babel/preset-env\"\n        ],\n        // 配置插件\n    plugins: [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n此时我们重新运行打包`npm run build`，我们可以发现打包后的js代码中，已经把刚刚代码中的`ES6`语法转成`ES5`语法了！可以看到刚刚代码中的`const`已经转成`ES5`语法了\n\n![](/images/jueJin/8c34c69759a6482.png)\n\n打包Vue\n-----\n\n打包Vue需要用到以下几个包：\n\n*   `vue`：Vue开发所需的依赖\n*   `vue-loader`：解析`.vue`文件的loader\n*   `vue-template-compiler`：解析vue中模板的工具\n*   `@vue/babel-preset-jsx`：支持解析vue中的jsx语法\n\n> 注意：`vue`和`vue-template-compiler`版本需要一致，这里我使用`2.6.14`这个版本，`vue-loader`这里我使用了`15.9.8`这个版本\n\n所以我们先安装一下：\n\n```js\nnpm i\nvue@2.6.14 vue-template-compiler@2.6.14\nvue-loader@15.9.8 @vue/babel-preset-jsx\n-D\n```\n\n然后我们需要去`webpack.config.js`中配置对`.vue`文件的解析\n\n```js\n// 刚才的代码...\nconst { VueLoaderPlugin } = require('vue-loader')\n\n    module.exports = {\n    // 刚才的代码...\n        plugins: [\n        // 刚才的代码...\n        new VueLoaderPlugin()\n        ],\n            module: {\n                rules: [\n                // 刚才的代码...\n                    {\n                    test: /\\.vue$/,\n                    use: 'vue-loader',\n                }\n            ]\n        }\n    }\n```\n\n并且到`babel.config.js`中配置一下，让webpack支持`.vue`文件中的`jsx`语法\n\n```js\n    module.exports = {\n        presets: [\n        \"@babel/preset-env\",\n        // 支持vue中的jsx语法\n        \"@vue/babel-preset-jsx\"\n        ],\n    plugins: [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n现在我们可以在`src`下新建一个`App.vue`\n\n```js\n<template>\n<div class=\"box\">我是App哈哈哈哈</div>\n</template>\n\n<script>\nexport default {}\n</script>\n\n<style lang=\"scss\">\n    .box {\n    width: 500px;\n    height: 200px;\n    color: #fff;\n    background-color: #000;\n}\n</style>\n```\n\n然后改写一下`src/main.js`\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\n\n    new Vue({\n    render: (h) => h(App),\n    }).$mount('#app')\n```\n\n此时我们重新运行`npm run build`，我们可以看看页面的效果，说明打包成功啦！\n\n![](/images/jueJin/b5069f0d40194bd.png)\n\n配置路径别名\n------\n\n有时候文件引用搁着太多层，引用起来会看起来很不明确，比如 `../../../../../App.vue`，所以我们可以配置一下别名`alia`\n\n```js\n    module.exports = {\n    // 刚才的代码...\n        resolve: {\n        // 路径别名\n            alias: {\n            '@': path.resolve('./src'),\n            assets: '~/assets',\n            tools: '~/tools'\n            },\n            // 引入文件时省略后缀\n            extensions: ['.js', '.ts', '.less', '.vue'],\n            },\n        }\n```\n\n现在别名配置完成啦：\n\n*   配置前：`../../../../../App.vue`\n*   配置后：`@/App.vue`\n\nwebpack-dev-server\n------------------\n\n刚刚我们发现，每改一次代码就得重新打包一次，非常繁琐，有没有可以改代码自动重新打包的呢？这就要用到`webpack-dev-server`\n\n```js\nnpm i webpack-dev-server -D\n```\n\n到`webpack.config.js`中配置`devServer`\n\n```js\n    devServer: {\n    // 自定义端口号\n    // port:7000,\n    // 自动打开浏览器\n    open: true\n    },\n```\n\n然后到`package.json`中配置一下启动命令\n\n```js\n    \"scripts\": {\n    \"build\": \"webpack\",\n    \"serve\": \"webpack serve\"\n    },\n```\n\n此时我们运行`npm run serve`就可以启动项目啦！\n\n区分环境\n----\n\n我们不能把所有配置都配置在一个`webpack.config.js`中，因为我们有两个环境`development(开发环境)、production(生产环境)`，所以我们在根目录下创建`build文件夹`，并创建三个文件\n\n*   `webpack.base.js`：两个环境共用配置\n    *   入口，输出配置\n    *   各种文件的处理\n    *   进度条展示\n    *   路径别名\n*   `webpack.dev.js`：开发环境独有配置\n    *   webpack-dev-server\n    *   不同的source-map模式\n    *   不同的环境变量\n*   `webpack.prod.js`：生产环境独有配置\n    *   不同的source-map模式\n    *   不同的环境变量\n\n我们需要先安装一个合并插件`webpack-merge`，用于两个环境的配置可以合并公共的配置\n\n```js\nnpm i webpack-merge -D\n```\n\n然后我们在根目录下新建一个`build文件夹`，并在此文件夹下新建`webpack.base.js、webpack.dev.js、webpack.config.js`\n\n*   `webpack.base.js`\n\n```js\n// 公共配置\n\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst { VueLoaderPlugin } = require('vue-loader')\n    module.exports = {\n    // 入口文件 main.js\n        entry: {\n        main: './src/main.js'\n        },\n        // 输出\n            output: {\n            // 输出到 dist文件夹\n            // 记得改路径\n            path: path.resolve(__dirname, '../dist'),\n            // js文件下\n            filename: 'js/chunk-[contenthash].js',\n            // 每次打包前自动清除旧的dist\n            clean: true,\n            },\n                plugins: [\n                    new HtmlWebpackPlugin({\n                    // 选择模板 public/index.html\n                    template: './public/index.html',\n                    // 打包后的名字\n                    filename: 'index.html',\n                    // js文件插入 body里\n                    inject: 'body',\n                    }),\n                        new MiniCssExtractPlugin({\n                        // 将css代码输出到dist/styles文件夹下\n                        filename: 'styles/chunk-[contenthash].css',\n                        ignoreOrder: true,\n                        }),\n                        new VueLoaderPlugin()\n                        ],\n                            module: {\n                                rules: [\n                                    {\n                                    // 匹配文件后缀的规则\n                                    test: /\\.(css|s[cs]ss)$/,\n                                        use: [\n                                        // loader执行顺序是从右到左\n                                        MiniCssExtractPlugin.loader,\n                                        'css-loader',\n                                        'sass-loader',\n                                            // {\n                                            //   loader: 'sass-resources-loader',\n                                                //   options: {\n                                                    //     resources: [\n                                                    //       // 放置全局引入的公共scss文件\n                                                    //     ],\n                                                    //   },\n                                                    // },\n                                                    ],\n                                                    },\n                                                        {\n                                                        // 匹配文件后缀的规则\n                                                        test: /\\.(png|jpe?g|gif|svg|webp)$/,\n                                                        type: 'asset',\n                                                            parser: {\n                                                            // 转base64的条件\n                                                                dataUrlCondition: {\n                                                                maxSize: 25 * 1024, // 25kb\n                                                            }\n                                                            },\n                                                                generator: {\n                                                                // 打包到 dist/image 文件下\n                                                                filename: 'images/[contenthash][ext][query]',\n                                                                },\n                                                                },\n                                                                    {\n                                                                    test: /\\.js$/,\n                                                                    // 排除node_modules中的js\n                                                                    exclude: /node_modules/,\n                                                                        use: [\n                                                                        'babel-loader'\n                                                                        ],\n                                                                        },\n                                                                            {\n                                                                            test: /\\.vue$/,\n                                                                            use: 'vue-loader',\n                                                                        }\n                                                                    ]\n                                                                    },\n                                                                        resolve: {\n                                                                        // 路径别名\n                                                                            alias: {\n                                                                            '@': path.resolve('./src'),\n                                                                            assets: '~/assets'\n                                                                            },\n                                                                            // 引入文件时省略后缀\n                                                                        extensions: ['.js', '.ts', '.less', '.vue']\n                                                                        },\n                                                                    }\n```\n\n*   `webpack.dev.js`\n\n```js\n// 开发环境\n\nconst { merge } = require('webpack-merge')\nconst base = require('./webpack.base')\n\n    module.exports = merge(base, {\n    mode: 'development',\n        devServer: {\n        open: true,\n        // hot: true,\n    }\n    })\n```\n\n*   `webpack.prod.js`\n\n```js\n// 生产环境\n\nconst { merge } = require('webpack-merge')\nconst base = require('./webpack.base')\n\n    module.exports = merge(base, {\n    mode: 'production'\n    })\n```\n\n然后我们到`package.json`修改一下指令\n\n```js\n    \"scripts\": {\n    \"serve\": \"webpack serve --config ./build/webpack.dev\",\n    \"build\": \"webpack --config ./build/webpack.prod\"\n    },\n```\n\n接下来我们运行这两个命令，发现都成功了：\n\n*   `npm run build`\n*   `npm run serve`\n\n构建进度条\n-----\n\n无论是启动项目时还是打包时，都需要进度条的展示，所以需要把进度条配置在`webpack.base`中，我们需要先安装进度条的插件`progress-bar-webpack-plugin`\n\n```js\nnpm i progress-bar-webpack-plugin -D\n``````js\n// webpack.base.js\n\n// 刚刚的代码...\nconst ProgressBarPlugin = require('progress-bar-webpack-plugin')\nconst chalk = require('chalk')\n\n    module.exports = {\n    // 刚刚的代码...\n        plugins: [\n        // 刚刚的代码...\n            new ProgressBarPlugin({\n            format: ` build [:bar] ${chalk.green.bold(':percent')} (:elapsed seconds)`,\n            })\n            ],\n            // 刚刚的代码...\n        }\n```\n\n现在我们可以看到无论启动项目或者打包，都会有进度条了\n\n![](/images/jueJin/fe2fc73937974b7.png)\n\nsource-map\n----------\n\n`source-map`的作用：代码报错时，能快速定位到出错位置，`webpack5`的所有`source-map模式`可以看webpack官网：[webpack.docschina.org/configurati…](https://link.juejin.cn?target=https%3A%2F%2Fwebpack.docschina.org%2Fconfiguration%2Fdevtool%2F%23root \"https://webpack.docschina.org/configuration/devtool/#root\")\n\n这里我使用两种模式：\n\n*   `development`：使用`eval-cheap-module-source-map`模式，能具体定位到源码位置和源码展示，适合开发模式，体积较小\n*   `production`：使用`nosources-source-map`，只能定位源码位置，不能源码展示，体积较小，适合生产模式\n\n所以我们开始配置`source-map`\n\n*   `webpack.dev.js`\n\n```js\n// 刚才的代码...\n    module.exports = merge(base, {\n    // 刚才的代码...\n    devtool: 'eval-cheap-module-source-map'\n    })\n```\n\n*   `webpack.prod.js`\n\n```js\n// 刚才的代码...\n    module.exports = merge(base, {\n    // 刚才的代码...\n    devtool: 'nosources-source-map'\n    })\n```\n\n环境变量\n----\n\n配置`devlopment、production`这两个环境的环境变量\n\n*   `webpack.dev.js`\n\n```js\n// 刚才的代码...\nconst webpack = require('webpack')\n\n    module.exports = merge(base, {\n    // 刚才的代码...\n        plugins: [\n        // 定义全局变量\n            new webpack.DefinePlugin({\n                process: {\n                    env: {\n                    NODE_DEV: JSON.stringify('development'),\n                    // 这里可以定义你的环境变量\n                    // VUE_APP_URL: JSON.stringify('https://xxx.com')\n                    },\n                    },\n                    }),\n                ]\n                })\n```\n\n*   `webpack.prod.js`\n\n```js\n// 刚才的代码...\nconst webpack = require('webpack')\n\n    module.exports = merge(base, {\n    // 刚才的代码...\n        plugins: [\n        // 定义全局变量\n            new webpack.DefinePlugin({\n                process: {\n                    env: {\n                    NODE_DEV: JSON.stringify('prodction'),\n                    // 这里可以定义你的环境变量\n                    // VUE_APP_URL: JSON.stringify('https://xxx.com')\n                    },\n                    },\n                    }),\n                ]\n                })\n```\n\n优化、规范\n-----\n\n关于优化、规范，我会另外再写两篇文章来讲\n\n结语\n--\n\n我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，摸鱼群，点这个 --> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n![image.png](/images/jueJin/e76033b80fea4c8.png)",
	"selfDefined": "likes:90,comments:0,collects:156,likes:3936"
}