{
	"title": "还在从零开始搭建项目推荐一款高颜值的前后端分离脚手架！",
	"author": "MacroZheng",
	"publishTime": "2021-09-08",
	"readTime": "阅读6分钟",
	"tags": "[\"Java\",\"Spring Boot中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "从零开始搭建项目，没有好用的脚手架怎么行！最近发现一款高颜值的前后端分离脚手架`sa-plus`，自带代码生成器，可一键生成前端、后端、API文档代码，推荐给大家！",
	"article": "> 从零开始搭建项目，没有好用的脚手架怎么行！最近发现一款高颜值的前后端分离脚手架`sa-plus`，自带代码生成器，可一键生成前端、后端、API文档代码，推荐给大家！\n\nSpringBoot实战电商项目mall（50k+star）地址：[github.com/macrozheng/…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmacrozheng%2Fmall \"https://github.com/macrozheng/mall\")\n\nsa-plus简介\n---------\n\n一款基于SpringBoot的快速开发框架，内置代码生成器。\n\n项目特点：\n\n*   集成常用开发功能，包括文件上传、角色授权、全局异常处理、Redis控制台、API日志统计等。\n*   内置代码生成器，高自动化代码生成，可一键生成后端、前端和API文档代码。\n*   通过给表添加注释来生成代码，数据库表建好了，项目也就开发一半了。\n\n项目架构\n----\n\n> sa-plus前后端使用的技术栈还是非常主流的，下面我们来看下。\n\n### 使用技术栈\n\n*   后端技术栈：MySql 5.7、SpringBoot、Mybatis-Plus、Druid、PageHelper、Redis、Sa-Token、Lombok、Hutool、FastJson\n    \n*   前端技术栈：Vue、Element-Ui、WangEditor、Jquery、Layer、Swiper、Echarts\n    \n\n### 模块介绍\n\n*   sp-server：SpringBoot后端代码。\n*   sp-admin：Vue管理系统前端代码。\n*   sp-apidoc：Docsify API接口文档代码。\n*   sp-generate：代码生成器，可生成后端、前端、API文档。\n*   sp-devdoc：sa-plus本地文档。\n*   doc：其它文件，存放SQL脚本。\n\n快速开始\n----\n\n> `sp-server`、`sp-admin`、`sp-apidoc`为sa-plus的主要项目模块，我们先把它们启动起来。\n\n### sp-server\n\n*   先在MySql中创建`sp-dev`数据库，导入项目`doc`目录下的`sa-plus.sql`脚本，导入成功后将生成如下表；\n\n![](/images/jueJin/fc3f21358662443.png)\n\n*   将`sp-server`模块导入到IDEA中，导入成功后项目结构如下；\n\n![](/images/jueJin/4fb438e742504cc.png)\n\n*   修改项目的配置文件`application-dev.yml`，将MySql和Redis配置修改为你自己的连接配置；\n\n```yaml\nspring:\n# 数据源配置\ndatasource:\ntype: com.alibaba.druid.pool.DruidDataSource\nurl: jdbc:mysql://127.0.0.1:3306/sp-dev?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\nusername: root\npassword: root\n\n# redis配置\nredis:\n# Redis数据库索引（默认为0）\ndatabase: 1\n# Redis服务器地址\nhost: 127.0.0.1\n# Redis服务器连接端口\nport: 6379\n# Redis服务器连接密码（默认为空）\n# password:\n# 连接超时时间（毫秒）\ntimeout: 5000ms\n```\n\n*   运行启动类`SpServerApplication`的`main`方向，至此后端服务启动成功。\n\n```rust\n2021-08-09 16:46:00.478   INFO  -->  Initializing ExecutorService 'applicationTaskExecutor'\n____ ____    ___ ____ _  _ ____ _  _\n[__  |__| __  |  |  | |_/  |___ |\\ |\n___] |  |     |  |__| | _ |___ | |\nDevDoc：http://sa-token.dev33.cn (v1.24.0)\nGitHub：https://github.com/dromara/sa-token\n2021-08-09 16:46:00.744   INFO  -->  Initializing ExecutorService 'taskScheduler'\n2021-08-09 16:46:00.778   INFO  -->  Starting ProtocolHandler [\"http-nio-8099\"]\n2021-08-09 16:46:00.792   INFO  -->  Tomcat started on port(s): 8099 (http) with context path ''\n2021-08-09 16:46:00.802   INFO  -->  Started SpServerApplication in 3.871 seconds (JVM running for 4.797)\n\n------------- sa-plus (dev) 启动成功 --by 2021-08-09 16:46:00 -------------\n```\n\n### sp-admin\n\n*   将`sp-admin`模块导入到IDEA中，导入成功后项目结构如下；\n\n![](/images/jueJin/da1f58da467a41d.png)\n\n*   打开`index.html`页面，点击右上角按钮运行到浏览器即可；\n\n![](/images/jueJin/80669a73db0342a.png)\n\n*   使用默认账号密码登录后，即可访问`sa-plus`的首页，界面还是挺炫酷的；\n\n![](/images/jueJin/cacb4ea77b804c4.png)\n\n*   我们可以稍稍体验下`sa-plus`的基础功能，比如`Redis控制台`功能，可以查看Redis状态和管理Redis中的数据；\n\n![](/images/jueJin/b3a6f714f690470.png)\n\n*   还有`API请求日志`功能，可以查看API请求记录和请求耗时；\n\n![](/images/jueJin/de89aaa5c280480.png)\n\n*   还有权限管理中的`角色管理`功能，可以创建角色并给角色分配权限；\n\n![](/images/jueJin/62fb3aa3b1be494.png)\n\n*   还有权限管理中的`菜单管理`，其实我们可以发现`sa-plus`中的菜单和权限是绑定在一起的，而菜单是从前端的路由中获取的，给角色分配了菜单即分配了菜单下的权限，这样做的话想做到接口级权限就比较麻烦了；\n\n![](/images/jueJin/7ddf624a194d40b.png)\n\n*   还有权限管理中的`用户管理`，可以管理用户信息。\n\n![](/images/jueJin/3e13f77cac0547c.png)\n\n### sp-apidoc\n\n*   将`sp-apidoc`模块导入到IDEA中，导入成功后项目结构如下；\n\n![](/images/jueJin/8fc3732d1f204c6.png)\n\n*   打开`index.html`页面，点击右上角按钮运行到浏览器即可，此时我们可以发现API文档中还没有任何内容。\n\n![](/images/jueJin/557d5290f2c24e9.png)\n\n代码生成器\n-----\n\n> 使用代码生成器，可以根据数据库表直接生成前端、后端及API文档代码，让我们来体验下它有何神奇之处。\n\n*   将`sp-generate`模块导入到IDEA中，导入成功后项目结构如下；\n\n![](/images/jueJin/794f70292caf44a.png)\n\n*   然后往MySql中导入测试数据，导入项目`doc`目录下的`test-data.sql`脚本，导入成功后新增如下表；\n\n![](/images/jueJin/90d8bc0d5bdb40b.png)\n\n*   接下来修改`SpGenerateApplication`中的MySql连接配置和代码生成目录配置；\n\n```java\n@SqlFlySetup\n@SpringBootApplication\n    public class SpGenerateApplication {\n    \n    // 直接运行代码生成器\n        public static void main(String[] args) {\n        \n        // 启动springboot\n        SpringApplication.run(SpGenerateApplication.class, args);\n        \n        \n        // ===================================  设置连接信息  ===================================\n        FlyConfig config = new FlyConfig();\n        config.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        config.setUrl(\"jdbc:mysql://127.0.0.1:3306/sp-dev?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC\");\n        config.setUsername(\"root\");\n        config.setPassword(\"root\");\n        config.setPrintSql(true);        // 是否打印sql\n        FlyObjects.setConfig(config);    // 注入到框架中\n        \n        \n        // ===================================  一些全局设置  ===================================\n        GenCfgManager.cfg\n        .setProjectPath(\"D:/developer/demo/sa-plus/\")    // 总项目地址 (生成代码的路径)\n        .setServerProjectName(\"sp-server\")                // 服务端 - 项目名称\n        //         .setServerProjectName(\"sp-com/sp-core\")          // 服务端 - 项目名称 (sp-com多模块版填此格式)\n        .setCodePath(\"src/main/java/\")                    // 服务端代码 - 存放路径\n        .setPackagePath(\"com.pj.project\")                // 服务端代码 - 总包名\n        .setPackage_utils(\"com.pj.utils.sg.*\")            // 服务端代码 - util类包地址\n        .setAuthor(\"macrozheng\");                        // 服务端代码 - 代码作者\n    }\n}\n```\n\n*   然后运行启动类`SpGenerateApplication`的`main`方法生成代码，运行成功后，`sp-server`的`project`包下会生成后端代码；\n\n![](/images/jueJin/0f097c300b504fa.png)\n\n*   `sp-admin`的`sa-html`目录下会生成前端代码，还会在`menu-list.js`中追加菜单信息；\n\n![](/images/jueJin/494c61d998ce4f3.png)\n\n*   `sp-apidoc`的`project`目录也下会生成API文档代码；\n\n![](/images/jueJin/0891d1780d394bf.png)\n\n*   重新运行前后端代码后，我们暂时还无法看到新增的菜单，还需要给角色分配权限才可以查看；\n\n![](/images/jueJin/4110883e1d6c49c.png)\n\n*   之后我们可以看到，对于商品表来说，列表页面和添加页面已经给我们生成好了；\n\n![](/images/jueJin/a21ae8bfe30948a.png)\n\n*   其实`sa-plus`是通过解析数据库表中的注释来生成代码的，我们可以看下商品表的SQL语句，其中有很多包含`[]`的注释，`sa-plus`就是根据这些规则来生成代码的；\n\n```sql\nCREATE TABLE `ser_goods` (\n`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '记录id [num no-add]',\n`name` varchar(200) DEFAULT NULL COMMENT '商品名称 [text j=like]',\n`avatar` varchar(512) DEFAULT NULL COMMENT '商品头像 [img]',\n`image_list` varchar(2048) DEFAULT NULL COMMENT '轮播图片 [img-list]',\n`content` text COMMENT '图文介绍 [f]',\n`money` int(11) DEFAULT '0' COMMENT '商品价格 [num]',\n`type_id` bigint(20) DEFAULT NULL COMMENT '所属分类 [num]',\n`stock_count` int(11) DEFAULT '0' COMMENT '剩余库存 [num]',\n`status` int(11) DEFAULT '1' COMMENT '商品状态 (1=上架,2=下架) [j]',\n`create_time` datetime DEFAULT NULL COMMENT '创建日期 [date-create]',\n`update_time` datetime DEFAULT NULL COMMENT '更新日期 [date-update]',\nPRIMARY KEY (`id`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=1005 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='商品表\\n[table icon=el-icon-apple]\\n[fk-s js=(type_id=sys_type.id), show=name.所属分类, drop]\\n';\n```\n\n*   这里的规则比较多，大家可以自行对照下表查看；\n\n![](/images/jueJin/1106de10928f482.png)\n\n*   最后我们再来看下已经生成好的API文档，商品表的CRUD接口文档都有了，非常详细；\n\n![](/images/jueJin/f85e69491318405.png)\n\n*   而且API文档中还提供了接口测试功能，是不是很贴心！\n\n![](/images/jueJin/acb135f0dbc246b.png)\n\n总结\n--\n\n通过上面的一波实践，我们可以发现sa-plus确实是个有意思的框架。不仅提供了项目的基础功能，还提供了代码生成器，可以一键生成前后端及API文档代码，大大提高了开发效率。但是没有一种代码生成器是万能的，复杂的代码还是需要手写。sa-plus的权限功能把菜单和权限绑定在了一起，使用起来不太灵活，还是可以改进下的。\n\n参考资料\n----\n\n官方文档：[sa-plus.dev33.cn/](https://link.juejin.cn?target=http%3A%2F%2Fsa-plus.dev33.cn%2F \"http://sa-plus.dev33.cn/\")\n\n项目地址\n----\n\n[gitee.com/click33/sa-…](https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fclick33%2Fsa-plus \"https://gitee.com/click33/sa-plus\")\n\n> 本文 GitHub [github.com/macrozheng/…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmacrozheng%2Fmall-learning \"https://github.com/macrozheng/mall-learning\") 已经收录，欢迎大家Star！",
	"selfDefined": "likes:93,comments:4,collects:157,likes:12188"
}