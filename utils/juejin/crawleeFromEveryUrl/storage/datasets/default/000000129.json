{
	"title": "「万字总结」熬夜总结50个JS的高级知识点，全都会你就是神！！！",
	"author": "Sunshine_Lin",
	"publishTime": "2021-10-25",
	"readTime": "阅读24分钟",
	"tags": "[\"前端\",\"JavaScript\",\"ECMAScript 6中文技术社区\",\"前端开发社区\",\"前端技术交流\",\"前端框架教程\",\"JavaScript 学习资源\",\"CSS 技巧与最佳实践\",\"HTML5 最新动态\",\"前端工程师职业发展\",\"开源前端项目\",\"前端技术趋势\"]",
	"description": "本文已参与「掘力星计划」，赢取创作大礼包，挑战创作激励金。 前言 大家好，我是林三心，基础是进阶的前提，上一篇，我给大家分享了我这一年来平时记录的工作中碰到的50个JS基础知识点，今天就给大家分享一下",
	"article": "本文已参与「[掘力星计划](https://juejin.cn/post/7012210233804079141/ \"https://juejin.cn/post/7012210233804079141/\")」，赢取创作大礼包，挑战创作激励金。\n\n前言\n--\n\n大家好，我是林三心，**基础是进阶的前提**，上一篇，我给大家分享了我这一年来平时记录的工作中碰到的50个JS基础知识点，今天就给大家分享一下，我这一年来，工作中遇到的50个JS高级知识点吧！！！\n\n知识点\n---\n\n### 1、undeclared 与 undefined 的区别？\n\n*   undefined：声明了变量，但是没有赋值\n*   undeclared：没有声明变量就直接使用\n\n```js\nvar a; //undefined\nb;    // b is not defined\n```\n\n### 2、let & const与 var 的区别？\n\n*   var存在变量提升，可重复声明同一变量，声明的变量均可改\n*   let没有变量提升，不可重复声明同一变量，声明的变量均可改\n*   const没有变量提升，不可重复声明同一变量，声明的基本数据类型不可改，引用类型可改属性，不可只声明变量而不赋值\n\n### 3、暂时性死区问题\n\n```js\nvar a = 100;\n\n    if(1){\n    a = 10;\n    //在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a，\n    // 而这时，还未到声明时候，所以控制台Error:Cannot access 'a' before initialization\n    let a = 1;\n}\n```\n\n### 4、获取DOM元素有哪些方法\n\n> 注：`document`可以换成`dom节点`，那么就是搜索范围就是`dom节点`的`子节点内`\n\n方法\n\n描述\n\n返回类型\n\ndocument.getElementById(id)\n\n通过id获取dom\n\n符合条件的dom对象\n\ndocument.getElementsByTagName(tagName)\n\n通过标签名获取dom\n\n符合条件的所有dom对象组成的类数组\n\ndocument.getElementsByClassName(class)\n\n通过class获取dom\n\n符合条件的所有dom对象组成的类数组\n\ndocument.getElementsByName(name)\n\n通过标签的属性name获取dom\n\n符合条件的所有dom对象组成的类数组\n\ndocument.querySelector(选择器)\n\n通过选择器获取dom\n\n符合条件的第一个dom对象\n\ndocument.querySelectorAll(选择器)\n\n通过选择器获取dom\n\n符合条件的所有dom对象组成的类数组\n\n### 5、操作DOM元素有哪些方法\n\n标题\n\n描述\n\ncreateElement\n\n创建一个标签节点\n\ncreateTextNode\n\n创建一个文本节点\n\ncloneNode(deep)\n\n复制一个节点，连同属性与值都复制，deep为true时，连同后代节点一起复制，不传或者传false，则只复制当前节点\n\ncreateDocumentFragment\n\n创建一个文档碎片节点\n\nappendChild\n\n追加子元素\n\ninsertBefore\n\n将元素插入前面\n\nremoveChild\n\n删除子元素\n\nreplaceChild\n\n替换子元素\n\ngetAttribute\n\n获取节点的属性\n\ncreateAttribute\n\n创建属性\n\nsetAttribute\n\n设置节点属性\n\nromoveAttribute\n\n删除节点属性\n\nelement.attributes\n\n将属性生成类数组对象\n\n### 6、DOM的类型有哪几种？\n\n12种\n\n```scss\n元素节点            　　Node.ELEMENT_NODE(1)\n属性节点            　　Node.ATTRIBUTE_NODE(2)\n文本节点            　　Node.TEXT_NODE(3)\nCDATA节点             Node.CDATA_SECTION_NODE(4)\n实体引用名称节点    　　 Node.ENTRY_REFERENCE_NODE(5)\n实体名称节点        　　Node.ENTITY_NODE(6)\n处理指令节点        　　Node.PROCESSING_INSTRUCTION_NODE(7)\n注释节点            　 Node.COMMENT_NODE(8)\n文档节点            　 Node.DOCUMENT_NODE(9)\n文档类型节点        　　Node.DOCUMENT_TYPE_NODE(10)\n文档片段节点        　　Node.DOCUMENT_FRAGMENT_NODE(11)\nDTD声明节点            Node.NOTATION_NODE(12)\n```\n\n### 7、JS的作用域及作用域链\n\n#### 什么是作用域呢？\n\n在 Javascript 中，作用域分为 `全局作用域` 和 `函数作用域`\n\n*   全局作用域：代码在程序任何地方都能访问，window对象的内置属性都属于全局作用域\n*   函数作用域：在固定的代码片段才能被访问\n\n![image.png](/images/jueJin/1bc495bd8b13437.png)\n\n作用域有上下级关系，上下级关系的确定就看函数是在哪个作用域下创建的。如上，fn作用域下创建了bar函数，那么“fn作用域”就是“bar作用域”的上级。\n\n作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。\n\n#### 什么是作用域链？\n\n一般情况下，变量取值到 创建 这个变量 的函数的作用域中取值\n\n但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链\n\n```js\nvar x = 10;\n\n    function fn(){\n    console.log(x);\n}\n\n    function show(f){\n    var x = 20;\n    f();    // 10\n}\n\nshow(fn);\n```\n\n![image.png](/images/jueJin/bc9141580e90438.png)\n\n### 8、数组的splice 与 slice 的区别？\n\n方法\n\n参数\n\n描述\n\nsplice\n\nsplice(start, num, item1, item2, ...)\n\n从start索引开始，截取num个元素，并插入item1、item2到原数组里，影响原数组\n\nslice\n\nslice(start, end)\n\n从start开始，截取到end - 1，如果没有end，则截取到最后一个元素，不影响原数组\n\n### 9、substr 和 substring 的区别？\n\n方法\n\n参数\n\n描述\n\nsubstr\n\nsubstr(start,length)\n\n返回从start位置开始length长度的子串\n\nsubstring\n\nsubstring(start,end)\n\n返回从start位置开始到end位置的子串（不包含end）\n\n### 10、includes 比 indexOf好在哪？\n\nincludes可以检测`NaN`，indexOf不能检测`NaN`，includes内部使用了`Number.isNaN`对`NaN`进行了匹配\n\n### 11、下面代码输出的结果？\n\n```js\n    for(var i = 0; i < 3; i++){\n        setTimeout(function(){\n        console.log(i);\n        },0);\n        };\n```\n\n答案：3，3，3\n\n解决方法\n\n```js\n    for(let i = 0; i < 3; i++){\n        setTimeout(function(){\n        console.log(i);\n        },0);\n        };\n        // 0 1 2\n``````js\n    for (var i = 0; i < 3; i++) {\n        (function(i) {\n            setTimeout(function () {\n            console.log(i);\n            }, 0, i)\n            })(i)\n            };\n            // 0 1 2\n```\n\n### 12、什么是Promise？解决了什么问题？\n\n有什么用呢？\n\n*   1、解决回调地狱问题\n*   2、代码可读性提高\n*   3、你可以信任Promise，它的状态只会改变一次并且不可逆\n\n推荐阅读\n\n*   是什么：推荐阮一峰大佬的文章[Promise 对象](https://link.juejin.cn?target=https%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fpromise \"https://es6.ruanyifeng.com/#docs/promise\")\n*   原理：推荐我这篇[手写Promise原理，最通俗易懂的版本！！！](https://juejin.cn/post/6994594642280857630 \"https://juejin.cn/post/6994594642280857630\")【阅读：1.2w，点赞：466】\n\n### 13、什么是async/await？解决了什么问题？\n\n对于async/await，我总结为一句话**async/await是generator + Promise的语法糖，它用同步方式执行异步代码**\n\n推荐阅读\n\n*   async/await的用法：阮一峰大佬的文章[async和await](https://link.juejin.cn?target=https%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fasync \"https://es6.ruanyifeng.com/#docs/async\")\n*   async/await的原理：推荐我的这篇[7张图，20分钟就能搞定的async/await原理！为什么要拖那么久？](https://juejin.cn/post/7007031572238958629 \"https://juejin.cn/post/7007031572238958629\")【阅读：2.1w，点赞：630】\n\n### 14、常用的正则表达式有哪些？\n\n看我这篇文章[有了这25个正则表达式，代码效率提高80%](https://juejin.cn/post/7016871226899431431 \"https://juejin.cn/post/7016871226899431431\")【阅读：1.6w 点赞：830】\n\n### 15、JS延迟加载的方法有哪些？\n\n*   1、`<script async src=\"script.js\"></script>`：给script标签加async属性，则加载和渲染后续文档元素的过程将和 `script.js` 的加载与执行并行进行（异步）\n*   2、`<script defer src=\"script.js\"></script>`：给script标签加defer属性，加载后续文档元素的过程将和 `script.js` 的加载并行进行（异步），但是 `script.js` 的执行要在所有元素解析完成之后，`DOMContentLoaded` 事件触发之前完成\n*   3、动态创建script标签：等到`DOMContentLoaded` 事件触发时，生成一个script标签，渲染到页面上上\n*   4、setTimeout定时器延迟代码执行\n\n### 16、new操作符为什么能创建一个实例对象？\n\n分析一下new的整个过程：\n\n*   1、创建一个空对象\n*   2、继承构造函数的原型\n*   3、this指向obj，并调用构造函数\n*   4、返回对象\n\n简单实现一下new：\n\n```js\n    function myNew (fn, ...args) {\n    // 第一步：创建一个空对象\nconst obj = {}\n\n// 第二步：继承构造函数的原型\nobj.__proto__ =  fn.prototype\n\n// 第三步：this指向obj，并调用构造函数\nfn.apply(obj, args)\n\n\n// 第四步：返回对象\nreturn obj\n}\n```\n\n### 17、什么是文档碎片？\n\n*   是什么：一个容器，用于暂时存放创建的dom元素，使用`document.createDocumentFragment()`创建\n*   有什么用：将需要添加的大量元素 先添加到文档碎片 中，再将文档碎片添加到需要插入的位置，大大减少dom操作，提高性能 例子\n\n```js\nvar oFragmeng = document.createDocumentFragment();\n\n\nfor(var i=0;i<10000;i++)\n\n    {\n    \n    var op = document.createElement(\"span\");\n    \n    var oText = document.createTextNode(i);\n    \n    op.appendChild(oText);\n    \n    //先附加在文档碎片中\n    \n    oFragmeng.appendChild(op);\n    \n}\n\n\n//最后一次性添加到document中\n\ndocument.body.appendChild(oFragmeng);\n```\n\n### 18、async/await如何检测报错？\n\n推荐这篇[async await 更优雅的错误处理](https://juejin.cn/post/7011299888465969166 \"https://juejin.cn/post/7011299888465969166\")【阅读量：1.5w，点赞：210】\n\n### 19、宏任务与微任务有哪些？\n\n#### 宏任务\n\n#\n\n浏览器\n\nNode\n\n**I/O**\n\n✅\n\n✅\n\n**setTimeout**\n\n✅\n\n✅\n\n**setInterval**\n\n✅\n\n✅\n\n**setImmediate**\n\n❌\n\n✅\n\n**requestAnimationFrame**\n\n✅\n\n❌\n\n#### 微任务\n\n#\n\n浏览器\n\nNode\n\n**Promise.prototype.then catch finally**\n\n✅\n\n✅\n\n**process.nextTick**\n\n❌\n\n✅\n\n**MutationObserver**\n\n✅\n\n❌\n\n### 20、宏任务与微任务的执行顺序？说说EventLoop？\n\n看看我这篇[setTimeout+Promise+Async输出顺序？很简单呀！](https://juejin.cn/post/7016298598883131423 \"https://juejin.cn/post/7016298598883131423\")\n\n### 21、Object.defineProperty(target, key, options)，options可传什么参数？\n\n*   value：给target\\[key\\]设置初始值\n*   get：调用target\\[key\\]时触发\n*   set：设置target\\[key\\]时触发\n*   writable：规定target\\[key\\]是否可被重写，默认false\n*   enumerable：规定了key是否会出现在target的枚举属性中，默认为false\n*   configurable：规定了能否改变options，以及删除key属性，默认false，具体详细请看[Object.defineProperty函数的configurable配置](https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2FgetTheCheeseOfGod%2Farticle%2Fdetails%2F92411642 \"https://blog.csdn.net/getTheCheeseOfGod/article/details/92411642\")\n\n### 22、什么是防抖？什么是节流？\n\n操作\n\n描述\n\n场景\n\n防抖\n\n频繁去触发一个事件，但是只触发最后一次。以最后一次为准\n\n1、电脑息屏时间，每动一次电脑又重新计算时间  \n2、input框变化频繁触发事件可加防抖  \n3、频繁点击按钮提交表单可加防抖\n\n节流\n\n频繁去触发一个事件，但是只能每隔一段时间触发一次\n\n1、滚动频繁请求列表可加节流  \n2、游戏里长按鼠标，但是动作都是每隔一段时间做一次\n\n### 23、什么是高阶函数？简单实现一个？\n\n高阶函数：英文叫Higher-order function。JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。\n\n```js\n// 简单的高阶函数\n    function add(x, y, f) {\n    return f(x) + f(y);\n}\n\n//用代码验证一下：\nadd(-5, 6, Math.abs); // 11\n```\n\n像数组的`map、reduce、filter`这些都是高阶函数\n\n### 24、什么是函数柯里化？简单实现一个？\n\n柯里化，英语：Currying(果然是满满的英译中的既视感)，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。\n\n```js\n// 普通的add函数\n    function add(x, y) {\n    return x + y\n}\n\n// Currying后\n    function curryingAdd(x) {\n        return function (y) {\n        return x + y\n    }\n}\n\nadd(1, 2)           // 3\ncurryingAdd(1)(2)   // 3\n```\n\n#### 好处\n\n*   1、参数复用\n\n```js\n// 正常正则验证字符串 reg.test(txt)\n\n// 普通情况\n    function check(reg, txt) {\n    return reg.test(txt)\n}\n\ncheck(/\\d+/g, 'test')       //false\ncheck(/[a-z]+/g, 'test')    //true\n\n// Currying后\n    function curryingCheck(reg) {\n        return function(txt) {\n        return reg.test(txt)\n    }\n}\n\nvar hasNumber = curryingCheck(/\\d+/g)\nvar hasLetter = curryingCheck(/[a-z]+/g)\n\nhasNumber('test1')      // true\nhasNumber('testtest')   // false\nhasLetter('21212')      // false\n```\n\n*   2、延迟执行 其实`Function.prototype.bind`就是科里化的实现例子\n\n```js\n    function sayKey(key) {\n    console.log(this[key])\n}\n    const person = {\n    name: 'Sunshine_Lin',\n    age: 23\n}\n// call不是科里化\nsayKey.call(person, 'name') // 立即输出 Sunshine_Lin\nsayKey.call(person, 'age') // 立即输出 23\n\n// bind是科里化\nconst say = sayKey.bind(person) // 不执行\n// 想执行再执行\nsay('name') // Sunshine_Lin\nsay('age') // 23\n```\n\n### 25、什么是compose？简单实现一个？\n\n简单的compose函数\n\n```js\nconst compose = (a , b) => c => a( b( c ) );\n```\n\n例子：统计单词个数\n\n```js\nconst space = (str) => str.split(' ')\nconst len = (arr) => arr.length\n\n\n// 普通写法\nconsole.log(len(space('i am linsanxin'))) // 3\nconsole.log(len(space('i am 23 year old'))) // 5\nconsole.log(len(space('i am a author in juejin'))) // 6\n\n\n// compose写法\n    const compose = (...fn) => value => {\n        return fn.reduce((value, fn) => {\n        return fn(value)\n        }, value)\n    }\n    const computedWord = compose(space, len)\n    console.log(computedWord('i am linsanxin')) // 3\n    console.log(computedWord('i am 23 year old')) // 5\n    console.log(computedWord('i am a author in juejin')) // 6\n```\n\n### 26、箭头函数与普通函数的区别？\n\n*   1、箭头函数不可作为构造函数，不能使用new\n*   2、箭头函数没有自己的this\n*   3、箭头函数没有arguments对象\n*   4、箭头函数没有原型对象\n\n### 27、Symbol的应用场景？\n\n#### 应用场景1：使用Symbol来作为对象属性名\n\n平常我们对象的属性都是字符串\n\n```js\n    const obj = {\n    name: 'Sunshine_Lin',\n    age: 23\n}\nconsole.log(obj['name']) // 'Sunshine_Lin'\nconsole.log(obj['age']) // 23\n```\n\n其实也可以用Symbol来当做属性名\n\n```js\nconst gender = Symbol('gender')\n    const obj = {\n    name: 'Sunshine_Lin',\n    age: 23,\n    [gender]: '男'\n}\nconsole.log(obj['name']) // 'Sunshine_Lin'\nconsole.log(obj['age']) // 23\nconsole.log(obj[gender]) // 男\n```\n\n但是Symbol作为属性的属性不会被枚举出来，这也是`JSON.stringfy(obj)`时，Symbol属性会被排除在外的原因\n\n```js\nconsole.log(Object.keys(obj)) // [ 'name', 'age' ]\n    for(const key in obj) {\n    console.log(key) // name age\n}\nconsole.log(JSON.stringify(obj)) // {\"name\":\"Sunshine_Lin\",\"age\":23}\n```\n\n其实想获取Symbol属性也不是没办法。\n\n```js\n// 方法一\nconsole.log(Object.getOwnPropertySymbols(obj)) // [ Symbol(gender) ]\n// 方法二\nconsole.log(Reflect.ownKeys(obj)) // [ 'name', 'age', Symbol(gender) ]\n```\n\n#### 应用场景2：使用Symbol来替代常量\n\n有以下场景\n\n```js\n// 赋值\nconst one = 'oneXin'\nconst two = 'twoXin'\n\n    function fun(key) {\n        switch (key) {\n        case one:\n        return 'one'\n        break;\n        case two:\n        return 'two'\n        break;\n    }\n}\n```\n\n如果变量少的话还好，但是变量多的时候，赋值命名很烦，可以利用Symbol的唯一性\n\n```js\nconst one = Symbol()\nconst two = Symbol()\n```\n\n#### 应用场景3：使用Symbol定义类的私有属性\n\n以下例子，PASSWORD属性无法在实例里获取到\n\n```js\n    class Login {\n        constructor(username, password) {\n        const PASSWORD = Symbol()\n        this.username = username\n        this[PASSWORD] = password\n    }\ncheckPassword(pwd) { return this[PASSWORD] === pwd }\n}\n\nconst login = new Login('123456', 'hahah')\n\nconsole.log(login.PASSWORD) // 报错\nconsole.log(login[PASSWORD]) // 报错\nconsole.log(login[PASSWORD]) // 报错\n```\n\n### 28、AMD 和 CMD 的区别？\n\n模块化\n\n代表应用\n\n特点\n\nAMD\n\nrequire.js\n\n1、AMD的api默认一个当多个用  \n2、依赖前置，异步执行\n\nCMD\n\nsea.js\n\n1、CMD的api严格区分，推崇职责单一  \n2、依赖就近，按需加载，同步执行\n\n### 29、Commonjs 和 ES6 Module的区别\n\n取自`阿里巴巴淘系技术前端团队`的回答：\n\n*   1、Commonjs是拷贝输出，ES6模块化是引用输出\n*   2、Commonjs是运行时加载，ES6模块化是编译时输出接口\n*   3、Commonjs是单个值导出，ES6模块化可以多个值导出\n*   4、Commonjs是动态语法可写在函数体中，ES6模块化静态语法只能写在顶层\n*   5、Commonjs的this是当前模块化，ES6模块化的this是undefined 推荐文章[CommonJS模块与ES6模块的区别](https://link.juejin.cn?target=https%3A%2F%2Fwww.cnblogs.com%2Funclekeith%2Fp%2F7679503.html \"https://www.cnblogs.com/unclekeith/p/7679503.html\")\n\n### 30、为什么Commonjs不适用于浏览器\n\n```js\nvar math = require('math');\n\nmath.add(2, 3);\n```\n\n第二行math.add(2, 3)，在第一行require('math')之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n### 31、常用的ES6-ES12的语法有哪些？\n\n请看我这篇文章[基础很好？总结了38个ES6-ES12的开发技巧，倒要看看你能拿几分？](https://juejin.cn/post/6995334897065787422 \"https://juejin.cn/post/6995334897065787422\")【阅读量：4w，点赞：1.8k】\n\n### 32、(a == 1 && a == 2 && a == 3) 有可能是 true 吗？\n\n请看我这篇文章[(a == 1 && a == 2 && a == 3) 有可能是 true 吗？](https://juejin.cn/post/6950664413317693470 \"https://juejin.cn/post/6950664413317693470\")\n\n### 33、函数的length是多少？\n\n请看我这篇文章[95%的人都回答不上来的问题：函数的length是多少？](https://juejin.cn/post/7003369591967596552 \"https://juejin.cn/post/7003369591967596552\")\n\n### 35、JS中的 MUL 函数\n\nMUL表示数的简单乘法。在这种技术中，将一个值作为参数传递给一个函数，而该函数将返回另一个函数，将第二个值传递给该函数，然后重复继续。例如:x_y_z可以表示为\n\n```js\nconst mul = x => y => z => x * y * z\n\nconsole.log(mul(1)(2)(3)) // 6\n```\n\n### 36、深度遍历广度遍历的区别？\n\n对于算法来说 无非就是时间换空间 空间换时间\n\n*   1、深度优先不需要记住所有的节点, 所以占用空间小, 而广度优先需要先记录所有的节点占用空间大\n*   2、深度优先有回溯的操作(没有路走了需要回头)所以相对而言时间会长一点\n*   3、深度优先采用的是堆栈的形式, 即先进后出\n*   4、广度优先则采用的是队列的形式, 即先进先出\n\n### 37、JS中的设计模式有哪些？\n\n推荐这篇文章：[JavaScript设计模式](https://juejin.cn/post/6844903503266054157 \"https://juejin.cn/post/6844903503266054157\")【阅读：4.4w，点赞：1250】\n\n### 38、forEach如何跳出循环？\n\nforEach是不能通过`break`或者`return`来实现跳出循环的，为什么呢？实现过forEach的同学应该都知道，forEach的的回调函数形成了一个作用域，在里面使用`return`并不会跳出，只会被当做`continue`\n\n那怎么跳出循环呢？可以利用`try catch`\n\n```js\n    function getItemById(arr, id) {\n    var item = null;\n        try {\n            arr.forEach(function (curItem, i) {\n                if (curItem.id == id) {\n                item = curItem;\n                throw Error();\n            }\n            })\n                } catch (e) {\n            }\n            return item;\n        }\n```\n\n### 39、JS中如何将页面重定向到另一个页面？\n\n*   1、使用 location.href：window.location.href =“[www.onlineinterviewquestions.com/”](https://link.juejin.cn?target=https%3A%2F%2Fwww.onlineinterviewquestions.com%2F%25E2%2580%259D \"https://www.onlineinterviewquestions.com/%E2%80%9D\")\n    \n*   2、使用 location.replace： window.location.replace(\" [www.onlineinterviewquestions.com/](https://link.juejin.cn?target=https%3A%2F%2Fwww.onlineinterviewquestions.com%2F \"https://www.onlineinterviewquestions.com/\");\");\n    \n\n### 40、实现一遍常用的JS原生方法？\n\n推荐我这篇：[3小时实现了这30个JS原生方法](https://juejin.cn/post/7002248038529892383 \"https://juejin.cn/post/7002248038529892383\")【阅读：1.2w，点赞：488】\n\n### 41、鼠标事件有哪些？\n\n> 注明：鼠标左中右键看`event`对象上的`button`属性，对应`1、2、3` | 事件 | 说明 | | --- | --- | | click | 单机鼠标左键触发，右键无效，当用户焦点在按钮并按下Enter，也会触发 | | dbclick | 双击鼠标左键触发，右键无效 | | mousedown | 单机鼠标任意一个按键都触发 | | mouseout | 鼠标指针位于某个元素上且将要移出元素边界时触发 | | mouseover | 鼠标指针移出某个元素到另一个元素上时触发 | | mouseup | 鼠标指针移出某个元素到另一个元素上时触发 | | mouseover | 松开任意鼠标按键时触发 | | mousemove | 鼠标在某个元素上时持续发生 | | mouseenter | 鼠标进入某个元素边界时触发 | | mouseleave | 鼠标离开某个元素边界时触发 |\n\n### 42、键盘事件有哪些？\n\n> 注明：`event`对象上的`keyCode`属性，是按下的按键的`ASCLL值`，通过这个值可辨别是按下哪个按键。`ASCLL`表在此[ASCII码一览表，ASCII码对照表](https://link.juejin.cn?target=http%3A%2F%2Fc.biancheng.net%2Fc%2Fascii%2F \"http://c.biancheng.net/c/ascii/\") | 事件 | 说明 | | --- | --- | | onkeydown | 某个键盘按键被按下时触发 | | onkeyup | 某个键盘按键被松开时触发 | | onkeypress | 某个按键被按下时触发，不监听功能键，如ctrl，shift |\n\n### 43、JS中鼠标事件的各个坐标？\n\n属性\n\n说明\n\n兼容性\n\noffsetX\n\n以当前的目标元素左上角为原点，定位x轴坐标\n\n除Mozilla外都兼容\n\noffsetY\n\n以当前的目标元素左上角为原点，定位y轴坐标\n\n除Mozilla外都兼容\n\nclientX\n\n以浏览器可视窗口左上角为原点，定位x轴坐标\n\n都兼容\n\nclientY\n\n以浏览器可视窗口左上角为原点，定位y轴坐标\n\n都兼容\n\npageX\n\n以doument对象左上角为原点，定位x轴坐标\n\n除IE外都兼容\n\npageY\n\n以doument对象左上角为原点，定位y轴坐标\n\n除IE外都兼容\n\nscreenX\n\n以计算机屏幕左上顶角为原点，定位x轴坐标(多屏幕会影响)\n\n全兼容\n\nscreenY\n\n以计算机屏幕左上顶角为原点，定位y轴坐标\n\n全兼容\n\nlayerX\n\n最近的绝对定位的父元素（如果没有，则为 document 对象）左上顶角为元素，定位 x 轴坐标\n\nMozilla 和 Safari\n\nlayerY\n\n最近的绝对定位的父元素（如果没有，则为 document 对象）左上顶角为元素，定位 y 轴坐标\n\nMozilla 和 Safari\n\n### 44、JS中元素视图的各个尺寸？\n\n属性\n\n说明\n\noffsetLeft\n\n获取当前元素到定位父节点的left方向的距离\n\noffsetTop\n\n获取当前元素到定位父节点的top方向的距离\n\noffsetWidth\n\n获取当前元素 width + 左右padding + 左右border-width\n\noffsetHeight\n\n获取当前元素 height + 上下padding + 上下border-width\n\nclientWidth\n\n获取当前元素 width + 左右padding\n\nclientHeight\n\n获取当前元素 height + 上下padding\n\nscrollWidth\n\n当前元素内容真实的宽度，内容不超出盒子宽度时为盒子的clientWidth\n\nscrollHeight\n\n当前元素内容真实的高度，内容不超出盒子高度时为盒子的clientHeight\n\n### 45、Window视图的各个尺寸？\n\n属性\n\n说明\n\ninnerWidth\n\ninnerWidth 浏览器窗口可视区宽度（不包括浏览器控制台、菜单栏、工具栏）\n\ninnerHeight\n\ninnerWidth 浏览器窗口可视区高度（不包括浏览器控制台、菜单栏、工具栏）\n\n### 46、Document文档视图的各个尺寸？\n\n属性\n\n说明\n\ndocument.documentElement.clientWidth\n\n浏览器窗口可视区宽度（不包括浏览器控制台、菜单栏、工具栏、滚动条）\n\ndocument.documentElement.clientHeight\n\n浏览器窗口可视区高度（不包括浏览器控制台、菜单栏、工具栏、滚动条）\n\ndocument.documentElement.offsetHeight\n\n获取整个文档的高度（包含body的margin）\n\ndocument.body.offsetHeight\n\n获取整个文档的高度（不包含body的margin）\n\ndocument.documentElement.scrollTop\n\n返回文档的滚动top方向的距离（当窗口发生滚动时值改变）\n\ndocument.documentElement.scrollLeft\n\n返回文档的滚动left方向的距离（当窗口发生滚动时值改变）\n\n9个高级的JavaScript方法\n-----------------\n\n### 1\\. getBoundingClientRect\n\n#### 1.1 是什么\n\n`Element.getBoundingClientRect()`  方法返回元素的大小及其相对于视口的位置。返回的是一个对象，对象里有这8个属性：`left，right，top，bottom，width，height，x，y`\n\n![截屏2021-07-25 下午7.42.59.png](/images/jueJin/520a59a2741a49a.png)\n\n#### 1.2 兼容性\n\n基本在每一个浏览器都可以使用`getBoundingClientRect` ![截屏2021-07-25 下午7.45.23.png](/images/jueJin/5fe7137465614b0.png)\n\n#### 1.3 判断元素是否在可视区域\n\n这是`getBoundingClientRect`最常应用的场景了，判断一个元素是否完整出现在视口里\n\n```js\n// html\n\n<div id=\"box\"></div>\n\n    body {\n    height: 3000px;\n    width: 3000px;\n}\n\n    #box {\n    width: 300px;\n    height: 300px;\n    background-color: red;\n    margin-top: 300px;\n    margin-left: 300px;\n}\n\n// js\n\nconst box = document.getElementById('box')\n    window.onscroll = function () {\n    // box完整出现在视口里才会输出true，否则为false\n    console.log(checkInView(box))\n}\n\n    function checkInView(dom) {\n    const { top, left, bottom, right } = dom.getBoundingClientRect()\n    console.log(top, left, bottom, right)\n    console.log(window.innerHeight, window.innerWidth)\n    return top >= 0 &&\n    left >= 0 &&\n    bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n    right <= (window.innerWidth || document.documentElement.clientWidth)\n}\n```\n\n根据这个用处，咱们可以实现：**懒加载和无限滚动**\n\n#### 1.4 缺点？\n\n*   1、每次scroll都得重新计算，性能耗费大\n*   2、引起`重绘回流`\n\n### 2\\. IntersectionObserver\n\n#### 2.1 是什么\n\n`IntersectionObserver`**接口** 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗([viewport](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FViewport \"https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport\"))交叉状态的方法。祖先元素与视窗([viewport](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FViewport \"https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport\"))被称为**根(root)**\n\n通俗点说就是：`IntersectionObserver`是用来监听**某个元素与视口**的`交叉状态`的。交叉状态是什么呢？请看下图，一开始整个元素都在视口内，那么元素与视口的交叉状态就是**100%**，而我往下滚动，元素只有一半显示在视口里，那么元素与视口的交叉状态为**50%**：\n\n![截屏2021-07-25 下午9.11.41.png](/images/jueJin/b16856906d2f41b.png)\n\n#### 2.2 用法\n\n```js\n// 接收两个参数 callback  option\nvar io = new IntersectionObserver(callback, option);\n\n// 开始观察(可观察多个元素)\nio.observe(document.getElementById('example1'));\nio.observe(document.getElementById('example2'));\n\n// 停止观察某个元素\nio.unobserve(element);\n\n// 关闭观察器\nio.disconnect();\n```\n\n#### 2.3 callback\n\n`callback`一般有两种触发情况。一种是目标元素刚刚进入视口（可见），另一种是完全离开视口（不可见）。\n\n```js\nvar io = new IntersectionObserver(\n    entries => {\n    console.log(entries);\n}\n);\n```\n\n`callback`函数的参数（`entries`）是一个数组，每个成员都是一个[`IntersectionObserverEntry`](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FIntersectionObserverEntry \"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry\")对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，`entries`数组就会有两个成员。\n\n![截屏2021-07-25 下午9.31.02.png](/images/jueJin/528a81ce035844b.png)\n\n#### 2.4 IntersectionObserverEntry对象\n\n```js\n    {\n    time: 3893.92,\n        rootBounds: ClientRect {\n        bottom: 920,\n        height: 1024,\n        left: 0,\n        right: 1024,\n        top: 0,\n        width: 920\n        },\n            boundingClientRect: ClientRect {\n            // ...\n            },\n                intersectionRect: ClientRect {\n                // ...\n                },\n                intersectionRatio: 0.54,\n                target: element\n            }\n```\n\n属性解析：\n\n*   `time`：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒\n*   `target`：被观察的目标元素，是一个 DOM 节点对象\n*   `rootBounds`：根元素的矩形区域的信息，`getBoundingClientRect()`方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回`null`\n*   `boundingClientRect`：目标元素的矩形区域的信息\n*   `intersectionRect`：目标元素与视口（或根元素）的交叉区域的信息\n*   `intersectionRatio`：目标元素的可见比例，即`intersectionRect`占`boundingClientRect`的比例，完全可见时为`1`，完全不可见时小于等于`0`\n\n#### 2.5 option\n\n讲讲第二个参数option里比较重要的两个属性：`threshold和root`\n\n首先讲讲`threshold`：\n\n`threshold`属性决定了什么时候触发回调函数。它是一个数组，每个成员都是一个门槛值，默认为`[0]`，即交叉比例（`intersectionRatio`）达到`0`时触发回调函数。\n\n```ini\nnew IntersectionObserver(\nentries => {/* ... */},\n    {\nthreshold: [0, 0.25, 0.5, 0.75, 1]\n}\n);\n```\n\n用户可以自定义这个数组。比如，`[0, 0.25, 0.5, 0.75, 1]`就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。\n\n再说说`root`：\n\nIntersectionObserver API 支持容器内滚动。`root`属性指定目标元素所在的容器节点（即根元素）。注意，容器元素必须是目标元素的祖先节点。\n\n```ini\nnew IntersectionObserver(\nentries => {/* ... */},\n    {\n    threshold: [0, 0.25, 0.5, 0.75, 1],\n    root: document.getElementById('#container')\n}\n);\n```\n\n#### 2.6 完整例子\n\n```js\n    body {\n    height: 3000px;\n    width: 3000px;\n}\n\n    #box1 {\n    width: 300px;\n    height: 300px;\n    background-color: red;\n    margin-top: 100px;\n    margin-left: 300px;\n}\n    #box2 {\n    width: 300px;\n    height: 300px;\n    background-color: red;\n    margin-top: 100px;\n    margin-left: 300px;\n}\n<div id=\"box1\"></div>\n<div id=\"box2\"></div>\n\n    const io = new IntersectionObserver(entries => {\n    console.log(entries)\n        }, {\n    threshold: [0, 0.25, 0.5, 0.75, 1]\n    // root: xxxxxxxxx\n    })\n    io.observe(document.getElementById('box1'))\n    io.observe(document.getElementById('box2'))\n```\n\n#### 2.7 使用场景\n\n*   1、可以像`getBoundingClientRect`那样判断元素是否在视口里，并且好处是，不会引起重绘回流\n*   2、同理，有了第一点功能，就可以做`懒加载和无限滚动`功能了\n\n#### 2.8 缺点\n\n想兼容IE的就别考虑这个API了。。。 ![截屏2021-07-25 下午9.44.42.png](/images/jueJin/22318ac18e004c6.png)\n\n### 3\\. createNodeIterator\n\n#### 3.1 结识这个API\n\n我是怎么认识这个API的呢？我面试的时候被问到了：`说一说，如何遍历输出页面中的所有元素`。我第一时间肯定想到使用循环递归去输出。面试官：行吧，回家等消息吧。\n\n后来我回家一查，才知道了`createNodeIterator`这个API\n\n#### 3.2 解题\n\n那如何使用`createNodeIterator`对页面中所有元素进行遍历输出呢？\n\n```js\nconst body = document.getElementsByTagName('body')[0]\nconst it = document.createNodeIterator(body)\nlet root = it.nextNode()\n    while(root) {\n    console.log(root)\n    root = it.nextNode()\n}\n```\n\n找个网站测试下：\n\n![截屏2021-07-25 下午10.07.30.png](/images/jueJin/0c4d9c5e6f9e4dd.png)\n\n#### 3.3 详细参数\n\n详细参数可以看[这里](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDocument%2FcreateNodeIterator \"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createNodeIterator\")，讲的很详细\n\n#### 3.4 兼容性\n\n一片绿啊，大胆放心使用吧！ ![截屏2021-07-25 下午10.08.43.png](/images/jueJin/6a0d74095d9e486.png)\n\n### 4\\. getComputedStyle\n\n#### 4.1 是什么\n\n`Window.getComputedStyle()`方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。\n\n```js\nwindow.getComputedStyle(element, pseudoElement)\n```\n\n*   `element`: 必需，要获取样式的元素。\n*   `pseudoElement`: 可选，伪类元素，当不查询伪类元素的时候可以忽略或者传入 null。\n\n![截屏2021-07-25 下午10.23.01.png](/images/jueJin/94febd1d6dc5443.png)\n\n#### 4.2 使用\n\n搭配`getPropertyValue`可以获取到具体样式\n\n```js\n// html\n    #box {\n    width: 300px;\n    height: 300px;\n    background-color: yellow;\n}\n\n<div id=\"box\"></div>\n\nconst box = document.getElementById('box')\nconst styles = window.getComputedStyle(box)\n// 搭配getPropertyValue可以获取到具体样式\nconst height = styles.getPropertyValue(\"height\")\nconst width = styles.getPropertyValue(\"width\")\nconsole.log(height, width) // ’300px‘ '300px'\n```\n\n#### 4.3 兼容性\n\n一片绿油油。放心使用。 ![截屏2021-07-25 下午10.33.29.png](/images/jueJin/34b836a323d648c.png)\n\n### 5\\. requestAnimationFrame\n\n这篇文章讲的不错，介绍，用法，兼容性，都说的明明白白：[requestAnimationFrame理解与实践](https://link.juejin.cn?target=https%3A%2F%2Fnewbyvector.github.io%2F2018%2F05%2F01%2F2015-05-01%2F \"https://newbyvector.github.io/2018/05/01/2015-05-01/\")\n\n### 6\\. requestIdleCallback\n\n这篇文章讲的不错，介绍，用法，兼容性，都说的明明白白：[你应该知道的requestIdleCallback](https://juejin.cn/post/6844903592831238157 \"https://juejin.cn/post/6844903592831238157\")\n\n### 7\\. DOMContentLoaded\n\n#### 7.1 是什么\n\n当初始的 **HTML** 文档被完全加载和解析完成之后，**`DOMContentLoaded`** 事件被触发，而无需等待样式表、图像和子框架的完全加载。\n\n这时问题又来了，“HTML 文档被加载和解析完成”是什么意思呢？或者说，HTML 文档被加载和解析完成之前，浏览器做了哪些事情呢？那我们需要从浏览器渲染原理来谈谈。\n\n浏览器向服务器请求到了 HTML 文档后便开始解析，产物是 DOM（文档对象模型），到这里 HTML 文档就被加载和解析完成了。如果有 CSS 的会根据 CSS 生成 CSSOM（CSS 对象模型），然后再由 DOM 和 CSSOM 合并产生渲染树。有了渲染树，知道了所有节点的样式，下面便根据这些节点以及样式计算它们在浏览器中确切的大小和位置，这就是布局阶段。有了以上这些信息，下面就把节点绘制到浏览器上。所有的过程如下图所示：\n\n![截屏2021-07-25 下午10.49.44.png](/images/jueJin/72715abc7afc4a2.png)\n\n现在你可能了解 HTML 文档被加载和解析完成前浏览器大概做了哪些工作，但还没完，因为我们还没有考虑现在前端的主角之一 JavaScript。\n\nJavaScript 可以阻塞 DOM 的生成，也就是说当浏览器在解析 HTML 文档时，如果遇到\n\n```xml\n<body>\n<script type=\"text/javascript\">\nconsole.log(document.getElementById('ele')); // null\n</script>\n\n<div id=\"ele\"></div>\n\n<script type=\"text/javascript\">\nconsole.log(document.getElementById('ele')); // <div id=\"ele\"></div>\n</script>\n</body>\n```\n\n另外，因为 JavaScript 可以查询任意对象的样式，所以意味着在 CSS 解析完成，也就是 CSSOM 生成之后，JavaScript 才可以被执行。\n\n到这里，我们可以总结一下。当文档中没有脚本时，浏览器解析完文档便能触发 DOMContentLoaded 事件；如果文档中包含脚本，则脚本会阻塞文档的解析，而脚本需要等 CSSOM 构建完成才能执行。在任何情况下，DOMContentLoaded 的触发不需要等待图片等其他资源加载完成。\n\n#### 7.2 异步脚本\n\n我们到这里一直在说同步脚本对网页渲染的影响，如果我们想让页面尽快显示，那我们可以使用异步脚本。HTML5 中定义了两个定义异步脚本的方法：defer 和 async。我们来看一看他们的区别。\n\n![image.png](/images/jueJin/b433867f313f458.png) 同步脚本（标签中不含 async 或 defer）：\n\n当 HTML 文档被解析时如果遇见（同步）脚本，则停止解析，先去加载脚本，然后执行，执行结束后继续解析 HTML 文档。过程如下图：\n\n![image.png](/images/jueJin/cb50ffd06d96405.png)\n\ndefer 脚本：\n\n当 HTML 文档被解析时如果遇见 defer 脚本，则在后台加载脚本，文档解析过程不中断，而等文档解析结束之后，defer 脚本执行。另外，defer 脚本的执行顺序与定义时的位置有关。过程如下图：\n\n![image.png](/images/jueJin/9d1ee928523b460.png)\n\nasync 脚本：\n\n当 HTML 文档被解析时如果遇见 async 脚本，则在后台加载脚本，文档解析过程不中断。脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析。过程如下图：\n\n![image.png](/images/jueJin/ca7cd2d573194e2.png)\n\n如果你 Google \"async 和 defer 的区别\"，你可能会发现一堆类似上面的文章或图片，而在这里，我想跟你分享的是 async 和 defer 对 DOMContentLoaded 事件触发的影响。\n\n**defer 与 DOMContentLoaded**\n\n如果 script 标签中包含 defer，那么这一块脚本将不会影响 HTML 文档的解析，而是等到 HTML 解析完成后才会执行。而 DOMContentLoaded 只有在 defer 脚本执行结束后才会被触发。 所以这意味着什么呢？HTML 文档解析不受影响，等 DOM 构建完成之后 defer 脚本执行，但脚本执行之前需要等待 CSSOM 构建完成。在 DOM、CSSOM 构建完毕，defer 脚本执行完成之后，DOMContentLoaded 事件触发。\n\n**async 与 DOMContentLoaded**\n\n如果 script 标签中包含 async，则 HTML 文档构建不受影响，解析完毕后，DOMContentLoaded 触发，而不需要等待 async 脚本执行、样式表加载等等。\n\n#### 7.3 DOMContentLoaded 与 load\n\n在回头看第一张图：\n\n![](/images/jueJin/a47e823a640f49c.png)\n\n与标记 1 的蓝线平行的还有一条红线，红线就代表 load 事件触发的时间，对应的，在最下面的概览部分，还有一个用红色标记的 \"Load:1.60s\"，描述了 load 事件触发的具体时间。\n\n这两个事件有啥区别呢？点击这个网页你就能明白：[testdrive-archive.azu...](https://link.juejin.cn?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftestdrive-archive.azurewebsites.net%2FHTML5%2FDOMContentLoaded%2FDefault.html \"https://link.zhihu.com/?target=https%3A//testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html\")\n\n解释一下，当 HTML 文档解析完成就会触发 DOMContentLoaded，而所有资源加载完成之后，load 事件才会被触发。\n\n另外需要提一下的是，我们在 jQuery 中经常使用的 (document).ready(function()//...代码...);其实监听的就是DOMContentLoaded事件，而(document).ready(function() { // ...代码... }); 其实监听的就是 DOMContentLoaded 事件，而 (document).ready(function()//...代码...);其实监听的就是DOMContentLoaded事件，而(document).load(function() { // ...代码... }); 监听的是 load 事件。\n\n#### 7.4 使用\n\n```js\n    document.addEventListener(\"DOMContentLoaded\", function(event) {\n    console.log(\"DOM fully loaded and parsed\");\n    });\n```\n\n#### 7.5 兼容性\n\n绿油油一片，放心使用\n\n![截屏2021-07-25 下午11.00.35.png](/images/jueJin/1ff0e439b31b4df.png)\n\n### 8\\. MutationObserver\n\n#### 8.1 是什么\n\n`MutationObserver` 是一个内建对象，它观察 DOM 元素，并在检测到更改时触发回调。\n\n#### 8.2 用法\n\n```javascript\n// 选择需要观察变动的节点\nconst targetNode = document.getElementById('some-id');\n\n// 观察器的配置（需要观察什么变动）\nconst config = { attributes: true, childList: true, subtree: true };\n\n// 当观察到变动时执行的回调函数\n    const callback = function(mutationsList, observer) {\n    // Use traditional 'for loops' for IE 11\n        for(let mutation of mutationsList) {\n            if (mutation.type === 'childList') {\n            console.log('A child node has been added or removed.');\n        }\n            else if (mutation.type === 'attributes') {\n            console.log('The ' + mutation.attributeName + ' attribute was modified.');\n        }\n    }\n    };\n    \n    // 创建一个观察器实例并传入回调函数\n    const observer = new MutationObserver(callback);\n    \n    // 以上述配置开始观察目标节点\n    observer.observe(targetNode, config);\n    \n    // 之后，可停止观察\n    observer.disconnect();\n```\n\n#### 8.3 config\n\n`config` 是一个具有布尔选项的对象，该布尔选项表示“将对哪些更改做出反应”：\n\n*   `childList` —— `node` 的直接子节点的更改，\n    \n*   `subtree` —— `node` 的所有后代的更改，\n    \n*   `attributes` —— `node` 的特性（attribute），\n    \n*   `attributeFilter` —— 特性名称数组，只观察选定的特性。\n    \n*   `characterData` —— 是否观察 `node.data`（文本内容） 其他几个选项：\n    \n*   `attributeOldValue` —— 如果为 `true`，则将特性的旧值和新值都传递给回调（参见下文），否则只传新值（需要 `attributes` 选项），\n    \n*   `characterDataOldValue` —— 如果为 `true`，则将 `node.data` 的旧值和新值都传递给回调（参见下文），否则只传新值（需要 `characterData` 选项）。\n    \n\n#### 8.4 兼容性\n\n![截屏2021-07-25 下午11.07.52.png](/images/jueJin/3ecab3606bcc479.png)\n\n### 9\\. Promise.any\n\n#### 9.1 是什么\n\n`Promise.any()` 接收一个`Promise`可迭代对象，只要其中的一个 `promise` 成功，就返回那个已经成功的 `promise` 。如果可迭代对象中没有一个 `promise` 成功（即所有的 `promises` 都失败/拒绝），就返回一个失败的 promise 和`AggregateError`类型的实例，它是 Error 的一个子类，用于把单一的错误集合在一起。本质上，这个方法和`Promise.all()`是相反的。\n\n#### 9.2 用法（例子）\n\n```javascript\n    const promise1 = new Promise((resolve, reject) => {\n    setTimeout(reject, 100, 'promise 1 rejected');\n    });\n    \n        const promise2 = new Promise((resolve, reject) => {\n        setTimeout(resolve, 400, 'promise 2 resolved at 400 ms');\n        });\n        \n            const promise3 = new Promise((resolve, reject) => {\n            setTimeout(resolve, 700, 'promise 3 resolved at 800 ms');\n            });\n            \n                (async () => {\n                    try {\n                    let value = await Promise.any([promise1, promise2, promise3]);\n                    console.log(value);\n                        } catch (error) {\n                        console.log(error);\n                    }\n                    })();\n```\n\n#### 9.3 兼容性\n\n![截屏2021-07-25 下午11.18.15.png](/images/jueJin/0ee796495a0a446.png)\n\n结语\n--\n\n如果你觉得此文对你有一丁点帮助，点个赞，鼓励一下林三心哈哈。\n\n**如果你想一起学习前端或者摸鱼，那你可以加我，加入我的摸鱼学习群，点击这里** ---> [摸鱼沸点](https://juejin.cn/pin/7035153948126216206 \"https://juejin.cn/pin/7035153948126216206\")\n\n**如果你是有其他目的的，别加我，我不想跟你交朋友，我只想简简单单学习前端，不想搞一些有的没的！！！**",
	"selfDefined": "likes:2900,comments:138,collects:6300,likes:111450"
}