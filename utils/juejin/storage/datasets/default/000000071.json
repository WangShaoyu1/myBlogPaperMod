{
	"title": "十分钟搭建一个Vite+React+TS+ESLint+Prettier+Husky+Commitlint项目",
	"author": "我不吃饼干",
	"publishTime": "2022-07-24",
	"readTime": "阅读4分钟",
	"tags": "[\"前端\",\"Vite\"]",
	"description": "闲着没事想写个项目，顺便把搭建前端开发规范工作流的过程记录下，其实现在这些工具已经越来越方便了，以前配各种错误，现在新项目十分钟真的轻松搞定（网速不拉跨的情况下）。",
	"article": "走过路过发现 bug 请指出，拯救一个辣鸡（但很帅）的少年就靠您啦！！！\n\n闲着没事想写个项目，顺便把搭建前端开发规范工作流的过程记录下，其实现在这些工具已经越来越方便了，以前配各种错误，现在新项目十分钟真的轻松搞定（网速不拉跨的情况下）。\n\n我使用的包管理器是 Yarn ，使用 npm 或 pnpm 的可以自己调整下相关命令。\n\n创建项目\n----\n\n进入你想创建项目的目录，运行 `yarn create vite` 然后根据提示输入项目名，然后依次选择 react、react-ts 即可创建一个 React+TS 项目。\n\n创建后按照提示进入项目文件夹并安装依赖，然后运行 `yarn dev` 即可启动项目。不同于 Vite2，可以看到 Vite3 的默认端口号是 `5173`。\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45a80abfcc3e42de9d1f1dab98b5d621~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)\n\n打开 [http://localhost:5173/](https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A5173%2F \"http://localhost:5173/\") 可以看到默认页面。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb13a347a1f14641b70868e7a30e17a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)\n\n代码规范\n----\n\n### ESLint\n\n我们通过下面的命令可以非常简单地进行 ESLint 的初始化。\n\nbash\n\n 代码解读\n\n复制代码\n\n`npm init @eslint/config`\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b22cbd37988488991462d7434ef6135~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)\n\n按需选择完配置后，选择立即安装，就可一键安装相关依赖。安装成功后 ESLint 帮我们创建了 `.eslintrc.cjs` 配置文件（`cjs` 是指 CommonJS 格式）。\n\njs\n\n 代码解读\n\n复制代码\n\n`module.exports = {     \"env\": {         \"browser\": true,         \"es2021\": true     },     \"extends\": [         \"eslint:recommended\",         \"plugin:react/recommended\",         \"plugin:@typescript-eslint/recommended\"     ],     \"parser\": \"@typescript-eslint/parser\",     \"parserOptions\": {         \"ecmaFeatures\": {             \"jsx\": true         },         \"ecmaVersion\": \"latest\",         \"sourceType\": \"module\"     },     \"plugins\": [         \"react\",         \"@typescript-eslint\"     ],     \"rules\": {     } }`\n\n可以看到生成的配置文件继承了 `\"eslint:recommended\", \"plugin:react/recommended\", \"plugin:@typescript-eslint/recommended\"` ，我们如果需要配置自己的 lint 规则可以在 rules 中添加。\n\n### Prettier\n\n一般 ESLint 用于检测代码风格代码规范，Prettier 用于对代码进行格式化。\n\n先安装依赖\n\nshell\n\n 代码解读\n\n复制代码\n\n`yarn add prettier -D`\n\n然后再根目录创建 `.prettierrc.js` 配置文件\n\njs\n\n 代码解读\n\n复制代码\n\n`module.exports = {   printWidth: 80,   tabWidth: 2,   useTabs: false,   singleQuote: true,   semi: false,   trailingComma: \"none\",   bracketSpacing: true }`\n\n### ESLint + Prettier\n\n接下来在 ESLint 中引入 Prettier，安装相关依赖。\n\nshell\n\n 代码解读\n\n复制代码\n\n`yarn add eslint-config-prettier eslint-plugin-prettier -D`\n\n现在更改 Eslint 的配置文件 `.eslintrc.cjs` 在里面加入 Prettier 相关配置。具体含义可见 [github.com/prettier/es…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprettier%2Feslint-plugin-prettier%23recommended-configuration \"https://github.com/prettier/eslint-plugin-prettier#recommended-configuration\")\n\ndiff\n\n 代码解读\n\n复制代码\n\n`module.exports = {     \"env\": {         \"browser\": true,         \"es2021\": true     },     \"extends\": [         \"eslint:recommended\",         \"plugin:react/recommended\",         \"plugin:@typescript-eslint/recommended\", +       \"plugin:prettier/recommended\"     ],     \"parser\": \"@typescript-eslint/parser\",     \"parserOptions\": {         \"ecmaFeatures\": {             \"jsx\": true         },         \"ecmaVersion\": \"latest\",         \"sourceType\": \"module\"     },     \"plugins\": [         \"react\",         \"@typescript-eslint\", +       \"prettier\"     ],     \"rules\": { +       \"prettier/prettier\": \"error\", +       \"arrow-body-style\": \"off\", +       \"prefer-arrow-callback\": \"off\"     } }`\n\n接下来在 `package.json` 的 `script` 中添加命令。\n\njson\n\n 代码解读\n\n复制代码\n\n`{     \"script\": {         \"lint\": \"eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./\"     } }`\n\n尝试运行一下 `yarn lint` 但是发现报错了。\n\njavascript\n\n 代码解读\n\n复制代码\n\n`Error [ERR_REQUIRE_ESM]: require() of ES Module /Users/Code/2022/leetcode-vj-fe/.prettierrc.js from /Users/Code/2022/leetcode-vj-fe/node_modules/prettier/third-party.js not supported.`\n\n这个是 `.prettierrc.js` 中使用 CommonJS 语法报错，把 `.prettierrc.js` 也改名为 `.prettierrc.cjs` 就好了。\n\n或者配置允许 CommonJS 语法，删除 `package.json` 中的 `\"type\": \"module\"`，同时修改 `.eslintrc.cjs` 的 `env`。\n\ndiff\n\n 代码解读\n\n复制代码\n\n`module.exports = {   env: {     browser: true,     es2021: true, +   node: true   },   // ... }`\n\n再试下发现还是有错误\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdb267c1ee624b8e8a77fc4e459d52b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)\n\n错误看起来也比较明显，就是我们没有引入 React，在 React17 中，我们已经不需要为 JSX 显示引入 React 了，按照提示更改下 `.eslintrc.cjs`。\n\njs\n\n 代码解读\n\n复制代码\n\n`module.exports = {   extends: [     // ...     'plugin:react/jsx-runtime'   ],   //...   settings: {     react: {       version: 'detect'     }   } }`\n\n再运行已经没有报错了，我们看到 ESLint 已经生效，对 App.tsx 进行了修复。\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f76078bb9cc843c683d48e9a3a7b04c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)\n\n### Vite 中引入 ESLint\n\n在 Vite 中引入 ESLint 插件，以便在开发阶段发现问题。\n\nshell\n\n 代码解读\n\n复制代码\n\n`yarn add vite-plugin-eslint -D`\n\n然后在 `vite.config.ts` 引入插件\n\nts\n\n 代码解读\n\n复制代码\n\n`import { defineConfig } from 'vite' import react from '@vitejs/plugin-react' import viteEslint from 'vite-plugin-eslint' // https://vitejs.dev/config/ export default defineConfig({   plugins: [     react(),     viteEslint({       failOnError: false     })   ] })`\n\n我加了选项 `failOnError: false` 因为不想再开发阶段因为 ESLint 的错误打断开发，大家也可以使用默认配置，不传参数。现在我们可以在运行时的控制台看到 ESLint 的报错了。\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eeb62c1d1654078bbe84865250f5fec~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)\n\nHusky + lint-staged\n-------------------\n\n### Husky\n\n通过 Husky 在 Git commit 时进行代码校验。\n\n首先安装依赖\n\nshell\n\n 代码解读\n\n复制代码\n\n`yarn add husky -D`\n\n然后在 package.json 中添加脚本 `prepare` 并运行\n\nshell\n\n 代码解读\n\n复制代码\n\n`npm pkg set scripts.prepare=\"husky install\" npm run prepare`\n\n运行命令后会在项目根目录创建 .husky 文件夹。\n\n现在给 Husky 添加一个 Hook\n\nshell\n\n 代码解读\n\n复制代码\n\n`npx husky add .husky/pre-commit \"npm run lint\"`\n\n添加 hook 之后，每次 `git commit` 之前都会先运行 `npm run lint`，通过之后才会提交代码。\n\n### lint-staged\n\n每次提交都检测所有代码并不是一个好的决定，比如你只修改了文件 A 结果文件 B 报错了，但是文件 B 并不是你负责的模块，emmm改还是不改？\n\n我们可以通过 lint-staged 只对暂存区的代码进行检验。\n\n首先安装依赖\n\nshell\n\n 代码解读\n\n复制代码\n\n`yarn add lint-staged -D`\n\n然后在 `package.json` 添加相关配置。\n\njson\n\n 代码解读\n\n复制代码\n\n`{   \"lint-staged\": {     \"*.{js,jsx,tsx,ts}\": [       \"npm run lint\"     ]   } }`\n\n并在 `.husky/pre-commit` 中替换 `npm run lint` 为 `npx lint-staged`。现在我们每次提交代码前都会对改动的文件进行 Lint 检查。\n\ncommitlint\n----------\n\n使用 commitlint 对提交信息进行校验。先安装依赖：\n\nshell\n\n 代码解读\n\n复制代码\n\n`yarn add @commitlint/cli @commitlint/config-conventional -D`\n\n然后在根目录创建配置文件 `.commitlintrc.cjs`\n\njs\n\n 代码解读\n\n复制代码\n\n`module.exports = {   extends: [\"@commitlint/config-conventional\"] }`\n\n然后把 commitlint 命令也添加 Husky Hook。运行命令：\n\nsh\n\n 代码解读\n\n复制代码\n\n`npx husky add .husky/commit-msg \"npx --no-install commitlint -e $HUSKY_GIT_PARAMS\"`\n\n现在提交信息不合法就会被拦截导致提交失败，规范可见 [commitlint](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fconventional-changelog%2Fcommitlint%23what-is-commitlint \"https://github.com/conventional-changelog/commitlint#what-is-commitlint\") ，你也可以根据需要修改提交信息规范。\n\n现在我们已经配置好了一个 Vite+React+TS+ESLint+Prettier+Husky+Commitlint 项目，可以开始愉快地开发了。"
}