{
	"title": "Linux快速安装FFmpeg、ffprobe、ffplay以及在Linux上的使用",
	"author": "杰哥的技术杂货铺",
	"publishTime": "2024-03-24",
	"readTime": "阅读7分钟",
	"tags": "[\"后端\"]",
	"description": "一、工具简介这些工具都是与多媒体处理和流媒体相关的开源工具，它们都属于FFmpeg多媒体框架。FFmpeg是一个用于处理多媒体内容（音频、视频、图像等）的命令行工具。它可以执行各种各样的操作",
	"article": "一、工具简介\n======\n\n这些工具都是与多媒体处理和流媒体相关的开源工具，它们都属于 FFmpeg 多媒体框架。\n\n*   FFmpeg\n\n是一个用于处理多媒体内容（音频、视频、图像等）的命令行工具。它可以执行各种各样的操作，包括转码、剪辑、合并、分离、编码、解码等。FFmpeg 是一个功能强大且广泛使用的工具，可以在多种平台上运行。\n\n*   FFplay\n\n是 FFmpeg 提供的一个简单的媒体播放器，它可以播放各种格式的音频和视频文件。FFplay 是基于 FFmpeg 库构建的，它提供了一个轻量级的命令行界面，可用于快速播放多媒体文件，适用于测试和简单的播放任务。\n\n*   FFprobe\n\n是一个用于分析多媒体文件的工具。它提供了详细的信息，包括多媒体文件的编解码器、格式、流信息等。FFprobe 可以帮助用户了解多媒体文件的特性，例如分辨率、帧率、比特率等，这对于诊断和处理多媒体文件非常有用。\n\n*   FFserver\n\n是一个流媒体服务器，可以用于实时转码和分发音频/视频流。它可以接受来自各种来源（如摄像头、音频接口等）的多媒体流，并将其转码为不同的格式和分辨率，然后通过网络分发给客户端。FFserver 可以用于构建自己的流媒体平台，例如音视频直播服务或视频点播服务。\n\n二、CentOS7上安装FFmpeg\n==================\n\n在CentOS7 上安装FFmpeg 安装FFmpeg有两种方法，一种是使用源代码构建，一种是使用Nux Dextop存储库使用yum安装，源代码构建相对会麻烦一些麻烦\n\n2.1 方法一：yum安装\n-------------\n\n*   1、启用EPEL存储库（如果已启动可以跳过此步骤）\n\narduino\n\n 代码解读\n\n复制代码\n\n`yum install epel-release`\n\n*   2、安装rpm软件包来启用Nux存储库\n\nruby\n\n 代码解读\n\n复制代码\n\n`rpm -v --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm`\n\n*   3、安装FFmpeg\n\n 代码解读\n\n复制代码\n\n`yum install ffmpeg ffmpeg-devel`\n\n*   4、测试是否安装成功\n\n 代码解读\n\n复制代码\n\n`ffmpeg -version ffprobe -version`\n\n2.2 方法二：源码安装\n------------\n\n*   **1、下载** 源码下载地址：[ffmpeg.org/download.ht…](https://link.juejin.cn?target=https%3A%2F%2Fffmpeg.org%2Fdownload.html%23releases \"https://ffmpeg.org/download.html#releases\")\n\n> 选择最新版本的xz 压缩包\n\n*   **2、源码解压** 上一步我们下载ffmpeg到我们的windows硬盘了\n\n然后我们上传到我们的linux服务器，我选择了SFTP的方式进行上传\n\n在usr/local下创建ffmpeg文件夹，并进入ffmpeg文件夹下\n\nbash\n\n 代码解读\n\n复制代码\n\n`cd /usr/local/ mkdir ffmpeg cd ffmpeg`\n\n*   **3、解压安装包**\n\n 代码解读\n\n复制代码\n\n`tar -xjvf ffmpeg-4.4.1.tar.xz`\n\n*   **4、编译准备**\n\nbash\n\n 代码解读\n\n复制代码\n\n`yum install gcc              # 安装gcc编译器 yum install yasm         # 安装yasm编译器`\n\n*   **5、安装**\n\nbash\n\n 代码解读\n\n复制代码\n\n`cd ffmpeg-4.4.1 ./configure --enable-shared --prefix=/usr/local/ffmpeg/ffmpeg-4.4.1 make make install` \n\n*   **6、将lib目录加载到系统库链接**\n\n添加ffmpeg文件，并修改内容\n\nbash\n\n 代码解读\n\n复制代码\n\n`vim /etc/ld.so.conf.d/ffmpeg.conf`\n\n写入内容：\n\nbash\n\n 代码解读\n\n复制代码\n\n`/usr/local/ffmpeg/ffmpeg-4.4.1/lib`\n\n执行：\n\n 代码解读\n\n复制代码\n\n`ldconfig`    \n\n*   **7、检测是否安装成功** 在ffmpeg-4.4.1文件夹里执行：\n\nbash\n\n 代码解读\n\n复制代码\n\n`./ffmpeg -version`\n\n*   **8、添加到全局变量**\n\n修改配置文件：\n\nbash\n\n 代码解读\n\n复制代码\n\n`vim /etc/profile`\n\n在最后一行添加：\n\nruby\n\n 代码解读\n\n复制代码\n\n`export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig:/usr/local/ffmpeg/ffmpeg-4.4.1/lib/pkgconfig export FFMPEG_HOME=/usr/local/ffmpeg/ffmpeg-4.4.1 export PATH=$PATH:$FFMPEG_HOME`\n\n使配置生效：\n\nbash\n\n 代码解读\n\n复制代码\n\n`source /etc/profile`\n\n三、ffprobe 在linux中的用法\n====================\n\nffprobe 是 FFmpeg 套件中的一个工具，用于分析多媒体数据。它可以用来检查多媒体文件（如音频、视频和字幕文件）的格式、编解码器信息、元数据等。在 Linux 中，ffprobe 的基本用法是通过命令行界面进行的。\n\n3.1 显示多媒体文件的基本信息\n----------------\n\n这个命令会输出一个 JSON 格式的字符串，包含输入文件（input.mp4）的格式和流信息。\n\ncss\n\n 代码解读\n\n复制代码\n\n`ffprobe -v quiet -print_format json -show_format -show_streams input.mp4`\n\n输出信息：\n\njson\n\n 代码解读\n\n复制代码\n\n`{     \"streams\": [         {             \"index\": 0,             \"codec_name\": \"h264\",             \"codec_long_name\": \"H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10\",             \"profile\": \"High\",             \"codec_type\": \"video\",             \"codec_time_base\": \"1/50000\",             \"codec_tag_string\": \"avc1\",             \"codec_tag\": \"0x31637661\",             \"width\": 1080,             \"height\": 1920,             \"coded_width\": 1088,             \"coded_height\": 1920,             \"has_b_frames\": 2,             \"sample_aspect_ratio\": \"1:1\",             \"display_aspect_ratio\": \"9:16\",             \"pix_fmt\": \"yuv420p\",             \"level\": 40,             \"color_range\": \"tv\",             \"color_space\": \"bt709\",             \"chroma_location\": \"left\",             \"refs\": 4,             \"is_avc\": \"1\",             \"nal_length_size\": \"4\",             \"r_frame_rate\": \"25/1\",             \"avg_frame_rate\": \"25/1\",             \"time_base\": \"1/25000\",             \"start_pts\": 0,             \"start_time\": \"0.000000\",             \"duration_ts\": 9471000,             \"duration\": \"378.840000\",             \"bit_rate\": \"771385\",             \"bits_per_raw_sample\": \"8\",             \"nb_frames\": \"9471\",             \"disposition\": {                 \"default\": 1,                 \"dub\": 0,                 \"original\": 0,                 \"comment\": 0,                 \"lyrics\": 0,                 \"karaoke\": 0,                 \"forced\": 0,                 \"hearing_impaired\": 0,                 \"visual_impaired\": 0,                 \"clean_effects\": 0,                 \"attached_pic\": 0             },             \"tags\": {                 \"creation_time\": \"2024-03-04 09:08:06\",                 \"language\": \"und\"             }         },         {             \"index\": 1,             \"codec_name\": \"aac\",             \"codec_long_name\": \"AAC (Advanced Audio Coding)\",             \"profile\": \"LC\",             \"codec_type\": \"audio\",             \"codec_time_base\": \"1/48000\",             \"codec_tag_string\": \"mp4a\",             \"codec_tag\": \"0x6134706d\",             \"sample_fmt\": \"fltp\",             \"sample_rate\": \"48000\",             \"channels\": 2,             \"channel_layout\": \"stereo\",             \"bits_per_sample\": 0,             \"r_frame_rate\": \"0/0\",             \"avg_frame_rate\": \"0/0\",             \"time_base\": \"1/48000\",             \"start_pts\": 0,             \"start_time\": \"0.000000\",             \"duration_ts\": 18188288,             \"duration\": \"378.922667\",             \"bit_rate\": \"128102\",             \"max_bit_rate\": \"153976\",             \"nb_frames\": \"17762\",             \"disposition\": {                 \"default\": 1,                 \"dub\": 0,                 \"original\": 0,                 \"comment\": 0,                 \"lyrics\": 0,                 \"karaoke\": 0,                 \"forced\": 0,                 \"hearing_impaired\": 0,                 \"visual_impaired\": 0,                 \"clean_effects\": 0,                 \"attached_pic\": 0             },             \"tags\": {                 \"creation_time\": \"2024-03-04 09:07:59\",                 \"language\": \"und\"             }         }     ],     \"format\": {         \"filename\": \"input.mp4\",         \"nb_streams\": 2,         \"nb_programs\": 0,         \"format_name\": \"mov,mp4,m4a,3gp,3g2,mj2\",         \"format_long_name\": \"QuickTime / MOV\",         \"start_time\": \"0.000000\",         \"duration\": \"378.921667\",         \"size\": \"42792276\",         \"bit_rate\": \"903453\",         \"probe_score\": 100,         \"tags\": {             \"major_brand\": \"isom\",             \"minor_version\": \"1\",             \"compatible_brands\": \"isom\",             \"creation_time\": \"2024-03-04 09:09:41\"         }     } }`\n\n3.2 显示特定流的信息\n------------\n\n如果你只对音频流或视频流感兴趣，你可以使用 **\\-select\\_streams** 选项来指定。例如，显示视频流信息：\n\narduino\n\n 代码解读\n\n复制代码\n\n`# ffprobe -v quiet -print_format json -show_streams -select_streams v input.mp4`\n\n或者显示音频流信息：\n\ncss\n\n 代码解读\n\n复制代码\n\n`ffprobe -v quiet -print_format json -show_streams -select_streams a input.mp3`\n\n以下是返回信息：\n\njson\n\n 代码解读\n\n复制代码\n\n`{     \"streams\": [         {             \"index\": 0,             \"codec_name\": \"h264\",             \"codec_long_name\": \"H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10\",             \"profile\": \"High\",             \"codec_type\": \"video\",             \"codec_time_base\": \"1/50000\",             \"codec_tag_string\": \"avc1\",             \"codec_tag\": \"0x31637661\",             \"width\": 1080,             \"height\": 1920,             \"coded_width\": 1088,             \"coded_height\": 1920,             \"has_b_frames\": 2,             \"sample_aspect_ratio\": \"1:1\",             \"display_aspect_ratio\": \"9:16\",             \"pix_fmt\": \"yuv420p\",             \"level\": 40,             \"color_range\": \"tv\",             \"color_space\": \"bt709\",             \"chroma_location\": \"left\",             \"refs\": 4,             \"is_avc\": \"1\",             \"nal_length_size\": \"4\",             \"r_frame_rate\": \"25/1\",             \"avg_frame_rate\": \"25/1\",             \"time_base\": \"1/25000\",             \"start_pts\": 0,             \"start_time\": \"0.000000\",             \"duration_ts\": 9471000,             \"duration\": \"378.840000\",             \"bit_rate\": \"771385\",             \"bits_per_raw_sample\": \"8\",             \"nb_frames\": \"9471\",             \"disposition\": {                 \"default\": 1,                 \"dub\": 0,                 \"original\": 0,                 \"comment\": 0,                 \"lyrics\": 0,                 \"karaoke\": 0,                 \"forced\": 0,                 \"hearing_impaired\": 0,                 \"visual_impaired\": 0,                 \"clean_effects\": 0,                 \"attached_pic\": 0             },             \"tags\": {                 \"creation_time\": \"2024-03-04 09:08:06\",                 \"language\": \"und\"             }         }     ] }`\n\n3.3 获取音视频的时长\n------------\n\n如果你只想获取视频的时长，可以使用 **\\-show\\_entries** 选项来指定 **format=duration**，并且设置输出格式为纯文本：\n\n以下是使用ffprobe获取视频时长的基本命令：\n\nlua\n\n 代码解读\n\n复制代码\n\n`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 input.mp4`\n\n以下是使用ffprobe获取音频时长的基本命令：\n\nlua\n\n 代码解读\n\n复制代码\n\n`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 input.mp3`\n\n输出：\n\n 代码解读\n\n复制代码\n\n`378.921667`\n\n在这个命令中：\n\n*   \\-v error：设置日志级别为error，以减少输出中的非必要信息。\n*   \\-show\\_entries format=duration：指定要显示的条目为format下的duration，即视频的时长。\n*   \\-of default=noprint\\_wrappers=1:nokey=1：设置输出格式为默认格式，并去除包装器和键名，只输出时长值。\n*   input.mp4：替换为你的视频文件名。\n*   执行这个命令后，ffprobe会输出视频的时长，以秒为单位。\n\n> 注意：使用以上命令时，确保你已经安装了FFmpeg，并且ffprobe命令在你的系统路径中可用。如果你没有安装FFmpeg，你可以通过包管理器（如apt、yum或pacman）来安装它。"
}