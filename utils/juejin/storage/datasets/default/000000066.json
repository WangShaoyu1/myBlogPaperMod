{
	"title": "陈随易：Node.jsv22更新记录",
	"author": "前端之虎陈随易",
	"publishTime": "2024-04-25",
	"readTime": "阅读3分钟",
	"tags": "[\"前端\",\"JavaScript\",\"Node.js\"]",
	"description": "大家好，我是前端之虎陈随易。目前是：农村程序员(自2020年离职至今都在农村待着)独立开发者(有多个已经在盈利中的产品)自由职业者(睡到自然醒，困就马上睡)个人创业者(注册了自己",
	"article": "大家好，我是前端之虎陈随易。\n\n目前是：\n\n*   农村程序员 (自 `2020` 年离职至今都在农村待着)\n*   独立开发者 (有多个已经在盈利中的产品)\n*   自由职业者 (睡到自然醒，困就马上睡)\n*   个人创业者 (注册了自己的公司，为产品服务)\n*   自驾爱好者 (经常自驾，边看风景边敲码)\n*   小说写作者 (抽空码字中)\n*   开源推进者 (自 `2019` 年持续开源至今)\n\n欢迎跟我交朋友：\n\n*   公众号：`陈随易`\n*   个人网站：[chensuiyi.me](https://link.juejin.cn?target=https%3A%2F%2Fchensuiyi.me \"https://chensuiyi.me\")\n\n让我们一起积极向上，为自己而努力奋斗！\n\n正文\n--\n\n2024年04月25日，Node.js v22 版本正式发布了，让我们来看看这个版本的更新内容吧~\n\nESM：放弃对导入断言的支持\n--------------\n\n用过 assets 没？它的写法是这样的。\n\njavascript\n\n 代码解读\n\n复制代码\n\n`import data from './data.json' assert { type: 'json' };`\n\n使用 asset 来指定导入资源的类型。\n\n那么在 CommonJS 时代，导入 js 和导入 json 都不用特意区分的。\n\njavascript\n\n 代码解读\n\n复制代码\n\n`const data = require('./data.json');`\n\n本次的 Node.js v22 版本发布后，asset 被废弃了。\n\n那么我要使用 import 导入 json 文件，该怎么做呢？\n\n其实很简单，把 assets 换成 with 即可。\n\njavascript\n\n 代码解读\n\n复制代码\n\n`import data from './data.json' with { type: 'json' };`\n\nChrome 浏览器也将会在 v126 版本，讲 asset 语法移除，请大家注意，根据自身情况调整。\n\n内置测试框架被标记为稳定\n------------\n\n用一个图来说明下。\n\n![picture 0](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eea63847bad74a0182b0701ad6303ddc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=900&h=793&s=426077&e=png&b=282924)\n\n图片来源：`@liran_tal`\n\n也就是说，v22 版本以前，你要做测试用例时需要安装红色部分的一大堆依赖。\n\n这个版本以后，红色部分都可以删掉了，只需要图中 3 行绿色代码即可。\n\n不得不说，Node.js 真是越来越好用了。\n\n### 默认启用 WebSocket 客户端\n\nv22 以前的版本\n\njavascript\n\n 代码解读\n\n复制代码\n\n`console.log(WebSocket);`\n\n得到：\n\nbash\n\n 代码解读\n\n复制代码\n\n`console.log(WebSocket);             ^ ReferenceError: WebSocket is not defined     at file:///D:/codes/yicode.tech/labs/test.js:1:13     at ModuleJob.run (node:internal/modules/esm/module_job:222:25)     at async ModuleLoader.import (node:internal/modules/esm/loader:323:24)     at async loadESM (node:internal/process/esm_loader:28:7)     at async handleMainPromise (node:internal/modules/run_main:113:12) Node.js v20.12.1`\n\nv22 版本以后，得到：\n\nbash\n\n 代码解读\n\n复制代码\n\n`[class WebSocket extends EventTarget] {   CONNECTING: 0,   OPEN: 1,   CLOSING: 2,   CLOSED: 3 }`\n\nrequire 可以导入 esm 模块了\n--------------------\n\n官方的 ESM 规范发布以来，以前的语法 require 导入 esm 包的问题一直处于争论中。\n\n那么 v22 版本后，这个问题已经解决了一部分，现在可以使用 require 去导入 esm 模块了。\n\nesm 文件：\n\njavascript\n\n 代码解读\n\n复制代码\n\n`// point.mjs export function distance(a, b) {     return (b.x - a.x) ** 2 + (b.y - a.y) ** 2; } class Point {     constructor(x, y) {         this.x = x;         this.y = y;     } } export default Point;`\n\nrequire 导入 esm 文件：\n\njavascript\n\n 代码解读\n\n复制代码\n\n`// main.js const required = require('./point.mjs'); // [Module: null prototype] { //   default: [class Point], //   distance: [Function: distance] // } console.log(required); (async () => {     const imported = await import('./point.mjs');     console.log(imported === required); // true })();`\n\nfs 新增 glob 和 globSync 方法\n------------------------\n\n难道是跟 Bun 学的？\n\n在 v22 版本以前，我们要获取某个目录所有以 `.js` 结尾的文件，那么我们要么获取全部文件，然后遍历过滤。\n\n要么使用第三方库，比如 `fast-glob` 处理。\n\n那么在 v22 版本以后，可以直接使用 `fs.glob` 或 `fs.globSync` 来实现这个功能了。\n\njavascript\n\n 代码解读\n\n复制代码\n\n`import { glob } from 'node:fs/promises'; for await (const entry of glob('**/*.js')) {     console.log(entry); }`\n\nNode.js 的一小步，好用了一大截。\n\n随易总结\n----\n\nNode.js v22 版本的更新，真的是下血本了。\n\n几个重要的，实验性的功能都标记为稳定版了。\n\n期待 Node.js 越来越好。"
}