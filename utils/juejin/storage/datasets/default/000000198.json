{
	"title": "老弟想自己做个微信，被我一个问题劝退了。。",
	"author": "程序员鱼皮",
	"publishTime": "2024-08-14",
	"readTime": "阅读6分钟",
	"tags": "[\"SQL\",\"数据库\",\"编程语言\"]",
	"description": "最近老弟小阿巴放暑假，想找点事情做。小阿巴思考片刻，一拍脑袋：对啊，我天天用微信，那我就做个微信吧！老弟啊，听我一句劝，咱先别想着做微信了，先实现一个消息管理系统吧。",
	"article": "大家好，我是程序员鱼皮。最近老弟小阿巴放暑假，想找点事情做，于是就来问我：老鲏，我想做个练手项目，有没有什么好的建议？\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/715afa1eca314561bff26d724448dc80~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=YsyGZA0%2FdzmumDYej38i2NIbXOQ%3D)\n\n我说：练手项目的话，就做个自己感兴趣的呗，想加什么功能就加什么，做起来会更舒服~\n\n小阿巴：Emm，我感兴趣的太多了，有没有推荐啊？\n\n我说：那就想想自己经常使用的网站或 APP，选个对业务流程相对熟悉的。\n\n小阿巴思考片刻，一拍脑袋：对啊，我天天用微信，那我就做个微信吧！说不定之后大家都在用我做的软件聊天呢？\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/22e9cc40e07d4c3a95f8e35dc15b3c6d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=BAiZnbLnj7O3c8zA0etLLdZEMDM%3D)\n\n我一听，不禁暗自惊叹，没想到小伙子年纪轻轻，野心很大啊！\n\n我说：想法不错，但想做个微信这样的 IM（即时通讯）项目，可没有那么简单，你有什么实现思路么？说来听听？\n\n小阿巴：微信的核心功能是收发消息，我可以把用户 A 发送的消息保存到数据库中，用户 B 进入聊天界面时，从数据库查询出发给他的消息就行。\n\n我一听这个回答，就知道以小阿巴目前的水平，想做出微信是不太可能了。。。\n\n我问：Emm，暂且不考虑用户体验和性能，我们就先实现基础功能吧，你会怎么让用户查看自己的历史消息呢？\n\n小阿巴思考片刻，然后嘴角微微上扬，露出狡黠的笑容：你是不是以为我会说一次性把所有历史消息全部查出来？可惜啊老鲏，你把我想的太天真了，用户可能有成百上千条历史消息，全量加载会很慢，所以我必然会使用 `分页` 来查询！\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/60f23438822a4afa9a0a7c24e683eb1c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=atfnbVrqAu1xxzFHNsNeT1fdTf4%3D)\n\n我说：行，那你打算怎么分页呢？\n\n小阿巴：这还真难不倒我，这几年我苦练增删改查，分页写得很溜的！纸笔呈上来，看我给你手写 SQL：\n\nsql\n\n 代码解读\n\n复制代码\n\n`select * from message where user = '鱼皮' limit 0, 20;`\n\n我说：Emm，老弟啊，听我一句劝，咱先别想着做微信了，先实现一个消息管理系统吧。\n\n小阿巴：怎么说？吾 SQL 不亦精乎？\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0663db8422bc43ab86c0711d2f52666e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=KOtZYDYTU%2Bo6y2Yfx0CxzayPx3g%3D)\n\n其实这也是一道经典的场景题：即时通讯项目中怎么实现历史消息的下拉分页加载？\n\n下面鱼皮给大家讲解一下。\n\n### 如何实现下拉分页加载？\n\n#### 业务场景\n\n一般在即时通讯项目（比如聊天室）中，我们会采用下拉分页的方式让用户加载历史消息记录。\n\n区别于标准分页每次只展示当前页面的数据，下拉分页加载是 **增量加载** 的模式，每次下拉时会请求加载一小部分新数据，并放到已加载的数据列表中，从而形成无限滚动的效果，确保用户体验流畅。\n\n比如用户有 10 条消息记录，以 5 条为单位进行分页，刚进入房间时只会加载最新的 5 条消息：\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a880a2e6cb80463d90257a297e33d042~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=iC9RDeiirNdKrCZALTdSNLiZ3xk%3D)\n\n下拉后，会加载历史的第 6 - 10 条消息：\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/01442509705c41e49d1a2c0e44f15705~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=V0uKLdV4GcfUEy2MI7wAYKV7VxQ%3D)\n\n理解了业务场景后，再看下实现方案，为什么不建议使用传统分页实现下拉加载。\n\n#### 传统分页的问题\n\n在传统分页中，数据通常是 **基于页码或偏移量** 进行加载的。如果数据在分页过程发生了变化，比如插入新数据、删除老数据，用户看到的分页数据可能会出现不一致，导致用户错过或重复某些数据。\n\n举个例子，对于即时通讯项目，用户可能会持续收到新的消息。如果按照传统分页基于偏移量加载，第一页已经加载了第 1 - 5 行的数据，本来要查询的第二页数据是第 6 - 10 行（对应的 SQL 语句为 limit 5, 5），数据库记录如下：\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5bada35bc542484ebedd421725544e01~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=yjC%2BDTmxNj6%2BP5BlJ7Eau25kDXM%3D)\n\n结果在查询第二页前，突然用户又收到了 5 条新消息，数据库记录就变成了下面这样。原本的第一页，变成了当前的第二页！\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9b8fc56e03254117a03c43b4b05247a7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=MP8iyOIVKfWolEmIEY%2Bo3W6ydq0%3D)\n\n这样就导致查询出的第二页数据，正好是之前已经查询出的第一页的数据，造成了消息重复加载。所以不建议采用这种方法。\n\n#### 推荐方案 - 游标分页\n\n为了解决这种问题，可以使用游标分页。使用一个游标来跟踪分页位置，而不是基于页码，每次请求从上一次请求的游标开始加载数据。\n\n一般我们会选择数据记录的唯一标识符（主键）、时间戳、或者具有排序能力的字段作为游标。比如即时通讯系统中的每个消息，通常都有一个唯一自增的 id，就可以作为游标。每次查询完当前页面的数据后，可以将最后一条消息记录的 id 作为游标值传递给前端（客户端）。\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/68fd0ec582e54b51bfe88c480429ec3a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=PmOrI%2F%2BGqVgd4EGkmrNLop56sbI%3D)\n\n当要加载下一页时，前端携带游标值发起查询，后端操作数据库从 id 小于当前游标值的数据开始查询，这样查询结果就不会受到新增数据的影响。\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7595147f7d11463aa275f5e932315003~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=mu%2FyNmpCVL8x9qhwdbUmUoTTcSM%3D)\n\n对应的 SQL 语句为：\n\nsql\n\n 代码解读\n\n复制代码\n\n`SELECT * FROM messages WHERE id < :cursorId ORDER BY id DESC LIMIT 5;`\n\n#### 扩展知识\n\n其实游标分页是一种经典方案，它的应用场景很多，特别适用于增量数据加载、大数据量的高性能查询和处理。除了 IM 系统获取历史消息记录之外，常见场景还有社交媒体信息流、内容推荐系统、数据迁移备份等等。\n\n游标分页还有很多扩展知识，篇幅原因就不在这里展开了，感兴趣的同学可以在我们的 [程序员面试刷题工具 - 面试鸭](https://link.juejin.cn?target=https%3A%2F%2Fwww.mianshiya.com%2Fbank%2F1795650093939204097%2Fquestion%2F1821408560444809217 \"https://www.mianshiya.com/bank/1795650093939204097/question/1821408560444809217\") 上阅读。\n\n### 最后\n\n小阿巴听完，长叹道：唉，没想到光是这么一个小功能，就把我难住了。\n\n![](https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a9c6bdb3154d4d02a79aa192577523fc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY6bG855qu:q75.awebp?rk3s=f64ab15b&x-expires=1728421087&x-signature=flK8VJxZMjtS3oXAjww9VpOXSzk%3D)\n\n我说：你可别这么想。。。难住你的，可不止这一个小功能啊！想做一个成熟的 IM 系统，除了最基础的消息发送和获取功能外，你得去学习 WebSocket 实时通讯、得考虑到消息收发的性能、得考虑到消息的顺序和一致性、得考虑到消息的存储成本和安全，等等等等。可没那么容易。\n\n小阿巴：得，那我先去做消息管理系统了！🐶\n\n### 更多\n\n💻 编程学习交流：[编程导航](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fliyupi%2Fcode-nav \"https://github.com/liyupi/code-nav\")  \n📃 简历快速制作：[老鱼简历](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fliyupi%2Flaoyujianli \"https://github.com/liyupi/laoyujianli\")  \n✏️ 面试刷题神器：[面试鸭](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fliyupi%2Fmianshiya \"https://github.com/liyupi/mianshiya\")"
}