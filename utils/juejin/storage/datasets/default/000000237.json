{
	"title": "Clickhouse基本介绍",
	"author": "山间小僧",
	"publishTime": "2021-04-07",
	"readTime": "阅读6分钟",
	"tags": "[\"数据库\"]",
	"description": "它是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。这么存数据有什么特点呢，那就是做数据分析相当快，向行式数据库，以MySQL为例，定位某条记录很快，但是，做某一列的统计就不太行了。（MySQ我也颇有研究，有兴趣的可以留言，后续可能考虑出博客呦）绝大多数请求是…",
	"article": "ClickHouse&列式数据库\n================\n\n简单介绍\n----\n\nClickHouse最初是为YandexMetrica世界第二大Web分析平台而开发的 它是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。 它是真正意义上的列式数据库，什么是列式数据库呢\n\n列式数据库\n-----\n\nrowId\n\nguid\n\nname\n\n001\n\naaa\n\nzhangsan\n\n002\n\nbbb\n\nfawaikuangtu\n\n传统的行式数据库是这样存数据的\n\nmakefile\n\n 代码解读\n\n复制代码\n\n`001:aaa,zhangsan 002:bbb,fawaikuangtu`\n\n但是列式数据库存储是按照列进行存的，同一列的数据被存储在一起\n\nmakefile\n\n 代码解读\n\n复制代码\n\n`aaa:001,bbb:002 zhangsan:001,fawaikuangtu:002`\n\n这么存数据有什么特点呢，那就是做数据分析相当快，向行式数据库，以MySQL为例，定位某条记录很快，但是，做某一列的统计就不太行了。（MySQ我也颇有研究，有兴趣的可以留言，后续可能考虑出博客呦）\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a84491438c6428f8741d2ceb88a8394~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8be3d6036cc4ad8b61167e792ea473a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\nOLAP场景的关键特征\n-----------\n\n*   绝大多数请求是以读为主。\n*   数据以相当大的批次（> 1000行）进行更新，而不是单行更新;或者根本不更新。\n*   数据被添加到数据库，基本不怎么修改。\n*   对于读取，大量的数据从数据库中抽取出来，但只有列的一个子集。\n*   表是“宽的”，这意味着它们包含大量的列。\n*   查询相对较少（通常每台服务器数百个查询或更少）。\n*   对于简单的查询，允许大约50 ms的延迟。\n*   列值相当小 - 数字和短字符串（例如，每个URL 60个字节）。\n*   处理单个查询时需要高吞吐量（每台服务器每秒高达数十亿行）。\n*   无事务处理。\n*   数据一致性要求低- 每个查询有一个大表，其他所有的表都是小表。\n*   查询结果显著小于源数据。也就是说，数据被过滤或聚合。结果可以放在单个服务器的内存中。\n\nClickhouse的特点\n-------------\n\n*   数据长度是固定的，避免长度不固定带来的cpu计算\n*   可以压缩数据\n*   可以在磁盘中存储\n*   支持并发\n*   支持分布式的查询处理\n*   支持sql语法\n*   不光按列存储，同事还按向量（列的一部分）进行处理\n*   支持索引\n*   支持近似计算\n    *   各类聚合函数，如：distinct values, medians, quantiles\n    *   于数据的部分样本进行近似查询\n    *   不使用全部的聚合条件，通过随机选择有限个数据聚合条件进行聚合\n*   并允许角色的访问控制（MySQL那一套）\n\n安装\n==\n\n也可以自己下环境啊，我这里偷懒了，就用docker搭了，真香！\n\n创建服务器实例\n\nshell\n\n 代码解读\n\n复制代码\n\n`$ mkdir $HOME/some_clickhouse_database $ docker run -d --name some-clickhouse-server --ulimit nofile=262144:262144 --volume=$HOME/some_clickhouse_database:/var/lib/clickhouse yandex/clickhouse-server`\n\n创建客户端连接服务器\n\nshell\n\n 代码解读\n\n复制代码\n\n`$ docker run -it --rm --link some-clickhouse-server:clickhouse-server yandex/clickhouse-client --host clickhouse-server`\n\n![在这里插入图片描述](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9e6c92a45a74c81b2ec06f34eedb57b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n连接\n==\n\nclickhouse-client原生命令行客户端\n-------------------------\n\n如上图，clickhouse-client就是原生的命令行客户端，他是随着sever一起升级的，向下兼容，也就是说老版本不支持新特性，新特性兼容老版本，一般都是和server一起升级\n\n### 命令参数\n\n*   `--host, -h` -– 服务端的host名称, 默认是`localhost`。您可以选择使用host名称或者IPv4或IPv6地址。\n*   `--port` – 连接的端口，默认值：9000。注意HTTP接口以及TCP原生接口使用的是不同端口。\n*   `--user, -u` – 用户名。 默认值：`default`。\n*   `--password` – 密码。 默认值：空字符串。\n*   `--query, -q` – 使用非交互模式查询。\n*   `--database, -d` – 默认当前操作的数据库. 默认值：服务端默认的配置（默认是`default`）。\n*   `--multiline, -m` – 如果指定，允许多行语句查询（Enter仅代表换行，不代表查询语句完结）。\n*   `--multiquery, -n` – 如果指定, 允许处理用`;`号分隔的多个查询，只在非交互模式下生效。\n*   `--format, -f` – 使用指定的默认格式输出结果。\n*   `--vertical, -E` – 如果指定，默认情况下使用垂直格式输出结果。这与`–format=Vertical`相同。在这种格式中，每个值都在单独的行上打印，这种方式对显示宽表很有帮助。\n*   `--time, -t` – 如果指定，非交互模式下会打印查询执行的时间到`stderr`中。\n*   `--stacktrace` – 如果指定，如果出现异常，会打印堆栈跟踪信息。\n*   `--config-file` – 配置文件的名称。\n*   `--secure` – 如果指定，将通过安全连接连接到服务器。\n*   `--history_file` — 存放命令历史的文件的路径。\n*   `--param_<name>` — 查询参数配置查询参数\n\n支持http接口调用\n----------\n\n默认情况下，clickhouse-server会在8123端口上监控HTTP请求\n\nrust\n\n 代码解读\n\n复制代码\n\n`curl 'http://localhost:8123/?query=SELECT%201'`\n\n在使用keepalive和传输编码chunked时，它在HTTP 1.1上不能很好地工作。\n\nMySQL链接\n-------\n\ncss\n\n 代码解读\n\n复制代码\n\n `mysql --protocol tcp -u default -P 9004`\n\nJDBC驱动链接\n--------\n\n[github.com/ClickHouse/…](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FClickHouse%2Fclickhouse-jdbc \"https://github.com/ClickHouse/clickhouse-jdbc\")\n\n数据类型\n====\n\n*   整数\n    *   Int8-\\[-128:127\\]\n    *   Int16-\\[-32768:32767\\]\n    *   Int32-\\[-2147483648:2147483647\\]\n    *   Int64-\\[-9223372036854775808:9223372036854775807\\]\n*   无符号整数\n    *   UInt8-\\[0:255\\]\n    *   UInt16-\\[0:65535\\]\n    *   UInt32-\\[0:4294967295\\]\n    *   UInt64-\\[0:18446744073709551615\\]\n*   浮点（也会丢失精度）\n    *   Float32 - float\n    *   Float64 - double\n*   特殊浮点数\n    *   inf 正无穷\n    *   \\-inf 负无穷\n    *   NaN非数字\n*   大数据类型（P:1～38多少个十进制数字，S:多少个小树）\n    *   Decimal(P,S)\n    *   Decimal32(S)\n    *   Decimal64(S)\n    *   Decimal128(S)\n*   布尔类型\n    *   没有特定的类型，可以用UInt8，限制为0或1\n*   字符串\n    *   String （任意长度）\n    *   FixedString（N）(固定长，不达长度末尾补充空字节)\n    *   UUID （16-byte ，可以用函数generateUUIDv4()生成）\n*   日期\n    *   Date 精确到日，可以插入日期字符串或10位的时间戳`INSERT INTO dt Values (1546300800, 1), ('2019-01-01', 2);`\n    *   Datetime(\\[timezone\\]) 精确到秒`INSERT INTO dt Values (1546300800, 1), ('2019-01-01 00:00:00', 2);`\n    *   DateTime64(precision, \\[timezone\\]) precision控制精度，timezone控制时区\n*   枚举\n    *   Enum8 eg.:Enum8('hello' = 1, 'world' = 2)\n    *   Enum16\n*   数组\n    *   array(T)\n*   其他\n    *   Nest 改类型的每个子元素都是数组\n    *   Tuple每个子类型都可以随意定义\n    *   Nullable通常和上面各个类型放一起Nullable(Int8)，表示可以存放null\n    *   IPv4\n    *   IPv6\n    *   Map\n\n* * *\n\n> 大致介绍如上，操作基本和MySQL类似，主要烦的是引擎，后续会更新 参考文献 [clickhouse.tech/docs/zh/](https://link.juejin.cn?target=https%3A%2F%2Fclickhouse.tech%2Fdocs%2Fzh%2F \"https://clickhouse.tech/docs/zh/\")"
}