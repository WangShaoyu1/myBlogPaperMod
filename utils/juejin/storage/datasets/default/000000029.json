{
	"title": "让我看看你们公司的代码规范都是啥样的？",
	"author": "白哥学前端",
	"publishTime": "2023-04-21",
	"readTime": "阅读2分钟",
	"tags": "[\"前端\"]",
	"description": "我这里提供一份我自己在使用的项目代码规范，当然我这里比较简陋，有补充的可以打在评论区，我丰富到文章里去。",
	"article": "我这里提供一份我自己在使用的项目代码规范，当然我这里比较简陋，有补充的可以打在评论区，我丰富到文章里去。\n\n1.组件命名规范\n--------\n\ncomponents下的组件命名规范遵循大驼峰命名规范。\n\n示例：`components/AlbumItemCard/AlbumItemCard.vue`\n\n> 小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName\n\n> 大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：MyName\n\n2.目录命名规范\n--------\n\npages下的文件命名规范：遵循小驼峰命名规范。\n\n示例：`pages/createAlbum/createAlbum.vue`\n\n3.CSS命名规范\n---------\n\nclass命名规范为中划线。\n\n示例：\n\nxml\n\n 代码解读\n\n复制代码\n\n`<template> \t<view class=\"gui-padding\">   \t... \t</view> </template> <style lang=\"scss\" scoped> .gui-padding {  ... } </style>`\n\ncss使用scss进行书写。\n\n4.代码注释规范\n--------\n\n行内注释:`//`\n\n函数注释：\n\ntypescript\n\n 代码解读\n\n复制代码\n\n`/**  * @description: 加深颜色值  * @param {string} color 颜色值字符串  * @returns {*} 返回处理后的颜色值   */ export function getDarkColor(color: string, level: number) {   const reg = /^#?[0-9A-Fa-f]{6}$/   if (!reg.test(color)) return ElMessage.warning('输入错误的hex颜色值')   const rgb = hexToRgb(color)   for (let i = 0; i < 3; i++)     rgb[i] = Math.round(20.5 * level + rgb[i] * (1 - level))   return rgbToHex(rgb[0], rgb[1], rgb[2]) }`\n\n接口注释：\n\njavascript\n\n 代码解读\n\n复制代码\n\n``/**  * @description 获取后台用户分页列表(带搜索)  * @param page  * @param limit  * @param username  * @returns {<PageRes<AclUser.ResAclUserList>>}  * @docs https://xxxx  */ export function getAclUserList(params: AclUser.ReqAclUserListParams) {   return http.get<PageRes<AclUser.ResAclUserList>>(     `/admin/acl/user/${params.pageNum}/${params.pageSize}`,     { username: params.username },   ) }``\n\n5.接口书写规范\n--------\n\n5.1 接口定义规范：\n\n接口全部写在`api`目录下面，按照功能划分，分为不同的目录。\n\n比如搜索接口，定义在`api/search/index.ts`下面。\n\n5.2 接口书写规范：\n\n统一使用类方法，内部方法定义每个接口，最后统一`export`，接口使用到的类型全部定义在同级目录的`interfaces.ts`文件中。比如搜索相关的接口：\n\ntypescript\n\n 代码解读\n\n复制代码\n\n``import Service from '../../utils/request' import { SearchItemInterface, SearchPageResponseInterface, SearchParamsInterface } from \"./interfaces\" class CateGory extends Service {   /**    * @description 搜索功能    * @param  {SearchParamsInterface} params 二级分类Id    */   // 搜索   getSearchAlbumInfo(params: SearchParamsInterface) {     return this.post<SearchPageResponseInterface<SearchItemInterface[]>>({       url: '/api/search/albumInfo',       data: params     })   }   /**    * @description: 获取搜索建议    * @param {string} keyword 搜索关键字    * @return {*}    */   getSearchSuggestions(keyword: string) {     return this.get<string[]>({       url: `/api/search/albumInfo/completeSuggest/${keyword}`,       loading:false     })   } } export const search = new CateGory()``\n\n5.3 接口类型定义：\n\ntypescript\n\n 代码解读\n\n复制代码\n\n`// 搜索参数 export interface SearchParamsInterface {   keyword: string;   category1Id?: number | null;   category2Id?: number | null;   category3Id?: number | null;   attributeList?: string[] | null;   order?: string | null;   pageNo?: number;   pageSize?: number; } // 搜索结果item向接口 export interface SearchItemInterface {   id: number;   albumTitle: string;   albumIntro: string;   announcerName: string;   coverUrl: string;   includeTrackCount: number;   isFinished: string;   payType: string   createTime: string;   playStatNum: number;   collectStatNum: number;   buyStatNum: number;   albumCommentStatNum: number; }`\n\n5.4 接口引用\n\n所有export的类接口方法都在`api/index.ts`中统一引入：\n\njavascript\n\n 代码解读\n\n复制代码\n\n`export { courseService } from './category/category' export { albumsService } from './albums/albums' export { search } from './search/search'`\n\n在页面中使用：\n\nxml\n\n 代码解读\n\n复制代码\n\n`<script> \timport { courseService } from \"../../api\"   /**    * @description: 获取所有分类    * @returns {*}    */   const getCategoryList = async () => {     try {       const res = await courseService.findAllCategory()     } catch (error) {       console.log(error)     }   } </script>`\n\n6.分支命名规范\n--------\n\n**分支管理**\n\n**命名规范**\n\n**解释**\n\nmaster 主分支\n\nmaster\n\n稳定版本分支，上线完成回归后后，由项目技术负责人从 release 分支合并进来，并打 tag\n\ntest 测试分支\n\ntest/版本号示例：test/1.0.0\n\n测试人员使用分支，测试时从 feature 分支合并进来，支持多人合并\n\nfeature 功能开发分支\n\nfeature/功能名称示例：feature/blog\n\n新功能开发使用分支，基于master建立\n\nbugfix修复分支\n\nbugfix/功能名称示例：fix/blog\n\n紧急线上bug修复使用分支，基于master建立\n\nrelease 上线分支\n\nrelease/版本号示例：release/0.1.0\n\n用于上线的分支，基于 master 建立，必须对要并入的 分支代码进行 Code review 后，才可并入上线\n\n7.代码提交规范\n--------\n\n**前缀**\n\n**解释**\n\n**示例**\n\nfeat\n\n新功能\n\nfeat: 添加新功能\n\nfix\n\n修复\n\nfix: 修改bug\n\ndocs\n\n文档变更\n\ndocs: 更新文档\n\nstyle\n\n代码样式变更\n\nstyle: 修改样式\n\nrefactor\n\n重构\n\nrefactor: 重构代码\n\nperf\n\n性能优化\n\nperf: 优化了性能\n\ntest\n\n增加测试\n\ntest: 单元测试\n\nrevert\n\n回退\n\nrevert: 回退代码\n\nbuild\n\n打包\n\nbuild: 打包代码\n\nchore\n\n构建过程或辅助工具的变动\n\nchore: 修改构建｜"
}